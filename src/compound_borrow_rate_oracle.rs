pub use compound_borrow_rate_oracle::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod compound_borrow_rate_oracle {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CompoundBorrowRateOracle was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static COMPOUNDBORROWRATEORACLE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"_ctoken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"ethPool\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"contract IERC20Minimal\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"uint32[]\",\"name\":\"_times\",\"type\":\"uint32[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"_results\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedIncomeReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedVariableDebtReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CTokenExchangeRateReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\",\"components\":[]}],\"type\":\"error\",\"name\":\"CanOnlyTradeIfUnlocked\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotLiquidate\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotSettleBeforeMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"DebugError\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedOppositeSigns\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedSqrtPriceZeroBeforeInit\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IRSNotionalAmountSpecifiedMustBeNonZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidMarginDelta\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"LidoGetPooledEthBySharesReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInBurn\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInMint\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginLessThanMinimum\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMet\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMetFCM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"NotEnoughFunds\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OOO\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyFCM\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyMarginEngine\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyOwnerCanUpdatePosition\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyVAMM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__Exp2InputTooBig\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__FromUintOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__LogInputTooSmall\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMath__MulDivOverflow\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNetZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNotSettled\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"RocketPoolGetEthValueReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"WithdrawalExceedsCurrentMargin\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"closeToOrBeyondMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSecondsSinceLastUpdate\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MinSecondsSinceLastUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestampScaled\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"observedValue\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"cardinalityNext\",\"type\":\"uint16\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OracleBufferUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RateCardinalityNext\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ONE_IN_WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"UNDERLYING_YIELD_BEARING_PROTOCOL_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ctoken\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentBlockSlope\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"blockChange\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getApyFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apyFromToWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getApyFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apyFromToWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getBlockSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockChange\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCurrentRateInRay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRate\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastRateSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateChange\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastUpdatedRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"resultRay\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRateFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRateFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rateCardinalityNext\",\"type\":\"uint16\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beforeOrAtRateValueRay\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"apyFromBeforeOrAtToAtOrAfterWad\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"timeDeltaBeforeOrAtToQueriedTimeWad\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"interpolateRateValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateValueRay\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minSecondsSinceLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint216\",\"name\":\"observedValue\",\"type\":\"uint216\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"oracleVars\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rateIndex\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"rateCardinality\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"rateCardinalityNext\",\"type\":\"uint16\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSecondsSinceLastUpdate\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMinSecondsSinceLastUpdate\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"settlementRateCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termStartTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"termEndTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"variableFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termStartTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"termEndTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"variableFactorNoCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"writeOracleEntry\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static COMPOUNDBORROWRATEORACLE_BYTECODE: ethers::contract::Lazy<
        ethers::core::types::Bytes,
    > = ethers::contract::Lazy::new(|| {
        "0x60e06040523480156200001157600080fd5b5060405162003d7f38038062003d7f833981016040819052620000349162000ce1565b83620000403362000205565b6001600160a01b0381166080524362010004556200006962000255602090811b62000e0517901c565b62010003805463ffffffff9290921663ffffffff199283161790556201000580549091166105dc17905550606462010006556001600160a01b03861660a05284806200013c5750836001600160a01b031660a0516001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015620000f657600080fd5b505afa1580156200010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000131919062000da9565b6001600160a01b0316145b6200018e5760405162461bcd60e51b815260206004820152601360248201527f546f6b656e7320646f206e6f74206d617463680000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038416620001e65760405162461bcd60e51b815260206004820152601560248201527f756e6465726c79696e67206d7573742065786973740000000000000000000000604482015260640162000185565b60ff831660c052620001f9828262000267565b50505050505062000f1b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062000262426200052e565b905090565b62000276600261ffff62000ddf565b825110620002b05760405162461bcd60e51b815260040162000185906020808252600490820152631350561560e21b604082015260600190565b8151815161ffff821614620002fd5760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b604482015260640162000185565b60006200030c82600162000e02565b61ffff166001600160401b038111156200032a576200032a62000b89565b60405190808252806020026020018201604052801562000354578160200160208202803683370190505b50905060006200036683600162000e02565b61ffff166001600160401b0381111562000384576200038462000b89565b604051908082528060200260200182016040528015620003ae578160200160208202803683370190505b50905060005b8361ffff168110156200045f57858181518110620003d657620003d662000e2b565b6020026020010151838281518110620003f357620003f362000e2b565b602002602001019063ffffffff16908163ffffffff168152505084818151811062000422576200042262000e2b565b60200260200101518282815181106200043f576200043f62000e2b565b602090810291909101015280620004568162000e41565b915050620003b4565b506000806200046d62000575565b9150915081848661ffff16815181106200048b576200048b62000e2b565b602002602001019063ffffffff16908163ffffffff168152505080838661ffff1681518110620004bf57620004bf62000e2b565b602002602001018181525050620004e884846004620007b460201b62000e15179092919060201c565b6003805461ffff948516620100000263ffff0000199486166401000000000265ffff0000ffff199092169590931694909417939093179190911617905550505050505050565b8063ffffffff81168114620005705760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b604482015260640162000185565b919050565b600080600060a0516001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b158015620005b657600080fd5b505afa158015620005cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f1919062000e5f565b905065048c273950008111156200064b5760405162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c79206869676800000000604482015260640162000185565b600060a0516001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200068957600080fd5b505afa1580156200069e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c4919062000e5f565b620006d0904362000e79565b90506000620006f46040518060200160405280858152508362000a3560201b60201c565b9050600060a0516001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200073457600080fd5b505afa15801562000749573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076f919062000e5f565b905060006200078083838062000a6e565b9050620007976200025560201b62000e051760201c565b620007a782633b9aca0062000e93565b9650965050505050509091565b600080600061ffff855110620007f65760405162461bcd60e51b815260040162000185906020808252600490820152631350561560e21b604082015260600190565b8451845161ffff821614620008435760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b604482015260640162000185565b60008161ffff16116200087e5760405162461bcd60e51b81526020600482015260026024820152610c1560f21b604482015260640162000185565b6000805b8261ffff168161ffff16101562000a1457878161ffff1681518110620008ac57620008ac62000e2b565b602002602001015163ffffffff168263ffffffff1610620009025760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b604482015260640162000185565b62000954888261ffff16815181106200091f576200091f62000e2b565b6020026020010151888361ffff168151811062000940576200094062000e2b565b602002602001015162000a9e60201b60201c565b898261ffff1661ffff81106200096e576200096e62000e2b565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516640100000000027fff0000000000000000000000000000000000000000000000000000000000000090921663ffffffff9094169390931717929092161790558751889061ffff8316908110620009f457620009f462000e2b565b60200260200101519150808062000a0b9062000eb5565b91505062000882565b50818062000a2460018262000eda565b945094509450505093509350939050565b604080516020810190915260008152604051806020016040528062000a6585600001518562000b2d60201b60201c565b90529392505050565b60008062000a7d858562000a35565b905062000a9562000a8e8262000b42565b8462000b62565b95945050505050565b60408051606081018252600080825260208201819052918101919091526001600160d81b0382111562000afd5760405162461bcd60e51b815260040162000185906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff9390931683526001600160d81b0391909116602083015260019082015290565b600062000b3b828462000e93565b9392505050565b805160009062000b5c90670de0b6b3a76400009062000ddf565b92915050565b600062000b3b828462000f00565b6001600160a01b038116811462000b8657600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000bca5762000bca62000b89565b604052919050565b60006001600160401b0382111562000bee5762000bee62000b89565b5060051b60200190565b600082601f83011262000c0a57600080fd5b8151602062000c2362000c1d8362000bd2565b62000b9f565b82815260059290921b8401810191818101908684111562000c4357600080fd5b8286015b8481101562000c7457805163ffffffff8116811462000c665760008081fd5b835291830191830162000c47565b509695505050505050565b600082601f83011262000c9157600080fd5b8151602062000ca462000c1d8362000bd2565b82815260059290921b8401810191818101908684111562000cc457600080fd5b8286015b8481101562000c74578051835291830191830162000cc8565b60008060008060008060c0878903121562000cfb57600080fd5b865162000d088162000b70565b6020880151909650801515811462000d1f57600080fd5b604088015190955062000d328162000b70565b606088015190945060ff8116811462000d4a57600080fd5b60808801519093506001600160401b038082111562000d6857600080fd5b62000d768a838b0162000bf8565b935060a089015191508082111562000d8d57600080fd5b5062000d9c89828a0162000c7f565b9150509295509295509295565b60006020828403121562000dbc57600080fd5b815162000b3b8162000b70565b634e487b7160e01b600052601160045260246000fd5b60008262000dfd57634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff80831681851680830382111562000e225762000e2262000dc9565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000e585762000e5862000dc9565b5060010190565b60006020828403121562000e7257600080fd5b5051919050565b60008282101562000e8e5762000e8e62000dc9565b500390565b600081600019048311821515161562000eb05762000eb062000dc9565b500290565b600061ffff8083168181141562000ed05762000ed062000dc9565b6001019392505050565b600061ffff8381169083168181101562000ef85762000ef862000dc9565b039392505050565b6000821982111562000f165762000f1662000dc9565b500190565b60805160a05160c051612e1f62000f6060003960006102d201526000818161044d015281816106e2015281816107d2015261088d015260006103340152612e1f6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637cf2cc9f116100f9578063c7db359b11610097578063f2fde38b11610071578063f2fde38b14610477578063f739670c1461048a578063f90ce5ba1461049d578063fe115fbe146104b557600080fd5b8063c7db359b14610400578063ccf3eb9f14610448578063efdf5d8b1461046f57600080fd5b806391aa375d116100d357806391aa375d146103a057806393556dbd146103cb578063bdb05092146103de578063c330c98d146103f157600080fd5b80637cf2cc9f1461037e5780638a6b8c5d146103875780638da5cb5b1461038f57600080fd5b8063313ce5671161016657806354124c641161014057806354124c641461031c5780636f307dc31461032f578063715018a61461036e5780637aa4db131461037657600080fd5b8063313ce567146102cd57806332148f67146102f4578063414535281461030957600080fd5b806322ff6568116101a257806322ff65681461022d57806324b18b1714610247578063252c09d71461027b57806325f258dd146102ba57600080fd5b80631195082e146101c9578063163e9c4f1461020757806317221ef11461021a575b600080fd5b6101f46101d7366004612b52565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101f4610215366004612b85565b6104bd565b6101f4610228366004612b85565b6104cf565b610235600681565b60405160ff90911681526020016101fe565b6201000554620100065461025f9163ffffffff169082565b6040805163ffffffff90931683526020830191909152016101fe565b61028e610289366004612b85565b6104db565b6040805163ffffffff90941684526001600160d81b0390921660208401521515908201526060016101fe565b6101f46102c8366004612b9e565b610515565b6102357f000000000000000000000000000000000000000000000000000000000000000081565b610307610302366004612bc0565b61058b565b005b6101f4610317366004612b9e565b610611565b6101f461032a366004612be4565b610625565b6103567f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101fe565b61030761067a565b61030761068e565b6101f460025481565b61025f6106db565b6000546001600160a01b0316610356565b6201000654620100055463ffffffff165b6040805192835263ffffffff9091166020830152016101fe565b6101f46103d9366004612b9e565b610950565b6103076103ec366004612b85565b6109e0565b6101f4670de0b6b3a764000081565b6003546104239061ffff80821691620100008104821691600160201b9091041683565b6040805161ffff948516815292841660208401529216918101919091526060016101fe565b6103567f000000000000000000000000000000000000000000000000000000000000000081565b6101f4610a2d565b610307610485366004612c10565b610ab5565b6101f4610498366004612b9e565b610b2b565b6201000354620100045461025f9163ffffffff169082565b6103b1610c35565b60006104c98242610b2b565b92915050565b60006104c98242610950565b60048161ffff81106104ec57600080fd5b015463ffffffff81169150600160201b81046001600160d81b031690600160f81b900460ff1683565b6000806105228484611058565b90925090508015610584576000610542670de0b6b3a76400008604611196565b90506000610559670de0b6b3a76400008604611196565b63ffffffff928316600090815260016020908152604080832095909316825293909352909120839055505b5092915050565b600354600160201b900461ffff1660006105a7600483856111db565b6003805461ffff808416600160201b810265ffff00000000199093169290921790925591925083161461060c5760405161ffff821681527f8a96a9c4bca0fb28be0fc5c84e95aff121a64e2533021e9d638bdc1f03b14ece9060200160405180910390a15b505050565b600061061d8383611058565b509392505050565b600080610631836112d0565b90506000610647670de0b6b3a764000086612c4f565b9050600061065582846112e7565b9050600061066282611326565b905061066e8882611350565b98975050505050505050565b61068261135e565b61068c60006113b8565b565b6003546106b39061ffff80821691620100008104821691600160201b90910416611408565b6003805463ffffffff19166201000061ffff9384160261ffff19161792909116919091179055565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190612c67565b905065048c273950008111156107ce5760405162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c7920686967680000000060448201526064015b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082957600080fd5b505afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190612c67565b61086b9043612c80565b90506000610887604051806020016040528085815250836115ab565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e457600080fd5b505afa1580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c9190612c67565b9050600061092b8383846115dc565b9050610935610e05565b61094382633b9aca00612c97565b9650965050505050509091565b6000818311156109955760405162461bcd60e51b815260206004820152601060248201526f4d69736f72646572656420646174657360801b60448201526064016107c5565b60006109a18484610b2b565b905060006109af8585612c80565b905060006109bc82611606565b905060006109c9826112d0565b90506109d58482611653565b979650505050505050565b6109e861135e565b8060025414610a2a5760028190556040518181527f88bd1242a1ad7dbba4967e0120324f17c382e4e3006e01dc3ffc0bf43e4b2a399060200160405180910390a15b50565b6000806000610a3a6106db565b91509150610a46610e05565b63ffffffff168263ffffffff1610610a5e5792915050565b600080610a69610c35565b915091508063ffffffff168285610a7e610e05565b610a889190612cb6565b63ffffffff16610a989190612c97565b610aa29190612cf1565b610aac9084612c4f565b94505050505090565b610abd61135e565b6001600160a01b038116610b225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c5565b610a2a816113b8565b600081831115610b695760405162461bcd60e51b815260206004820152600960248201526866726f6d203e20746f60b81b60448201526064016107c5565b81831415610b79575060006104c9565b6000610b83610e05565b90506000610b9085611196565b90506000610b9d85611196565b600354909150600090610bc1908590859061ffff80821691620100009004166116af565b600354909150600090610be5908690859061ffff80821691620100009004166116af565b905081811115610c27576000610c19676765c793fa10079d601b1b610c0a8486611910565b610c149190612c80565b61191e565b96506104c995505050505050565b6000955050505050506104c9565b600354600090819061ffff16816001821015610c6957600354610c649060019062010000900461ffff16612d05565b610c7c565b600354610c7c9060019061ffff16612d05565b60035490915060026201000090910461ffff1610801590610cbd575060048161ffff1661ffff8110610cb057610cb0612d20565b0154600160f81b900460ff165b8015610d1a575060048261ffff1661ffff8110610cdc57610cdc612d20565b0154600160201b90046001600160d81b0316600461ffff838116908110610d0557610d05612d20565b0154600160201b90046001600160d81b031611155b610d4c5760405162461bcd60e51b815260206004820152600360248201526204e45560ec1b60448201526064016107c5565b60048161ffff1661ffff8110610d6457610d64612d20565b0154600160201b90046001600160d81b0316600461ffff848116908110610d8d57610d8d612d20565b0154610da99190600160201b90046001600160d81b0316612d36565b6001600160d81b0316935060048161ffff1661ffff8110610dcc57610dcc612d20565b015463ffffffff16600461ffff808516908110610deb57610deb612d20565b0154610dfd919063ffffffff16612cb6565b925050509091565b6000610e1042611196565b905090565b600080600061ffff855110610e555760405162461bcd60e51b81526004016107c5906020808252600490820152631350561560e21b604082015260600190565b8451845161ffff821614610ea05760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b60448201526064016107c5565b60008161ffff1611610ed95760405162461bcd60e51b81526020600482015260026024820152610c1560f21b60448201526064016107c5565b6000805b8261ffff168161ffff16101561103957878161ffff1681518110610f0357610f03612d20565b602002602001015163ffffffff168263ffffffff1610610f575760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b60448201526064016107c5565b610f9b888261ffff1681518110610f7057610f70612d20565b6020026020010151888361ffff1681518110610f8e57610f8e612d20565b60200260200101516119aa565b898261ffff1661ffff8110610fb257610fb2612d20565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff9094169390931717929092161790558751889061ffff831690811061101c5761101c612d20565b60200260200101519150808061103190612d56565b915050610edd565b508180611047600182612d05565b945094509450505093509350939050565b6000808061106f670de0b6b3a76400008604611196565b90506000611086670de0b6b3a76400008604611196565b905060008263ffffffff161180156110a4575060008163ffffffff16115b6110d85760405162461bcd60e51b8152602060048201526005602482015264554e49545360d81b60448201526064016107c5565b63ffffffff8083166000908152600160209081526040808320938516835292905220541561112e5763ffffffff80831660009081526001602090815260408083209385168352929052908120549450925061118d565b8063ffffffff1661113d610e05565b63ffffffff16106111695761115e8263ffffffff168263ffffffff16610b2b565b93506001925061118d565b6111868263ffffffff1661117b610e05565b63ffffffff16610b2b565b9350600092505b50509250929050565b8063ffffffff811681146111d65760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b60448201526064016107c5565b919050565b6000808361ffff16116112145760405162461bcd60e51b81526020600482015260016024820152604960f81b60448201526064016107c5565b61ffff8261ffff16106112585760405162461bcd60e51b815260206004820152600c60248201526b189d5999995c881b1a5b5a5d60a21b60448201526064016107c5565b8261ffff168261ffff161161126e5750816112c9565b825b8261ffff168161ffff1610156112c4576001858261ffff1661ffff811061129957611299612d20565b01805463ffffffff191663ffffffff92909216919091179055806112bc81612d56565b915050611270565b508190505b9392505050565b60006104c9826a1a1601fc4ea7109e000000611a37565b60008261130c5781156112fb576000611305565b670de0b6b3a76400005b90506104c9565b6112c961132161131b85611a4c565b84611afc565b611b08565b600080611346670de0b6b3a7640000676765c793fa10079d601b1b612cf1565b6112c99084612c97565b60006112c983836001611b4e565b6000546001600160a01b0316331461068c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060048661ffff1661ffff811061142557611425612d20565b60408051606081018252929091015463ffffffff811683526001600160d81b03600160201b820416602084015260ff600160f81b9091041615159082015290506000806114706106db565b600254855192945090925061148a9163ffffffff16612c4f565b8263ffffffff1610156114a5578787945094505050506115a3565b7f5aec68e6980e788266f2f59f6fddb85f3e256ce6da46fdfab920b9b06aaa73756114ce611c01565b6040805191825230602083015261ffff8b81168383015263ffffffff86166060840152608083018590528a811660a0840152891660c0830152519081900360e00190a162010004546115209043612c80565b6201000655620100035463ffffffff16611538610e05565b6115429190612cb6565b62010005805463ffffffff191663ffffffff9290921691909117905543620100045561156c610e05565b62010003805463ffffffff191663ffffffff92831617905561159b906004908a90859085908c908c90611c0c16565b945094505050505b935093915050565b60408051602081019091526000815260405180602001604052806115d3856000015185611d54565b90529392505050565b6000806115e985856115ab565b90506115fd6115f782611d60565b84611d78565b95945050505050565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2182111561164557604051633492ffd960e01b8152600481018390526024016107c5565b50670de0b6b3a76400000290565b600082611662575060006104c9565b60006116776116716001611606565b84611a37565b90506000611699856116896001611606565b6116939190612c4f565b836112e7565b90506116a56001611606565b6115fd9082612c80565b60008363ffffffff168563ffffffff1610156116de57604051632ff198e560e21b815260040160405180910390fd5b8363ffffffff168563ffffffff16141561179b57604080516060810182526000808252602082018190529181019190915260048461ffff1661ffff811061172757611727612d20565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff16151593830193909352909250908716146117845761177d610a2d565b9150611795565b80602001516001600160d81b031691505b50611908565b60006117a5610a2d565b90506000806117b96004888a868a8a611d84565b91509150816000015163ffffffff168763ffffffff1614156117ea5781602001516001600160d81b03169350611904565b805163ffffffff888116911614156118115780602001516001600160d81b03169350611904565b600082602001516001600160d81b031682602001516001600160d81b03161115611880576000676765c793fa10079d601b1b61186784602001516001600160d81b031686602001516001600160d81b0316611910565b6118719190612c80565b905061187c8161191e565b9150505b825182516000916118b391670de0b6b3a76400009161189e91612cb6565b63ffffffff166118ae9190612c97565b6112d0565b905060006118c18383611653565b90506118fe85602001516001600160d81b031682670de0b6b3a764000088600001518e6118ee9190612cb6565b63ffffffff1661032a9190612c97565b96505050505b5050505b949350505050565b60006112c983836001611f60565b60008061193e670de0b6b3a7640000676765c793fa10079d601b1b612cf1565b6119489084612cf1565b90506002611969670de0b6b3a7640000676765c793fa10079d601b1b612cf1565b6119739190612cf1565b611990670de0b6b3a7640000676765c793fa10079d601b1b612cf1565b61199a9085612d78565b106104c9576112c9600182612c4f565b60408051606081018252600080825260208201819052918101919091526001600160d81b03821115611a075760405162461bcd60e51b81526004016107c5906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff9390931683526001600160d81b0391909116602083015260019082015290565b60006112c983670de0b6b3a764000084611ffb565b6000670de0b6b3a7640000821015611a7a57604051633621413760e21b8152600481018390526024016107c5565b6000611a8f670de0b6b3a764000084046120c9565b670de0b6b3a7640000808202935090915083821c90811415611ab2575050919050565b6706f05b59d3b200005b8015611af457670de0b6b3a7640000828002049150671bc16d674ec800008210611aec579283019260019190911c905b60011c611abc565b505050919050565b60006112c983836121ac565b6000680a688906bd8b0000008210611b3657604051634a4f26f160e01b8152600481018390526024016107c5565b670de0b6b3a7640000604083901b046112c98161226e565b6000831580611b5b575082155b15611b68575060006112c9565b6001826001811115611b7c57611b7c612d8c565b14611b8f57670de0b6b3a7640000611b9c565b676765c793fa10079d601b1b5b6001836001811115611bb057611bb0612d8c565b14611bcd57611bc86002670de0b6b3a7640000612cf1565b611be3565b611be36002676765c793fa10079d601b1b612cf1565b611bed8587612c97565b611bf79190612c4f565b6119089190612cf1565b6000610e1042611606565b6000806000888861ffff1661ffff8110611c2857611c28612d20565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff161515938301939093529092509088161415611c835787859250925050611d49565b8461ffff168461ffff16118015611cab5750611ca0600186612d05565b61ffff168861ffff16145b15611cb857839150611cbc565b8491505b81611cc8896001612da2565b611cd29190612dc8565b9250611cde87876119aa565b898461ffff1661ffff8110611cf557611cf5612d20565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff909416939093171792909216179055505b965096945050505050565b60006112c98284612c97565b80516000906104c990670de0b6b3a764000090612cf1565b60006112c98284612c4f565b60408051606081018252600080825260208201819052918101919091526040805160608101825260008082526020820181905291810191909152878461ffff1661ffff8110611dd557611dd5612d20565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff1615159383019390935290935090881610611e54578663ffffffff16826000015163ffffffff161415611e4057611d49565b81611e4b87876119aa565b91509150611d49565b8783611e61866001612da2565b611e6b9190612dc8565b61ffff1661ffff8110611e8057611e80612d20565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181018290529250611f055760408051606081018252895463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181019190915291505b815163ffffffff80891691161115611f455760405162461bcd60e51b815260206004820152600360248201526213d31160ea1b60448201526064016107c5565b611f5188888686612969565b91509150965096945050505050565b600082611f985760405162461bcd60e51b81526004016107c5906020808252600490820152630444956360e41b604082015260600190565b6000611fa5600285612cf1565b905083816001856001811115611fbd57611fbd612d8c565b14611fd057670de0b6b3a7640000611fdd565b676765c793fa10079d601b1b5b611fe79088612c97565b611ff19190612c4f565b6115fd9190612cf1565b6000808060001985870985870292508281108382030391505080600014156120365783828161202c5761202c612cdb565b04925050506112c9565b83811061206057604051631dcf306360e21b815260048101829052602481018590526044016107c5565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000600160801b82106120e957608091821c916120e69082612c4f565b90505b68010000000000000000821061210c57604091821c916121099082612c4f565b90505b600160201b821061212a57602091821c916121279082612c4f565b90505b62010000821061214757601091821c916121449082612c4f565b90505b610100821061216357600891821c916121609082612c4f565b90505b6010821061217e57600491821c9161217b9082612c4f565b90505b6004821061219957600291821c916121969082612c4f565b90505b600282106111d6576104c9600182612c4f565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106121f05760405163698d9a0160e11b8152600481018290526024016107c5565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff81118261222a5780670de0b6b3a76400008504019450505050506104c9565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6780000000000000008216156122925768016a09e667f3bcc9090260401c5b6740000000000000008216156122b1576801306fe0a31b7152df0260401c5b6720000000000000008216156122d0576801172b83c7d517adce0260401c5b6710000000000000008216156122ef5768010b5586cf9890f62a0260401c5b67080000000000000082161561230e576801059b0d31585743ae0260401c5b67040000000000000082161561232d57680102c9a3e778060ee70260401c5b67020000000000000082161561234c5768010163da9fb33356d80260401c5b67010000000000000082161561236b57680100b1afa5abcbed610260401c5b66800000000000008216156123895768010058c86da1c09ea20260401c5b66400000000000008216156123a7576801002c605e2e8cec500260401c5b66200000000000008216156123c557680100162f3904051fa10260401c5b66100000000000008216156123e3576801000b175effdc76ba0260401c5b660800000000000082161561240157680100058ba01fb9f96d0260401c5b660400000000000082161561241f5768010002c5cc37da94920260401c5b660200000000000082161561243d576801000162e525ee05470260401c5b660100000000000082161561245b5768010000b17255775c040260401c5b65800000000000821615612478576801000058b91b5bc9ae0260401c5b6540000000000082161561249557680100002c5c89d5ec6d0260401c5b652000000000008216156124b25768010000162e43f4f8310260401c5b651000000000008216156124cf57680100000b1721bcfc9a0260401c5b650800000000008216156124ec5768010000058b90cf1e6e0260401c5b65040000000000821615612509576801000002c5c863b73f0260401c5b6502000000000082161561252657680100000162e430e5a20260401c5b65010000000000821615612543576801000000b1721835510260401c5b64800000000082161561255f57680100000058b90c0b490260401c5b64400000000082161561257b5768010000002c5c8601cc0260401c5b642000000000821615612597576801000000162e42fff00260401c5b6410000000008216156125b35768010000000b17217fbb0260401c5b6408000000008216156125cf576801000000058b90bfce0260401c5b6404000000008216156125eb57680100000002c5c85fe30260401c5b6402000000008216156126075768010000000162e42ff10260401c5b600160201b82161561262257680100000000b17217f80260401c5b638000000082161561263d5768010000000058b90bfc0260401c5b6340000000821615612658576801000000002c5c85fe0260401c5b632000000082161561267357680100000000162e42ff0260401c5b631000000082161561268e576801000000000b17217f0260401c5b63080000008216156126a957680100000000058b90c00260401c5b63040000008216156126c45768010000000002c5c8600260401c5b63020000008216156126df576801000000000162e4300260401c5b63010000008216156126fa5768010000000000b172180260401c5b62800000821615612714576801000000000058b90c0260401c5b6240000082161561272e57680100000000002c5c860260401c5b622000008216156127485768010000000000162e430260401c5b6210000082161561276257680100000000000b17210260401c5b6208000082161561277c5768010000000000058b910260401c5b62040000821615612796576801000000000002c5c80260401c5b620200008216156127b057680100000000000162e40260401c5b620100008216156127ca576801000000000000b1720260401c5b6180008216156127e357680100000000000058b90260401c5b6140008216156127fc5768010000000000002c5d0260401c5b612000821615612815576801000000000000162e0260401c5b61100082161561282e5768010000000000000b170260401c5b610800821615612847576801000000000000058c0260401c5b61040082161561286057680100000000000002c60260401c5b61020082161561287957680100000000000001630260401c5b61010082161561289257680100000000000000b10260401c5b60808216156128aa57680100000000000000590260401c5b60408216156128c2576801000000000000002c0260401c5b60208216156128da57680100000000000000160260401c5b60108216156128f2576801000000000000000b0260401c5b600882161561290a57680100000000000000060260401c5b600482161561292257680100000000000000030260401c5b600282161561293a57680100000000000000010260401c5b600182161561295257680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6040805160608082018352600080835260208084018290528385018290528451928301855281835282018190529281018390529091836129aa866001612da2565b6129b49190612dc8565b61ffff169050600060018561ffff16836129ce9190612c4f565b6129d89190612c80565b905060005b60016129e98385612c4f565b901c9050886129fc61ffff881683612d78565b61ffff8110612a0d57612a0d612d20565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181018290529550612a6457612a5d816001612c4f565b92506129dd565b8861ffff8716612a75836001612c4f565b612a7f9190612d78565b61ffff8110612a9057612a90612d20565b60408051606081018252919092015463ffffffff8082168352600160201b82046001600160d81b03166020840152600160f81b90910460ff1615159282019290925286519095508982169116118015908190612afc5750846000015163ffffffff168963ffffffff1611155b15612b075750612b32565b80612b1e57612b17600183612c80565b9250612b2c565b612b29826001612c4f565b93505b506129dd565b50505094509492505050565b803563ffffffff811681146111d657600080fd5b60008060408385031215612b6557600080fd5b612b6e83612b3e565b9150612b7c60208401612b3e565b90509250929050565b600060208284031215612b9757600080fd5b5035919050565b60008060408385031215612bb157600080fd5b50508035926020909101359150565b600060208284031215612bd257600080fd5b813561ffff811681146112c957600080fd5b600080600060608486031215612bf957600080fd5b505081359360208301359350604090920135919050565b600060208284031215612c2257600080fd5b81356001600160a01b03811681146112c957600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612c6257612c62612c39565b500190565b600060208284031215612c7957600080fd5b5051919050565b600082821015612c9257612c92612c39565b500390565b6000816000190483118215151615612cb157612cb1612c39565b500290565b600063ffffffff83811690831681811015612cd357612cd3612c39565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600082612d0057612d00612cdb565b500490565b600061ffff83811690831681811015612cd357612cd3612c39565b634e487b7160e01b600052603260045260246000fd5b60006001600160d81b0383811690831681811015612cd357612cd3612c39565b600061ffff80831681811415612d6e57612d6e612c39565b6001019392505050565b600082612d8757612d87612cdb565b500690565b634e487b7160e01b600052602160045260246000fd5b600061ffff808316818516808303821115612dbf57612dbf612c39565b01949350505050565b600061ffff80841680612ddd57612ddd612cdb565b9216919091069291505056fea26469706673582212202e027592dd16b99d0b8452605d15e13bf20db23299b07c2efb8598a964902bed64736f6c63430008090033" . parse () . expect ("invalid bytecode")
    });
    pub struct CompoundBorrowRateOracle<M>(ethers::contract::Contract<M>);
    impl<M> Clone for CompoundBorrowRateOracle<M> {
        fn clone(&self) -> Self {
            CompoundBorrowRateOracle(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for CompoundBorrowRateOracle<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CompoundBorrowRateOracle<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CompoundBorrowRateOracle))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> CompoundBorrowRateOracle<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                COMPOUNDBORROWRATEORACLE_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                COMPOUNDBORROWRATEORACLE_ABI.clone(),
                COMPOUNDBORROWRATEORACLE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `ONE_IN_WAD` (0xc330c98d) function"]
        pub fn one_in_wad(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([195, 48, 201, 141], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` (0x22ff6568) function"]
        pub fn underlying_yield_bearing_protocol_id(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([34, 255, 101, 104], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `ctoken` (0xccf3eb9f) function"]
        pub fn ctoken(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([204, 243, 235, 159], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `currentBlockSlope` (0x24b18b17) function"]
        pub fn current_block_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([36, 177, 139, 23], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decimals` (0x313ce567) function"]
        pub fn decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([49, 60, 229, 103], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getApyFrom` (0x17221ef1) function"]
        pub fn get_apy_from(
            &self,
            from: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([23, 34, 30, 241], from)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getApyFromTo` (0x93556dbd) function"]
        pub fn get_apy_from_to(
            &self,
            from: ethers::core::types::U256,
            to: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([147, 85, 109, 189], (from, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getBlockSlope` (0x91aa375d) function"]
        pub fn get_block_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, u32)> {
            self.0
                .method_hash([145, 170, 55, 93], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCurrentRateInRay` (0xefdf5d8b) function"]
        pub fn get_current_rate_in_ray(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([239, 223, 93, 139], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLastRateSlope` (0xfe115fbe) function"]
        pub fn get_last_rate_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, u32)> {
            self.0
                .method_hash([254, 17, 95, 190], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLastUpdatedRate` (0x8a6b8c5d) function"]
        pub fn get_last_updated_rate(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([138, 107, 140, 93], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getRateFrom` (0x163e9c4f) function"]
        pub fn get_rate_from(
            &self,
            from: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([22, 62, 156, 79], from)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getRateFromTo` (0xf739670c) function"]
        pub fn get_rate_from_to(
            &self,
            from: ethers::core::types::U256,
            to: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([247, 57, 103, 12], (from, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `increaseObservationCardinalityNext` (0x32148f67) function"]
        pub fn increase_observation_cardinality_next(
            &self,
            rate_cardinality_next: u16,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([50, 20, 143, 103], rate_cardinality_next)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `interpolateRateValue` (0x54124c64) function"]
        pub fn interpolate_rate_value(
            &self,
            before_or_at_rate_value_ray: ethers::core::types::U256,
            apy_from_before_or_at_to_at_or_after_wad: ethers::core::types::U256,
            time_delta_before_or_at_to_queried_time_wad: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [84, 18, 76, 100],
                    (
                        before_or_at_rate_value_ray,
                        apy_from_before_or_at_to_at_or_after_wad,
                        time_delta_before_or_at_to_queried_time_wad,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lastUpdatedBlock` (0xf90ce5ba) function"]
        pub fn last_updated_block(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([249, 12, 229, 186], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `minSecondsSinceLastUpdate` (0x7cf2cc9f) function"]
        pub fn min_seconds_since_last_update(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([124, 242, 204, 159], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `observations` (0x252c09d7) function"]
        pub fn observations(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256, bool)>
        {
            self.0
                .method_hash([37, 44, 9, 215], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `oracleVars` (0xc7db359b) function"]
        pub fn oracle_vars(&self) -> ethers::contract::builders::ContractCall<M, (u16, u16, u16)> {
            self.0
                .method_hash([199, 219, 53, 155], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `owner` (0x8da5cb5b) function"]
        pub fn owner(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `renounceOwnership` (0x715018a6) function"]
        pub fn renounce_ownership(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setMinSecondsSinceLastUpdate` (0xbdb05092) function"]
        pub fn set_min_seconds_since_last_update(
            &self,
            min_seconds_since_last_update: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([189, 176, 80, 146], min_seconds_since_last_update)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `settlementRateCache` (0x1195082e) function"]
        pub fn settlement_rate_cache(
            &self,
            p0: u32,
            p1: u32,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([17, 149, 8, 46], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnership` (0xf2fde38b) function"]
        pub fn transfer_ownership(
            &self,
            new_owner: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `underlying` (0x6f307dc3) function"]
        pub fn underlying(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([111, 48, 125, 195], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `variableFactor` (0x25f258dd) function"]
        pub fn variable_factor(
            &self,
            term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
            term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [37, 242, 88, 221],
                    (
                        term_start_timestamp_in_wei_seconds,
                        term_end_timestamp_in_wei_seconds,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `variableFactorNoCache` (0x41453528) function"]
        pub fn variable_factor_no_cache(
            &self,
            term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
            term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [65, 69, 53, 40],
                    (
                        term_start_timestamp_in_wei_seconds,
                        term_end_timestamp_in_wei_seconds,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `writeOracleEntry` (0x7aa4db13) function"]
        pub fn write_oracle_entry(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([122, 164, 219, 19], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MinSecondsSinceLastUpdate` event"]
        pub fn min_seconds_since_last_update_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MinSecondsSinceLastUpdateFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OracleBufferUpdate` event"]
        pub fn oracle_buffer_update_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OracleBufferUpdateFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OwnershipTransferred` event"]
        pub fn ownership_transferred_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `RateCardinalityNext` event"]
        pub fn rate_cardinality_next_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, RateCardinalityNextFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(
            &self,
        ) -> ethers::contract::builders::Event<M, CompoundBorrowRateOracleEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for CompoundBorrowRateOracle<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedIncomeReturnedZero` with signature `AavePoolGetReserveNormalizedIncomeReturnedZero()` and selector `[189, 137, 197, 175]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedIncomeReturnedZero",
        abi = "AavePoolGetReserveNormalizedIncomeReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedIncomeReturnedZero;
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedVariableDebtReturnedZero` with signature `AavePoolGetReserveNormalizedVariableDebtReturnedZero()` and selector `[195, 75, 105, 61]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedVariableDebtReturnedZero",
        abi = "AavePoolGetReserveNormalizedVariableDebtReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedVariableDebtReturnedZero;
    #[doc = "Custom Error type `CTokenExchangeRateReturnedZero` with signature `CTokenExchangeRateReturnedZero()` and selector `[36, 152, 138, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CTokenExchangeRateReturnedZero",
        abi = "CTokenExchangeRateReturnedZero()"
    )]
    pub struct CTokenExchangeRateReturnedZero;
    #[doc = "Custom Error type `CanOnlyTradeIfUnlocked` with signature `CanOnlyTradeIfUnlocked(bool)` and selector `[121, 143, 4, 94]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CanOnlyTradeIfUnlocked", abi = "CanOnlyTradeIfUnlocked(bool)")]
    pub struct CanOnlyTradeIfUnlocked {
        pub unlocked: bool,
    }
    #[doc = "Custom Error type `CannotLiquidate` with signature `CannotLiquidate()` and selector `[191, 135, 199, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CannotLiquidate", abi = "CannotLiquidate()")]
    pub struct CannotLiquidate;
    #[doc = "Custom Error type `CannotSettleBeforeMaturity` with signature `CannotSettleBeforeMaturity()` and selector `[2, 230, 23, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CannotSettleBeforeMaturity",
        abi = "CannotSettleBeforeMaturity()"
    )]
    pub struct CannotSettleBeforeMaturity;
    #[doc = "Custom Error type `DebugError` with signature `DebugError(uint256,uint256)` and selector `[186, 113, 84, 234]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "DebugError", abi = "DebugError(uint256,uint256)")]
    pub struct DebugError {
        pub x: ethers::core::types::U256,
        pub y: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `ExpectedOppositeSigns` with signature `ExpectedOppositeSigns(int256,int256)` and selector `[35, 133, 254, 176]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedOppositeSigns",
        abi = "ExpectedOppositeSigns(int256,int256)"
    )]
    pub struct ExpectedOppositeSigns {
        pub amount_0: I256,
        pub amount_1: I256,
    }
    #[doc = "Custom Error type `ExpectedSqrtPriceZeroBeforeInit` with signature `ExpectedSqrtPriceZeroBeforeInit(uint160)` and selector `[162, 248, 112, 60]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedSqrtPriceZeroBeforeInit",
        abi = "ExpectedSqrtPriceZeroBeforeInit(uint160)"
    )]
    pub struct ExpectedSqrtPriceZeroBeforeInit {
        pub sqrt_price_x96: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `IRSNotionalAmountSpecifiedMustBeNonZero` with signature `IRSNotionalAmountSpecifiedMustBeNonZero()` and selector `[63, 82, 15, 170]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "IRSNotionalAmountSpecifiedMustBeNonZero",
        abi = "IRSNotionalAmountSpecifiedMustBeNonZero()"
    )]
    pub struct IRSNotionalAmountSpecifiedMustBeNonZero;
    #[doc = "Custom Error type `InvalidMarginDelta` with signature `InvalidMarginDelta()` and selector `[138, 204, 109, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "InvalidMarginDelta", abi = "InvalidMarginDelta()")]
    pub struct InvalidMarginDelta;
    #[doc = "Custom Error type `LidoGetPooledEthBySharesReturnedZero` with signature `LidoGetPooledEthBySharesReturnedZero()` and selector `[255, 248, 220, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LidoGetPooledEthBySharesReturnedZero",
        abi = "LidoGetPooledEthBySharesReturnedZero()"
    )]
    pub struct LidoGetPooledEthBySharesReturnedZero;
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInBurn` with signature `LiquidityDeltaMustBePositiveInBurn(uint128)` and selector `[192, 157, 38, 9]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInBurn",
        abi = "LiquidityDeltaMustBePositiveInBurn(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInBurn {
        pub amount: u128,
    }
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInMint` with signature `LiquidityDeltaMustBePositiveInMint(uint128)` and selector `[216, 69, 154, 52]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInMint",
        abi = "LiquidityDeltaMustBePositiveInMint(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInMint {
        pub amount: u128,
    }
    #[doc = "Custom Error type `MarginLessThanMinimum` with signature `MarginLessThanMinimum(int256)` and selector `[107, 79, 255, 36]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "MarginLessThanMinimum", abi = "MarginLessThanMinimum(int256)")]
    pub struct MarginLessThanMinimum {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMet` with signature `MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)` and selector `[67, 242, 131, 33]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMet",
        abi = "MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)"
    )]
    pub struct MarginRequirementNotMet {
        pub margin_requirement: I256,
        pub tick: i32,
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMetFCM` with signature `MarginRequirementNotMetFCM(int256)` and selector `[65, 213, 168, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMetFCM",
        abi = "MarginRequirementNotMetFCM(int256)"
    )]
    pub struct MarginRequirementNotMetFCM {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `NotEnoughFunds` with signature `NotEnoughFunds(uint256,uint256)` and selector `[140, 144, 83, 104]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "NotEnoughFunds", abi = "NotEnoughFunds(uint256,uint256)")]
    pub struct NotEnoughFunds {
        pub requested: ethers::core::types::U256,
        pub available: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `OOO` with signature `OOO()` and selector `[191, 198, 99, 148]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OOO", abi = "OOO()")]
    pub struct OOO;
    #[doc = "Custom Error type `OnlyFCM` with signature `OnlyFCM()` and selector `[93, 138, 54, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyFCM", abi = "OnlyFCM()")]
    pub struct OnlyFCM;
    #[doc = "Custom Error type `OnlyMarginEngine` with signature `OnlyMarginEngine()` and selector `[40, 52, 210, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyMarginEngine", abi = "OnlyMarginEngine()")]
    pub struct OnlyMarginEngine;
    #[doc = "Custom Error type `OnlyOwnerCanUpdatePosition` with signature `OnlyOwnerCanUpdatePosition()` and selector `[125, 164, 92, 231]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "OnlyOwnerCanUpdatePosition",
        abi = "OnlyOwnerCanUpdatePosition()"
    )]
    pub struct OnlyOwnerCanUpdatePosition;
    #[doc = "Custom Error type `OnlyVAMM` with signature `OnlyVAMM()` and selector `[123, 216, 216, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyVAMM", abi = "OnlyVAMM()")]
    pub struct OnlyVAMM;
    #[doc = "Custom Error type `PRBMathUD60x18__Exp2InputTooBig` with signature `PRBMathUD60x18__Exp2InputTooBig(uint256)` and selector `[74, 79, 38, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__Exp2InputTooBig",
        abi = "PRBMathUD60x18__Exp2InputTooBig(uint256)"
    )]
    pub struct PRBMathUD60x18__Exp2InputTooBig {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMathUD60x18__FromUintOverflow` with signature `PRBMathUD60x18__FromUintOverflow(uint256)` and selector `[52, 146, 255, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__FromUintOverflow",
        abi = "PRBMathUD60x18__FromUintOverflow(uint256)"
    )]
    pub struct PRBMathUD60x18__FromUintOverflow {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMathUD60x18__LogInputTooSmall` with signature `PRBMathUD60x18__LogInputTooSmall(uint256)` and selector `[216, 133, 4, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__LogInputTooSmall",
        abi = "PRBMathUD60x18__LogInputTooSmall(uint256)"
    )]
    pub struct PRBMathUD60x18__LogInputTooSmall {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMath__MulDivFixedPointOverflow` with signature `PRBMath__MulDivFixedPointOverflow(uint256)` and selector `[211, 27, 52, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMath__MulDivFixedPointOverflow",
        abi = "PRBMath__MulDivFixedPointOverflow(uint256)"
    )]
    pub struct PRBMath__MulDivFixedPointOverflow {
        pub prod_1: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMath__MulDivOverflow` with signature `PRBMath__MulDivOverflow(uint256,uint256)` and selector `[119, 60, 193, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMath__MulDivOverflow",
        abi = "PRBMath__MulDivOverflow(uint256,uint256)"
    )]
    pub struct PRBMath__MulDivOverflow {
        pub prod_1: ethers::core::types::U256,
        pub denominator: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PositionNetZero` with signature `PositionNetZero()` and selector `[89, 32, 46, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNetZero", abi = "PositionNetZero()")]
    pub struct PositionNetZero;
    #[doc = "Custom Error type `PositionNotSettled` with signature `PositionNotSettled()` and selector `[90, 108, 31, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNotSettled", abi = "PositionNotSettled()")]
    pub struct PositionNotSettled;
    #[doc = "Custom Error type `RocketPoolGetEthValueReturnedZero` with signature `RocketPoolGetEthValueReturnedZero()` and selector `[18, 70, 158, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "RocketPoolGetEthValueReturnedZero",
        abi = "RocketPoolGetEthValueReturnedZero()"
    )]
    pub struct RocketPoolGetEthValueReturnedZero;
    #[doc = "Custom Error type `WithdrawalExceedsCurrentMargin` with signature `WithdrawalExceedsCurrentMargin()` and selector `[41, 126, 28, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "WithdrawalExceedsCurrentMargin",
        abi = "WithdrawalExceedsCurrentMargin()"
    )]
    pub struct WithdrawalExceedsCurrentMargin;
    #[doc = "Custom Error type `closeToOrBeyondMaturity` with signature `closeToOrBeyondMaturity()` and selector `[83, 173, 234, 156]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "closeToOrBeyondMaturity", abi = "closeToOrBeyondMaturity()")]
    pub struct closeToOrBeyondMaturity;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundBorrowRateOracleErrors {
        AavePoolGetReserveNormalizedIncomeReturnedZero(
            AavePoolGetReserveNormalizedIncomeReturnedZero,
        ),
        AavePoolGetReserveNormalizedVariableDebtReturnedZero(
            AavePoolGetReserveNormalizedVariableDebtReturnedZero,
        ),
        CTokenExchangeRateReturnedZero(CTokenExchangeRateReturnedZero),
        CanOnlyTradeIfUnlocked(CanOnlyTradeIfUnlocked),
        CannotLiquidate(CannotLiquidate),
        CannotSettleBeforeMaturity(CannotSettleBeforeMaturity),
        DebugError(DebugError),
        ExpectedOppositeSigns(ExpectedOppositeSigns),
        ExpectedSqrtPriceZeroBeforeInit(ExpectedSqrtPriceZeroBeforeInit),
        IRSNotionalAmountSpecifiedMustBeNonZero(IRSNotionalAmountSpecifiedMustBeNonZero),
        InvalidMarginDelta(InvalidMarginDelta),
        LidoGetPooledEthBySharesReturnedZero(LidoGetPooledEthBySharesReturnedZero),
        LiquidityDeltaMustBePositiveInBurn(LiquidityDeltaMustBePositiveInBurn),
        LiquidityDeltaMustBePositiveInMint(LiquidityDeltaMustBePositiveInMint),
        MarginLessThanMinimum(MarginLessThanMinimum),
        MarginRequirementNotMet(MarginRequirementNotMet),
        MarginRequirementNotMetFCM(MarginRequirementNotMetFCM),
        NotEnoughFunds(NotEnoughFunds),
        OOO(OOO),
        OnlyFCM(OnlyFCM),
        OnlyMarginEngine(OnlyMarginEngine),
        OnlyOwnerCanUpdatePosition(OnlyOwnerCanUpdatePosition),
        OnlyVAMM(OnlyVAMM),
        PRBMathUD60x18__Exp2InputTooBig(PRBMathUD60x18__Exp2InputTooBig),
        PRBMathUD60x18__FromUintOverflow(PRBMathUD60x18__FromUintOverflow),
        PRBMathUD60x18__LogInputTooSmall(PRBMathUD60x18__LogInputTooSmall),
        PRBMath__MulDivFixedPointOverflow(PRBMath__MulDivFixedPointOverflow),
        PRBMath__MulDivOverflow(PRBMath__MulDivOverflow),
        PositionNetZero(PositionNetZero),
        PositionNotSettled(PositionNotSettled),
        RocketPoolGetEthValueReturnedZero(RocketPoolGetEthValueReturnedZero),
        WithdrawalExceedsCurrentMargin(WithdrawalExceedsCurrentMargin),
        closeToOrBeyondMaturity(closeToOrBeyondMaturity),
    }
    impl ethers::core::abi::AbiDecode for CompoundBorrowRateOracleErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok (decoded) = < AavePoolGetReserveNormalizedIncomeReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (CompoundBorrowRateOracleErrors :: AavePoolGetReserveNormalizedIncomeReturnedZero (decoded)) }
            if let Ok (decoded) = < AavePoolGetReserveNormalizedVariableDebtReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (CompoundBorrowRateOracleErrors :: AavePoolGetReserveNormalizedVariableDebtReturnedZero (decoded)) }
            if let Ok(decoded) =
                <CTokenExchangeRateReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundBorrowRateOracleErrors::CTokenExchangeRateReturnedZero(decoded));
            }
            if let Ok(decoded) =
                <CanOnlyTradeIfUnlocked as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::CanOnlyTradeIfUnlocked(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <CannotLiquidate as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::CannotLiquidate(decoded));
            }
            if let Ok(decoded) =
                <CannotSettleBeforeMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::CannotSettleBeforeMaturity(
                    decoded,
                ));
            }
            if let Ok(decoded) = <DebugError as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::DebugError(decoded));
            }
            if let Ok(decoded) =
                <ExpectedOppositeSigns as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::ExpectedOppositeSigns(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <ExpectedSqrtPriceZeroBeforeInit as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundBorrowRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(decoded));
            }
            if let Ok(decoded) =
                <IRSNotionalAmountSpecifiedMustBeNonZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) =
                <InvalidMarginDelta as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::InvalidMarginDelta(decoded));
            }
            if let Ok(decoded) =
                <LidoGetPooledEthBySharesReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(decoded),
                );
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInBurn as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(decoded),
                );
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInMint as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleErrors::LiquidityDeltaMustBePositiveInMint(decoded),
                );
            }
            if let Ok(decoded) =
                <MarginLessThanMinimum as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::MarginLessThanMinimum(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMet as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::MarginRequirementNotMet(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMetFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::MarginRequirementNotMetFCM(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <NotEnoughFunds as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::NotEnoughFunds(decoded));
            }
            if let Ok(decoded) = <OOO as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundBorrowRateOracleErrors::OOO(decoded));
            }
            if let Ok(decoded) = <OnlyFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundBorrowRateOracleErrors::OnlyFCM(decoded));
            }
            if let Ok(decoded) =
                <OnlyMarginEngine as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::OnlyMarginEngine(decoded));
            }
            if let Ok(decoded) =
                <OnlyOwnerCanUpdatePosition as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::OnlyOwnerCanUpdatePosition(
                    decoded,
                ));
            }
            if let Ok(decoded) = <OnlyVAMM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundBorrowRateOracleErrors::OnlyVAMM(decoded));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__Exp2InputTooBig as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundBorrowRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(decoded));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__FromUintOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleErrors::PRBMathUD60x18__FromUintOverflow(decoded),
                );
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__LogInputTooSmall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(decoded),
                );
            }
            if let Ok(decoded) =
                <PRBMath__MulDivFixedPointOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleErrors::PRBMath__MulDivFixedPointOverflow(decoded),
                );
            }
            if let Ok(decoded) =
                <PRBMath__MulDivOverflow as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::PRBMath__MulDivOverflow(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PositionNetZero as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::PositionNetZero(decoded));
            }
            if let Ok(decoded) =
                <PositionNotSettled as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::PositionNotSettled(decoded));
            }
            if let Ok(decoded) =
                <RocketPoolGetEthValueReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleErrors::RocketPoolGetEthValueReturnedZero(decoded),
                );
            }
            if let Ok(decoded) =
                <WithdrawalExceedsCurrentMargin as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundBorrowRateOracleErrors::WithdrawalExceedsCurrentMargin(decoded));
            }
            if let Ok(decoded) =
                <closeToOrBeyondMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleErrors::closeToOrBeyondMaturity(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CompoundBorrowRateOracleErrors {
        fn encode(self) -> Vec<u8> {
            match self { CompoundBorrowRateOracleErrors :: AavePoolGetReserveNormalizedIncomeReturnedZero (element) => element . encode () , CompoundBorrowRateOracleErrors :: AavePoolGetReserveNormalizedVariableDebtReturnedZero (element) => element . encode () , CompoundBorrowRateOracleErrors :: CTokenExchangeRateReturnedZero (element) => element . encode () , CompoundBorrowRateOracleErrors :: CanOnlyTradeIfUnlocked (element) => element . encode () , CompoundBorrowRateOracleErrors :: CannotLiquidate (element) => element . encode () , CompoundBorrowRateOracleErrors :: CannotSettleBeforeMaturity (element) => element . encode () , CompoundBorrowRateOracleErrors :: DebugError (element) => element . encode () , CompoundBorrowRateOracleErrors :: ExpectedOppositeSigns (element) => element . encode () , CompoundBorrowRateOracleErrors :: ExpectedSqrtPriceZeroBeforeInit (element) => element . encode () , CompoundBorrowRateOracleErrors :: IRSNotionalAmountSpecifiedMustBeNonZero (element) => element . encode () , CompoundBorrowRateOracleErrors :: InvalidMarginDelta (element) => element . encode () , CompoundBorrowRateOracleErrors :: LidoGetPooledEthBySharesReturnedZero (element) => element . encode () , CompoundBorrowRateOracleErrors :: LiquidityDeltaMustBePositiveInBurn (element) => element . encode () , CompoundBorrowRateOracleErrors :: LiquidityDeltaMustBePositiveInMint (element) => element . encode () , CompoundBorrowRateOracleErrors :: MarginLessThanMinimum (element) => element . encode () , CompoundBorrowRateOracleErrors :: MarginRequirementNotMet (element) => element . encode () , CompoundBorrowRateOracleErrors :: MarginRequirementNotMetFCM (element) => element . encode () , CompoundBorrowRateOracleErrors :: NotEnoughFunds (element) => element . encode () , CompoundBorrowRateOracleErrors :: OOO (element) => element . encode () , CompoundBorrowRateOracleErrors :: OnlyFCM (element) => element . encode () , CompoundBorrowRateOracleErrors :: OnlyMarginEngine (element) => element . encode () , CompoundBorrowRateOracleErrors :: OnlyOwnerCanUpdatePosition (element) => element . encode () , CompoundBorrowRateOracleErrors :: OnlyVAMM (element) => element . encode () , CompoundBorrowRateOracleErrors :: PRBMathUD60x18__Exp2InputTooBig (element) => element . encode () , CompoundBorrowRateOracleErrors :: PRBMathUD60x18__FromUintOverflow (element) => element . encode () , CompoundBorrowRateOracleErrors :: PRBMathUD60x18__LogInputTooSmall (element) => element . encode () , CompoundBorrowRateOracleErrors :: PRBMath__MulDivFixedPointOverflow (element) => element . encode () , CompoundBorrowRateOracleErrors :: PRBMath__MulDivOverflow (element) => element . encode () , CompoundBorrowRateOracleErrors :: PositionNetZero (element) => element . encode () , CompoundBorrowRateOracleErrors :: PositionNotSettled (element) => element . encode () , CompoundBorrowRateOracleErrors :: RocketPoolGetEthValueReturnedZero (element) => element . encode () , CompoundBorrowRateOracleErrors :: WithdrawalExceedsCurrentMargin (element) => element . encode () , CompoundBorrowRateOracleErrors :: closeToOrBeyondMaturity (element) => element . encode () }
        }
    }
    impl ::std::fmt::Display for CompoundBorrowRateOracleErrors {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self { CompoundBorrowRateOracleErrors :: AavePoolGetReserveNormalizedIncomeReturnedZero (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: AavePoolGetReserveNormalizedVariableDebtReturnedZero (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: CTokenExchangeRateReturnedZero (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: CanOnlyTradeIfUnlocked (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: CannotLiquidate (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: CannotSettleBeforeMaturity (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: DebugError (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: ExpectedOppositeSigns (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: ExpectedSqrtPriceZeroBeforeInit (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: IRSNotionalAmountSpecifiedMustBeNonZero (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: InvalidMarginDelta (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: LidoGetPooledEthBySharesReturnedZero (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: LiquidityDeltaMustBePositiveInBurn (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: LiquidityDeltaMustBePositiveInMint (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: MarginLessThanMinimum (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: MarginRequirementNotMet (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: MarginRequirementNotMetFCM (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: NotEnoughFunds (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: OOO (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: OnlyFCM (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: OnlyMarginEngine (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: OnlyOwnerCanUpdatePosition (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: OnlyVAMM (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: PRBMathUD60x18__Exp2InputTooBig (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: PRBMathUD60x18__FromUintOverflow (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: PRBMathUD60x18__LogInputTooSmall (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: PRBMath__MulDivFixedPointOverflow (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: PRBMath__MulDivOverflow (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: PositionNetZero (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: PositionNotSettled (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: RocketPoolGetEthValueReturnedZero (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: WithdrawalExceedsCurrentMargin (element) => element . fmt (f) , CompoundBorrowRateOracleErrors :: closeToOrBeyondMaturity (element) => element . fmt (f) }
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedIncomeReturnedZero>
        for CompoundBorrowRateOracleErrors
    {
        fn from(var: AavePoolGetReserveNormalizedIncomeReturnedZero) -> Self {
            CompoundBorrowRateOracleErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(var)
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedVariableDebtReturnedZero>
        for CompoundBorrowRateOracleErrors
    {
        fn from(var: AavePoolGetReserveNormalizedVariableDebtReturnedZero) -> Self {
            CompoundBorrowRateOracleErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                var,
            )
        }
    }
    impl ::std::convert::From<CTokenExchangeRateReturnedZero> for CompoundBorrowRateOracleErrors {
        fn from(var: CTokenExchangeRateReturnedZero) -> Self {
            CompoundBorrowRateOracleErrors::CTokenExchangeRateReturnedZero(var)
        }
    }
    impl ::std::convert::From<CanOnlyTradeIfUnlocked> for CompoundBorrowRateOracleErrors {
        fn from(var: CanOnlyTradeIfUnlocked) -> Self {
            CompoundBorrowRateOracleErrors::CanOnlyTradeIfUnlocked(var)
        }
    }
    impl ::std::convert::From<CannotLiquidate> for CompoundBorrowRateOracleErrors {
        fn from(var: CannotLiquidate) -> Self {
            CompoundBorrowRateOracleErrors::CannotLiquidate(var)
        }
    }
    impl ::std::convert::From<CannotSettleBeforeMaturity> for CompoundBorrowRateOracleErrors {
        fn from(var: CannotSettleBeforeMaturity) -> Self {
            CompoundBorrowRateOracleErrors::CannotSettleBeforeMaturity(var)
        }
    }
    impl ::std::convert::From<DebugError> for CompoundBorrowRateOracleErrors {
        fn from(var: DebugError) -> Self {
            CompoundBorrowRateOracleErrors::DebugError(var)
        }
    }
    impl ::std::convert::From<ExpectedOppositeSigns> for CompoundBorrowRateOracleErrors {
        fn from(var: ExpectedOppositeSigns) -> Self {
            CompoundBorrowRateOracleErrors::ExpectedOppositeSigns(var)
        }
    }
    impl ::std::convert::From<ExpectedSqrtPriceZeroBeforeInit> for CompoundBorrowRateOracleErrors {
        fn from(var: ExpectedSqrtPriceZeroBeforeInit) -> Self {
            CompoundBorrowRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(var)
        }
    }
    impl ::std::convert::From<IRSNotionalAmountSpecifiedMustBeNonZero>
        for CompoundBorrowRateOracleErrors
    {
        fn from(var: IRSNotionalAmountSpecifiedMustBeNonZero) -> Self {
            CompoundBorrowRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(var)
        }
    }
    impl ::std::convert::From<InvalidMarginDelta> for CompoundBorrowRateOracleErrors {
        fn from(var: InvalidMarginDelta) -> Self {
            CompoundBorrowRateOracleErrors::InvalidMarginDelta(var)
        }
    }
    impl ::std::convert::From<LidoGetPooledEthBySharesReturnedZero> for CompoundBorrowRateOracleErrors {
        fn from(var: LidoGetPooledEthBySharesReturnedZero) -> Self {
            CompoundBorrowRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInBurn> for CompoundBorrowRateOracleErrors {
        fn from(var: LiquidityDeltaMustBePositiveInBurn) -> Self {
            CompoundBorrowRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInMint> for CompoundBorrowRateOracleErrors {
        fn from(var: LiquidityDeltaMustBePositiveInMint) -> Self {
            CompoundBorrowRateOracleErrors::LiquidityDeltaMustBePositiveInMint(var)
        }
    }
    impl ::std::convert::From<MarginLessThanMinimum> for CompoundBorrowRateOracleErrors {
        fn from(var: MarginLessThanMinimum) -> Self {
            CompoundBorrowRateOracleErrors::MarginLessThanMinimum(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMet> for CompoundBorrowRateOracleErrors {
        fn from(var: MarginRequirementNotMet) -> Self {
            CompoundBorrowRateOracleErrors::MarginRequirementNotMet(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMetFCM> for CompoundBorrowRateOracleErrors {
        fn from(var: MarginRequirementNotMetFCM) -> Self {
            CompoundBorrowRateOracleErrors::MarginRequirementNotMetFCM(var)
        }
    }
    impl ::std::convert::From<NotEnoughFunds> for CompoundBorrowRateOracleErrors {
        fn from(var: NotEnoughFunds) -> Self {
            CompoundBorrowRateOracleErrors::NotEnoughFunds(var)
        }
    }
    impl ::std::convert::From<OOO> for CompoundBorrowRateOracleErrors {
        fn from(var: OOO) -> Self {
            CompoundBorrowRateOracleErrors::OOO(var)
        }
    }
    impl ::std::convert::From<OnlyFCM> for CompoundBorrowRateOracleErrors {
        fn from(var: OnlyFCM) -> Self {
            CompoundBorrowRateOracleErrors::OnlyFCM(var)
        }
    }
    impl ::std::convert::From<OnlyMarginEngine> for CompoundBorrowRateOracleErrors {
        fn from(var: OnlyMarginEngine) -> Self {
            CompoundBorrowRateOracleErrors::OnlyMarginEngine(var)
        }
    }
    impl ::std::convert::From<OnlyOwnerCanUpdatePosition> for CompoundBorrowRateOracleErrors {
        fn from(var: OnlyOwnerCanUpdatePosition) -> Self {
            CompoundBorrowRateOracleErrors::OnlyOwnerCanUpdatePosition(var)
        }
    }
    impl ::std::convert::From<OnlyVAMM> for CompoundBorrowRateOracleErrors {
        fn from(var: OnlyVAMM) -> Self {
            CompoundBorrowRateOracleErrors::OnlyVAMM(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__Exp2InputTooBig> for CompoundBorrowRateOracleErrors {
        fn from(var: PRBMathUD60x18__Exp2InputTooBig) -> Self {
            CompoundBorrowRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__FromUintOverflow> for CompoundBorrowRateOracleErrors {
        fn from(var: PRBMathUD60x18__FromUintOverflow) -> Self {
            CompoundBorrowRateOracleErrors::PRBMathUD60x18__FromUintOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__LogInputTooSmall> for CompoundBorrowRateOracleErrors {
        fn from(var: PRBMathUD60x18__LogInputTooSmall) -> Self {
            CompoundBorrowRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(var)
        }
    }
    impl ::std::convert::From<PRBMath__MulDivFixedPointOverflow> for CompoundBorrowRateOracleErrors {
        fn from(var: PRBMath__MulDivFixedPointOverflow) -> Self {
            CompoundBorrowRateOracleErrors::PRBMath__MulDivFixedPointOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMath__MulDivOverflow> for CompoundBorrowRateOracleErrors {
        fn from(var: PRBMath__MulDivOverflow) -> Self {
            CompoundBorrowRateOracleErrors::PRBMath__MulDivOverflow(var)
        }
    }
    impl ::std::convert::From<PositionNetZero> for CompoundBorrowRateOracleErrors {
        fn from(var: PositionNetZero) -> Self {
            CompoundBorrowRateOracleErrors::PositionNetZero(var)
        }
    }
    impl ::std::convert::From<PositionNotSettled> for CompoundBorrowRateOracleErrors {
        fn from(var: PositionNotSettled) -> Self {
            CompoundBorrowRateOracleErrors::PositionNotSettled(var)
        }
    }
    impl ::std::convert::From<RocketPoolGetEthValueReturnedZero> for CompoundBorrowRateOracleErrors {
        fn from(var: RocketPoolGetEthValueReturnedZero) -> Self {
            CompoundBorrowRateOracleErrors::RocketPoolGetEthValueReturnedZero(var)
        }
    }
    impl ::std::convert::From<WithdrawalExceedsCurrentMargin> for CompoundBorrowRateOracleErrors {
        fn from(var: WithdrawalExceedsCurrentMargin) -> Self {
            CompoundBorrowRateOracleErrors::WithdrawalExceedsCurrentMargin(var)
        }
    }
    impl ::std::convert::From<closeToOrBeyondMaturity> for CompoundBorrowRateOracleErrors {
        fn from(var: closeToOrBeyondMaturity) -> Self {
            CompoundBorrowRateOracleErrors::closeToOrBeyondMaturity(var)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "MinSecondsSinceLastUpdate",
        abi = "MinSecondsSinceLastUpdate(uint256)"
    )]
    pub struct MinSecondsSinceLastUpdateFilter {
        pub min_seconds_since_last_update: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OracleBufferUpdate",
        abi = "OracleBufferUpdate(uint256,address,uint16,uint32,uint256,uint16,uint16)"
    )]
    pub struct OracleBufferUpdateFilter {
        pub block_timestamp_scaled: ethers::core::types::U256,
        pub source: ethers::core::types::Address,
        pub index: u16,
        pub block_timestamp: u32,
        pub observed_value: ethers::core::types::U256,
        pub cardinality: u16,
        pub cardinality_next: u16,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "RateCardinalityNext", abi = "RateCardinalityNext(uint16)")]
    pub struct RateCardinalityNextFilter {
        pub observation_cardinality_next_new: u16,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundBorrowRateOracleEvents {
        MinSecondsSinceLastUpdateFilter(MinSecondsSinceLastUpdateFilter),
        OracleBufferUpdateFilter(OracleBufferUpdateFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        RateCardinalityNextFilter(RateCardinalityNextFilter),
    }
    impl ethers::contract::EthLogDecode for CompoundBorrowRateOracleEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MinSecondsSinceLastUpdateFilter::decode_log(log) {
                return Ok(CompoundBorrowRateOracleEvents::MinSecondsSinceLastUpdateFilter(decoded));
            }
            if let Ok(decoded) = OracleBufferUpdateFilter::decode_log(log) {
                return Ok(CompoundBorrowRateOracleEvents::OracleBufferUpdateFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(CompoundBorrowRateOracleEvents::OwnershipTransferredFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = RateCardinalityNextFilter::decode_log(log) {
                return Ok(CompoundBorrowRateOracleEvents::RateCardinalityNextFilter(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for CompoundBorrowRateOracleEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundBorrowRateOracleEvents::MinSecondsSinceLastUpdateFilter(element) => {
                    element.fmt(f)
                }
                CompoundBorrowRateOracleEvents::OracleBufferUpdateFilter(element) => element.fmt(f),
                CompoundBorrowRateOracleEvents::OwnershipTransferredFilter(element) => {
                    element.fmt(f)
                }
                CompoundBorrowRateOracleEvents::RateCardinalityNextFilter(element) => {
                    element.fmt(f)
                }
            }
        }
    }
    #[doc = "Container type for all input parameters for the `ONE_IN_WAD` function with signature `ONE_IN_WAD()` and selector `[195, 48, 201, 141]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "ONE_IN_WAD", abi = "ONE_IN_WAD()")]
    pub struct OneInWadCall;
    #[doc = "Container type for all input parameters for the `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` function with signature `UNDERLYING_YIELD_BEARING_PROTOCOL_ID()` and selector `[34, 255, 101, 104]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "UNDERLYING_YIELD_BEARING_PROTOCOL_ID",
        abi = "UNDERLYING_YIELD_BEARING_PROTOCOL_ID()"
    )]
    pub struct UnderlyingYieldBearingProtocolIdCall;
    #[doc = "Container type for all input parameters for the `ctoken` function with signature `ctoken()` and selector `[204, 243, 235, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "ctoken", abi = "ctoken()")]
    pub struct CtokenCall;
    #[doc = "Container type for all input parameters for the `currentBlockSlope` function with signature `currentBlockSlope()` and selector `[36, 177, 139, 23]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "currentBlockSlope", abi = "currentBlockSlope()")]
    pub struct CurrentBlockSlopeCall;
    #[doc = "Container type for all input parameters for the `decimals` function with signature `decimals()` and selector `[49, 60, 229, 103]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "decimals", abi = "decimals()")]
    pub struct DecimalsCall;
    #[doc = "Container type for all input parameters for the `getApyFrom` function with signature `getApyFrom(uint256)` and selector `[23, 34, 30, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getApyFrom", abi = "getApyFrom(uint256)")]
    pub struct GetApyFromCall {
        pub from: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getApyFromTo` function with signature `getApyFromTo(uint256,uint256)` and selector `[147, 85, 109, 189]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getApyFromTo", abi = "getApyFromTo(uint256,uint256)")]
    pub struct GetApyFromToCall {
        pub from: ethers::core::types::U256,
        pub to: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getBlockSlope` function with signature `getBlockSlope()` and selector `[145, 170, 55, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getBlockSlope", abi = "getBlockSlope()")]
    pub struct GetBlockSlopeCall;
    #[doc = "Container type for all input parameters for the `getCurrentRateInRay` function with signature `getCurrentRateInRay()` and selector `[239, 223, 93, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getCurrentRateInRay", abi = "getCurrentRateInRay()")]
    pub struct GetCurrentRateInRayCall;
    #[doc = "Container type for all input parameters for the `getLastRateSlope` function with signature `getLastRateSlope()` and selector `[254, 17, 95, 190]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getLastRateSlope", abi = "getLastRateSlope()")]
    pub struct GetLastRateSlopeCall;
    #[doc = "Container type for all input parameters for the `getLastUpdatedRate` function with signature `getLastUpdatedRate()` and selector `[138, 107, 140, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getLastUpdatedRate", abi = "getLastUpdatedRate()")]
    pub struct GetLastUpdatedRateCall;
    #[doc = "Container type for all input parameters for the `getRateFrom` function with signature `getRateFrom(uint256)` and selector `[22, 62, 156, 79]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getRateFrom", abi = "getRateFrom(uint256)")]
    pub struct GetRateFromCall {
        pub from: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getRateFromTo` function with signature `getRateFromTo(uint256,uint256)` and selector `[247, 57, 103, 12]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getRateFromTo", abi = "getRateFromTo(uint256,uint256)")]
    pub struct GetRateFromToCall {
        pub from: ethers::core::types::U256,
        pub to: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `increaseObservationCardinalityNext` function with signature `increaseObservationCardinalityNext(uint16)` and selector `[50, 20, 143, 103]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "increaseObservationCardinalityNext",
        abi = "increaseObservationCardinalityNext(uint16)"
    )]
    pub struct IncreaseObservationCardinalityNextCall {
        pub rate_cardinality_next: u16,
    }
    #[doc = "Container type for all input parameters for the `interpolateRateValue` function with signature `interpolateRateValue(uint256,uint256,uint256)` and selector `[84, 18, 76, 100]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "interpolateRateValue",
        abi = "interpolateRateValue(uint256,uint256,uint256)"
    )]
    pub struct InterpolateRateValueCall {
        pub before_or_at_rate_value_ray: ethers::core::types::U256,
        pub apy_from_before_or_at_to_at_or_after_wad: ethers::core::types::U256,
        pub time_delta_before_or_at_to_queried_time_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `lastUpdatedBlock` function with signature `lastUpdatedBlock()` and selector `[249, 12, 229, 186]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastUpdatedBlock", abi = "lastUpdatedBlock()")]
    pub struct LastUpdatedBlockCall;
    #[doc = "Container type for all input parameters for the `minSecondsSinceLastUpdate` function with signature `minSecondsSinceLastUpdate()` and selector `[124, 242, 204, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "minSecondsSinceLastUpdate",
        abi = "minSecondsSinceLastUpdate()"
    )]
    pub struct MinSecondsSinceLastUpdateCall;
    #[doc = "Container type for all input parameters for the `observations` function with signature `observations(uint256)` and selector `[37, 44, 9, 215]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "observations", abi = "observations(uint256)")]
    pub struct ObservationsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `oracleVars` function with signature `oracleVars()` and selector `[199, 219, 53, 155]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "oracleVars", abi = "oracleVars()")]
    pub struct OracleVarsCall;
    #[doc = "Container type for all input parameters for the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    #[doc = "Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `[113, 80, 24, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    #[doc = "Container type for all input parameters for the `setMinSecondsSinceLastUpdate` function with signature `setMinSecondsSinceLastUpdate(uint256)` and selector `[189, 176, 80, 146]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "setMinSecondsSinceLastUpdate",
        abi = "setMinSecondsSinceLastUpdate(uint256)"
    )]
    pub struct SetMinSecondsSinceLastUpdateCall {
        pub min_seconds_since_last_update: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `settlementRateCache` function with signature `settlementRateCache(uint32,uint32)` and selector `[17, 149, 8, 46]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "settlementRateCache",
        abi = "settlementRateCache(uint32,uint32)"
    )]
    pub struct SettlementRateCacheCall(pub u32, pub u32);
    #[doc = "Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `[242, 253, 227, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `underlying` function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "underlying", abi = "underlying()")]
    pub struct UnderlyingCall;
    #[doc = "Container type for all input parameters for the `variableFactor` function with signature `variableFactor(uint256,uint256)` and selector `[37, 242, 88, 221]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "variableFactor", abi = "variableFactor(uint256,uint256)")]
    pub struct VariableFactorCall {
        pub term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
        pub term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `variableFactorNoCache` function with signature `variableFactorNoCache(uint256,uint256)` and selector `[65, 69, 53, 40]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "variableFactorNoCache",
        abi = "variableFactorNoCache(uint256,uint256)"
    )]
    pub struct VariableFactorNoCacheCall {
        pub term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
        pub term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `writeOracleEntry` function with signature `writeOracleEntry()` and selector `[122, 164, 219, 19]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "writeOracleEntry", abi = "writeOracleEntry()")]
    pub struct WriteOracleEntryCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundBorrowRateOracleCalls {
        OneInWad(OneInWadCall),
        UnderlyingYieldBearingProtocolId(UnderlyingYieldBearingProtocolIdCall),
        Ctoken(CtokenCall),
        CurrentBlockSlope(CurrentBlockSlopeCall),
        Decimals(DecimalsCall),
        GetApyFrom(GetApyFromCall),
        GetApyFromTo(GetApyFromToCall),
        GetBlockSlope(GetBlockSlopeCall),
        GetCurrentRateInRay(GetCurrentRateInRayCall),
        GetLastRateSlope(GetLastRateSlopeCall),
        GetLastUpdatedRate(GetLastUpdatedRateCall),
        GetRateFrom(GetRateFromCall),
        GetRateFromTo(GetRateFromToCall),
        IncreaseObservationCardinalityNext(IncreaseObservationCardinalityNextCall),
        InterpolateRateValue(InterpolateRateValueCall),
        LastUpdatedBlock(LastUpdatedBlockCall),
        MinSecondsSinceLastUpdate(MinSecondsSinceLastUpdateCall),
        Observations(ObservationsCall),
        OracleVars(OracleVarsCall),
        Owner(OwnerCall),
        RenounceOwnership(RenounceOwnershipCall),
        SetMinSecondsSinceLastUpdate(SetMinSecondsSinceLastUpdateCall),
        SettlementRateCache(SettlementRateCacheCall),
        TransferOwnership(TransferOwnershipCall),
        Underlying(UnderlyingCall),
        VariableFactor(VariableFactorCall),
        VariableFactorNoCache(VariableFactorNoCacheCall),
        WriteOracleEntry(WriteOracleEntryCall),
    }
    impl ethers::core::abi::AbiDecode for CompoundBorrowRateOracleCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <OneInWadCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::OneInWad(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingYieldBearingProtocolIdCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundBorrowRateOracleCalls::UnderlyingYieldBearingProtocolId(decoded));
            }
            if let Ok(decoded) = <CtokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::Ctoken(decoded));
            }
            if let Ok(decoded) =
                <CurrentBlockSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::CurrentBlockSlope(decoded));
            }
            if let Ok(decoded) =
                <DecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::Decimals(decoded));
            }
            if let Ok(decoded) =
                <GetApyFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::GetApyFrom(decoded));
            }
            if let Ok(decoded) =
                <GetApyFromToCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::GetApyFromTo(decoded));
            }
            if let Ok(decoded) =
                <GetBlockSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::GetBlockSlope(decoded));
            }
            if let Ok(decoded) =
                <GetCurrentRateInRayCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::GetCurrentRateInRay(decoded));
            }
            if let Ok(decoded) =
                <GetLastRateSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::GetLastRateSlope(decoded));
            }
            if let Ok(decoded) =
                <GetLastUpdatedRateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::GetLastUpdatedRate(decoded));
            }
            if let Ok(decoded) =
                <GetRateFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::GetRateFrom(decoded));
            }
            if let Ok(decoded) =
                <GetRateFromToCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::GetRateFromTo(decoded));
            }
            if let Ok(decoded) =
                <IncreaseObservationCardinalityNextCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundBorrowRateOracleCalls::IncreaseObservationCardinalityNext(decoded),
                );
            }
            if let Ok(decoded) =
                <InterpolateRateValueCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::InterpolateRateValue(decoded));
            }
            if let Ok(decoded) =
                <LastUpdatedBlockCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::LastUpdatedBlock(decoded));
            }
            if let Ok(decoded) =
                <MinSecondsSinceLastUpdateCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundBorrowRateOracleCalls::MinSecondsSinceLastUpdate(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <ObservationsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::Observations(decoded));
            }
            if let Ok(decoded) =
                <OracleVarsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::OracleVars(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::Owner(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <SetMinSecondsSinceLastUpdateCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundBorrowRateOracleCalls::SetMinSecondsSinceLastUpdate(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <SettlementRateCacheCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::SettlementRateCache(decoded));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::Underlying(decoded));
            }
            if let Ok(decoded) =
                <VariableFactorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::VariableFactor(decoded));
            }
            if let Ok(decoded) =
                <VariableFactorNoCacheCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::VariableFactorNoCache(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <WriteOracleEntryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundBorrowRateOracleCalls::WriteOracleEntry(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CompoundBorrowRateOracleCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CompoundBorrowRateOracleCalls::OneInWad(element) => element.encode(),
                CompoundBorrowRateOracleCalls::UnderlyingYieldBearingProtocolId(element) => {
                    element.encode()
                }
                CompoundBorrowRateOracleCalls::Ctoken(element) => element.encode(),
                CompoundBorrowRateOracleCalls::CurrentBlockSlope(element) => element.encode(),
                CompoundBorrowRateOracleCalls::Decimals(element) => element.encode(),
                CompoundBorrowRateOracleCalls::GetApyFrom(element) => element.encode(),
                CompoundBorrowRateOracleCalls::GetApyFromTo(element) => element.encode(),
                CompoundBorrowRateOracleCalls::GetBlockSlope(element) => element.encode(),
                CompoundBorrowRateOracleCalls::GetCurrentRateInRay(element) => element.encode(),
                CompoundBorrowRateOracleCalls::GetLastRateSlope(element) => element.encode(),
                CompoundBorrowRateOracleCalls::GetLastUpdatedRate(element) => element.encode(),
                CompoundBorrowRateOracleCalls::GetRateFrom(element) => element.encode(),
                CompoundBorrowRateOracleCalls::GetRateFromTo(element) => element.encode(),
                CompoundBorrowRateOracleCalls::IncreaseObservationCardinalityNext(element) => {
                    element.encode()
                }
                CompoundBorrowRateOracleCalls::InterpolateRateValue(element) => element.encode(),
                CompoundBorrowRateOracleCalls::LastUpdatedBlock(element) => element.encode(),
                CompoundBorrowRateOracleCalls::MinSecondsSinceLastUpdate(element) => {
                    element.encode()
                }
                CompoundBorrowRateOracleCalls::Observations(element) => element.encode(),
                CompoundBorrowRateOracleCalls::OracleVars(element) => element.encode(),
                CompoundBorrowRateOracleCalls::Owner(element) => element.encode(),
                CompoundBorrowRateOracleCalls::RenounceOwnership(element) => element.encode(),
                CompoundBorrowRateOracleCalls::SetMinSecondsSinceLastUpdate(element) => {
                    element.encode()
                }
                CompoundBorrowRateOracleCalls::SettlementRateCache(element) => element.encode(),
                CompoundBorrowRateOracleCalls::TransferOwnership(element) => element.encode(),
                CompoundBorrowRateOracleCalls::Underlying(element) => element.encode(),
                CompoundBorrowRateOracleCalls::VariableFactor(element) => element.encode(),
                CompoundBorrowRateOracleCalls::VariableFactorNoCache(element) => element.encode(),
                CompoundBorrowRateOracleCalls::WriteOracleEntry(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CompoundBorrowRateOracleCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundBorrowRateOracleCalls::OneInWad(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::UnderlyingYieldBearingProtocolId(element) => {
                    element.fmt(f)
                }
                CompoundBorrowRateOracleCalls::Ctoken(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::CurrentBlockSlope(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::Decimals(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::GetApyFrom(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::GetApyFromTo(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::GetBlockSlope(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::GetCurrentRateInRay(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::GetLastRateSlope(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::GetLastUpdatedRate(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::GetRateFrom(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::GetRateFromTo(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::IncreaseObservationCardinalityNext(element) => {
                    element.fmt(f)
                }
                CompoundBorrowRateOracleCalls::InterpolateRateValue(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::LastUpdatedBlock(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::MinSecondsSinceLastUpdate(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::Observations(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::OracleVars(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::Owner(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::RenounceOwnership(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::SetMinSecondsSinceLastUpdate(element) => {
                    element.fmt(f)
                }
                CompoundBorrowRateOracleCalls::SettlementRateCache(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::TransferOwnership(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::Underlying(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::VariableFactor(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::VariableFactorNoCache(element) => element.fmt(f),
                CompoundBorrowRateOracleCalls::WriteOracleEntry(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<OneInWadCall> for CompoundBorrowRateOracleCalls {
        fn from(var: OneInWadCall) -> Self {
            CompoundBorrowRateOracleCalls::OneInWad(var)
        }
    }
    impl ::std::convert::From<UnderlyingYieldBearingProtocolIdCall> for CompoundBorrowRateOracleCalls {
        fn from(var: UnderlyingYieldBearingProtocolIdCall) -> Self {
            CompoundBorrowRateOracleCalls::UnderlyingYieldBearingProtocolId(var)
        }
    }
    impl ::std::convert::From<CtokenCall> for CompoundBorrowRateOracleCalls {
        fn from(var: CtokenCall) -> Self {
            CompoundBorrowRateOracleCalls::Ctoken(var)
        }
    }
    impl ::std::convert::From<CurrentBlockSlopeCall> for CompoundBorrowRateOracleCalls {
        fn from(var: CurrentBlockSlopeCall) -> Self {
            CompoundBorrowRateOracleCalls::CurrentBlockSlope(var)
        }
    }
    impl ::std::convert::From<DecimalsCall> for CompoundBorrowRateOracleCalls {
        fn from(var: DecimalsCall) -> Self {
            CompoundBorrowRateOracleCalls::Decimals(var)
        }
    }
    impl ::std::convert::From<GetApyFromCall> for CompoundBorrowRateOracleCalls {
        fn from(var: GetApyFromCall) -> Self {
            CompoundBorrowRateOracleCalls::GetApyFrom(var)
        }
    }
    impl ::std::convert::From<GetApyFromToCall> for CompoundBorrowRateOracleCalls {
        fn from(var: GetApyFromToCall) -> Self {
            CompoundBorrowRateOracleCalls::GetApyFromTo(var)
        }
    }
    impl ::std::convert::From<GetBlockSlopeCall> for CompoundBorrowRateOracleCalls {
        fn from(var: GetBlockSlopeCall) -> Self {
            CompoundBorrowRateOracleCalls::GetBlockSlope(var)
        }
    }
    impl ::std::convert::From<GetCurrentRateInRayCall> for CompoundBorrowRateOracleCalls {
        fn from(var: GetCurrentRateInRayCall) -> Self {
            CompoundBorrowRateOracleCalls::GetCurrentRateInRay(var)
        }
    }
    impl ::std::convert::From<GetLastRateSlopeCall> for CompoundBorrowRateOracleCalls {
        fn from(var: GetLastRateSlopeCall) -> Self {
            CompoundBorrowRateOracleCalls::GetLastRateSlope(var)
        }
    }
    impl ::std::convert::From<GetLastUpdatedRateCall> for CompoundBorrowRateOracleCalls {
        fn from(var: GetLastUpdatedRateCall) -> Self {
            CompoundBorrowRateOracleCalls::GetLastUpdatedRate(var)
        }
    }
    impl ::std::convert::From<GetRateFromCall> for CompoundBorrowRateOracleCalls {
        fn from(var: GetRateFromCall) -> Self {
            CompoundBorrowRateOracleCalls::GetRateFrom(var)
        }
    }
    impl ::std::convert::From<GetRateFromToCall> for CompoundBorrowRateOracleCalls {
        fn from(var: GetRateFromToCall) -> Self {
            CompoundBorrowRateOracleCalls::GetRateFromTo(var)
        }
    }
    impl ::std::convert::From<IncreaseObservationCardinalityNextCall>
        for CompoundBorrowRateOracleCalls
    {
        fn from(var: IncreaseObservationCardinalityNextCall) -> Self {
            CompoundBorrowRateOracleCalls::IncreaseObservationCardinalityNext(var)
        }
    }
    impl ::std::convert::From<InterpolateRateValueCall> for CompoundBorrowRateOracleCalls {
        fn from(var: InterpolateRateValueCall) -> Self {
            CompoundBorrowRateOracleCalls::InterpolateRateValue(var)
        }
    }
    impl ::std::convert::From<LastUpdatedBlockCall> for CompoundBorrowRateOracleCalls {
        fn from(var: LastUpdatedBlockCall) -> Self {
            CompoundBorrowRateOracleCalls::LastUpdatedBlock(var)
        }
    }
    impl ::std::convert::From<MinSecondsSinceLastUpdateCall> for CompoundBorrowRateOracleCalls {
        fn from(var: MinSecondsSinceLastUpdateCall) -> Self {
            CompoundBorrowRateOracleCalls::MinSecondsSinceLastUpdate(var)
        }
    }
    impl ::std::convert::From<ObservationsCall> for CompoundBorrowRateOracleCalls {
        fn from(var: ObservationsCall) -> Self {
            CompoundBorrowRateOracleCalls::Observations(var)
        }
    }
    impl ::std::convert::From<OracleVarsCall> for CompoundBorrowRateOracleCalls {
        fn from(var: OracleVarsCall) -> Self {
            CompoundBorrowRateOracleCalls::OracleVars(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for CompoundBorrowRateOracleCalls {
        fn from(var: OwnerCall) -> Self {
            CompoundBorrowRateOracleCalls::Owner(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for CompoundBorrowRateOracleCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            CompoundBorrowRateOracleCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<SetMinSecondsSinceLastUpdateCall> for CompoundBorrowRateOracleCalls {
        fn from(var: SetMinSecondsSinceLastUpdateCall) -> Self {
            CompoundBorrowRateOracleCalls::SetMinSecondsSinceLastUpdate(var)
        }
    }
    impl ::std::convert::From<SettlementRateCacheCall> for CompoundBorrowRateOracleCalls {
        fn from(var: SettlementRateCacheCall) -> Self {
            CompoundBorrowRateOracleCalls::SettlementRateCache(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for CompoundBorrowRateOracleCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            CompoundBorrowRateOracleCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UnderlyingCall> for CompoundBorrowRateOracleCalls {
        fn from(var: UnderlyingCall) -> Self {
            CompoundBorrowRateOracleCalls::Underlying(var)
        }
    }
    impl ::std::convert::From<VariableFactorCall> for CompoundBorrowRateOracleCalls {
        fn from(var: VariableFactorCall) -> Self {
            CompoundBorrowRateOracleCalls::VariableFactor(var)
        }
    }
    impl ::std::convert::From<VariableFactorNoCacheCall> for CompoundBorrowRateOracleCalls {
        fn from(var: VariableFactorNoCacheCall) -> Self {
            CompoundBorrowRateOracleCalls::VariableFactorNoCache(var)
        }
    }
    impl ::std::convert::From<WriteOracleEntryCall> for CompoundBorrowRateOracleCalls {
        fn from(var: WriteOracleEntryCall) -> Self {
            CompoundBorrowRateOracleCalls::WriteOracleEntry(var)
        }
    }
    #[doc = "Container type for all return fields from the `ONE_IN_WAD` function with signature `ONE_IN_WAD()` and selector `[195, 48, 201, 141]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OneInWadReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` function with signature `UNDERLYING_YIELD_BEARING_PROTOCOL_ID()` and selector `[34, 255, 101, 104]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct UnderlyingYieldBearingProtocolIdReturn(pub u8);
    #[doc = "Container type for all return fields from the `ctoken` function with signature `ctoken()` and selector `[204, 243, 235, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct CtokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `currentBlockSlope` function with signature `currentBlockSlope()` and selector `[36, 177, 139, 23]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct CurrentBlockSlopeReturn {
        pub time_change: u32,
        pub block_change: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `decimals` function with signature `decimals()` and selector `[49, 60, 229, 103]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct DecimalsReturn(pub u8);
    #[doc = "Container type for all return fields from the `getApyFrom` function with signature `getApyFrom(uint256)` and selector `[23, 34, 30, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetApyFromReturn {
        pub apy_from_to_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getApyFromTo` function with signature `getApyFromTo(uint256,uint256)` and selector `[147, 85, 109, 189]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetApyFromToReturn {
        pub apy_from_to_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getBlockSlope` function with signature `getBlockSlope()` and selector `[145, 170, 55, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetBlockSlopeReturn {
        pub block_change: ethers::core::types::U256,
        pub time_change: u32,
    }
    #[doc = "Container type for all return fields from the `getCurrentRateInRay` function with signature `getCurrentRateInRay()` and selector `[239, 223, 93, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetCurrentRateInRayReturn {
        pub current_rate: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getLastRateSlope` function with signature `getLastRateSlope()` and selector `[254, 17, 95, 190]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetLastRateSlopeReturn {
        pub rate_change: ethers::core::types::U256,
        pub time_change: u32,
    }
    #[doc = "Container type for all return fields from the `getLastUpdatedRate` function with signature `getLastUpdatedRate()` and selector `[138, 107, 140, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetLastUpdatedRateReturn {
        pub timestamp: u32,
        pub result_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getRateFrom` function with signature `getRateFrom(uint256)` and selector `[22, 62, 156, 79]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetRateFromReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `getRateFromTo` function with signature `getRateFromTo(uint256,uint256)` and selector `[247, 57, 103, 12]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetRateFromToReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `interpolateRateValue` function with signature `interpolateRateValue(uint256,uint256,uint256)` and selector `[84, 18, 76, 100]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct InterpolateRateValueReturn {
        pub rate_value_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `lastUpdatedBlock` function with signature `lastUpdatedBlock()` and selector `[249, 12, 229, 186]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct LastUpdatedBlockReturn {
        pub timestamp: u32,
        pub number: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `minSecondsSinceLastUpdate` function with signature `minSecondsSinceLastUpdate()` and selector `[124, 242, 204, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct MinSecondsSinceLastUpdateReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `observations` function with signature `observations(uint256)` and selector `[37, 44, 9, 215]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct ObservationsReturn {
        pub block_timestamp: u32,
        pub observed_value: ethers::core::types::U256,
        pub initialized: bool,
    }
    #[doc = "Container type for all return fields from the `oracleVars` function with signature `oracleVars()` and selector `[199, 219, 53, 155]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OracleVarsReturn {
        pub rate_index: u16,
        pub rate_cardinality: u16,
        pub rate_cardinality_next: u16,
    }
    #[doc = "Container type for all return fields from the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `settlementRateCache` function with signature `settlementRateCache(uint32,uint32)` and selector `[17, 149, 8, 46]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct SettlementRateCacheReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `underlying` function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct UnderlyingReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `variableFactor` function with signature `variableFactor(uint256,uint256)` and selector `[37, 242, 88, 221]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VariableFactorReturn {
        pub result_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `variableFactorNoCache` function with signature `variableFactorNoCache(uint256,uint256)` and selector `[65, 69, 53, 40]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VariableFactorNoCacheReturn {
        pub result_wad: ethers::core::types::U256,
    }
}
