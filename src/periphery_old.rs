pub use periphery_old::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod periphery_old {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    pub use super::super::shared_types::*;
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "PeripheryOld was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static PERIPHERYOLD_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"weth_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedIncomeReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedVariableDebtReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CTokenExchangeRateReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\",\"components\":[]}],\"type\":\"error\",\"name\":\"CanOnlyTradeIfUnlocked\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotLiquidate\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotSettleBeforeMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"DebugError\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedOppositeSigns\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedSqrtPriceZeroBeforeInit\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IRSNotionalAmountSpecifiedMustBeNonZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidMarginDelta\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"LidoGetPooledEthBySharesReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInBurn\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInMint\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginLessThanMinimum\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMet\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMetFCM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"NotEnoughFunds\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OOO\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyFCM\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyMarginEngine\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyOwnerCanUpdatePosition\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyVAMM\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNetZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNotSettled\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"RocketPoolGetEthValueReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"WithdrawalExceedsCurrentMargin\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"closeToOrBeyondMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"vamm\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"lpMarginCapNew\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MarginCap\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_lpMarginCaps\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_lpMarginCumulatives\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCurrentTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"currentTick\",\"type\":\"int24\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtRatioAX96\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioBX96\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getLiquidityForNotional\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"vamm\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lpMarginCaps\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"vamm\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lpMarginCumulatives\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct IPeripheryOld.MintOrBurnParams\",\"name\":\"params\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isMint\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"marginDelta\",\"type\":\"int256\",\"components\":[]}]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"mintOrBurn\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"positionMarginRequirement\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"struct IPeripheryOld.MintOrBurnParams\",\"name\":\"paramsNewPosition\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isMint\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"marginDelta\",\"type\":\"int256\",\"components\":[]}]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"rolloverWithMint\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"newPositionMarginRequirement\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"struct IPeripheryOld.SwapPeripheryParams\",\"name\":\"paramsNewPosition\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isFT\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"marginDelta\",\"type\":\"uint256\",\"components\":[]}]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"rolloverWithSwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"_variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"_fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"_marginRequirement\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"_tickAfter\",\"type\":\"int24\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"vamm\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"lpMarginCapNew\",\"type\":\"int256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLPMarginCap\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"vamm\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"lpMarginCumulative\",\"type\":\"int256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLPMarginCumulative\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"settlePositionAndWithdrawMargin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"struct IPeripheryOld.SwapPeripheryParams\",\"name\":\"params\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isFT\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"marginDelta\",\"type\":\"uint256\",\"components\":[]}]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"_variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"_fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"_marginRequirement\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"_tickAfter\",\"type\":\"int24\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"marginEngine\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"marginDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"fullyWithdraw\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"updatePositionMargin\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static PERIPHERYOLD_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040523480156200001157600080fd5b5060405162002d1338038062002d1383398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b612c77806200009c6000396000f3fe6080604052600436106100e85760003560e01c8063782085b51161008a578063c19be59511610059578063c19be595146102da578063e5a97cf0146102fa578063efa7c3d614610327578063f93964071461034757600080fd5b8063782085b51461024657806378f70b871461027c5780638d8e09831461028f578063a1764595146102a257600080fd5b80632676938b116100c65780632676938b1461018257806332e00daf146101ba57806334907e34146101cd57806361b024521461021057600080fd5b8063040a5dc1146100ed57806305b20d18146101255780631b44093d14610160575b600080fd5b3480156100f957600080fd5b5061010d610108366004612289565b61035a565b60405160029190910b81526020015b60405180910390f35b34801561013157600080fd5b50610152610140366004612289565b60016020526000908152604090205481565b60405190815260200161011c565b34801561016c57600080fd5b5061018061017b3660046122a6565b61044c565b005b34801561018e57600080fd5b506101a261019d3660046122d2565b6105b2565b6040516001600160801b03909116815260200161011c565b6101526101c8366004612422565b610605565b6101e06101db3660046124f9565b610bb4565b604080519687526020870195909552938501929092526060840152608083015260020b60a082015260c00161011c565b34801561021c57600080fd5b5061015261022b366004612289565b6001600160a01b031660009081526002602052604090205490565b34801561025257600080fd5b50610152610261366004612289565b6001600160a01b031660009081526001602052604090205490565b61015261028a366004612515565b61104b565b6101e061029d366004612584565b6110a9565b3480156102ae57600080fd5b506000546102c2906001600160a01b031681565b6040516001600160a01b03909116815260200161011c565b3480156102e657600080fd5b506101806102f53660046125e7565b6110ec565b34801561030657600080fd5b50610152610315366004612289565b60026020526000908152604090205481565b34801561033357600080fd5b506101806103423660046122a6565b611163565b610180610355366004612643565b611288565b600080826001600160a01b031663e098372c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce91906126ab565b9050806001600160a01b03166380a0f76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561040957600080fd5b505afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044191906126c8565b602001519392505050565b816001600160a01b0381166104995760405162461bcd60e51b815260206004820152600e60248201526d76616d6d2061646472207a65726f60901b60448201526064015b60405180910390fd5b6000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d457600080fd5b505afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c91906126ab565b9050336001600160a01b038216146105585760405162461bcd60e51b815260206004820152600f60248201526e37b7363c903b30b6b69037bbb732b960891b6044820152606401610490565b6001600160a01b038416600081815260016020908152604091829020869055815192835282018590527f359cd6003fbab20721d687a623408d04791a7b8de287826b2590c13db66f02fb910160405180910390a150505050565b6000826001600160a01b0316846001600160a01b031611156105d2579192915b6105fb6105f683600160601b6105e88888612764565b6001600160a01b03166118d6565b6119e9565b90505b9392505050565b600061061982602001518360400151611a56565b600082600001516001600160a01b031663e098372c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069091906126ab565b835160208501516040808701519051634904f4dd60e11b81529394506000936001600160a01b0390931692639209e9ba926106cf92339260040161278c565b61014060405180830381600087803b1580156106ea57600080fd5b505af11580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072291906127d3565b9050600084600001516001600160a01b031663884287526040518163ffffffff1660e01b815260040160206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b9190612868565b9050600033848760000151886020015189604001516040516020016107c4959493929190612885565b60405160208183030381529060405280519060200120905060008084602001516001600160801b03161190508280156107fa5750805b1561082857600082815260036020526040902054610828576040808501516000848152600360205291909120555b6000856001600160a01b03166380a0f76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561086357600080fd5b505afa158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b91906126c8565b805160208a01519192506001600160a01b03161515906000906108bd90611b1b565b905060006108ce8b60400151611b1b565b90508261096657600060028c604001518d602001516108ed91906128ca565b6108f79190612927565b9050600061090482611b1b565b6040516323fbaf6f60e11b81526001600160a01b038083166004830152919250908c16906347f75ede90602401600060405180830381600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b5050505050505b60a08b01511515806109785750600034115b1561099b5761099b8b600001518c602001518d604001518e60a001516000611288565b60006109ac83838e606001516105b2565b905060009a508b6080015115610a4f5760208c01516040808e01519051635c6651a760e11b81526001600160a01b038d169263b8cca34e926109f692339291908790600401612961565b602060405180830381600087803b158015610a1057600080fd5b505af1158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190612994565b9a50610ade565b60208c01516040808e01519051631f2f089360e01b81526001600160a01b038d1692631f2f089392610a8992339291908790600401612961565b602060405180830381600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190612994565b9a505b8b5160208d01516040808f01519051634904f4dd60e11b81526001600160a01b0390931692639209e9ba92610b1792339260040161278c565b61014060405180830381600087803b158015610b3257600080fd5b505af1158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a91906127d3565b60208101519099506001600160801b03161515888015610b8e57508680610b8e5750805b15610ba457610ba48b898c604001518a85611ebb565b5050505050505050505050919050565b600080600080600080610bcf87608001518860a00151611a56565b600087600001516001600160a01b031663e098372c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0e57600080fd5b505afa158015610c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4691906126ab565b9050876080015160020b6000148015610c64575060a088015160020b155b15610dd1576000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca457600080fd5b505afa158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc91906129ad565b90506000826001600160a01b03166380a0f76c6040518163ffffffff1660e01b815260040160606040518083038186803b158015610d1957600080fd5b505afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5191906126c8565b90506000828260200151610d6591906129ca565b90506000838360200151610d7991906128ca565b905062010deb19600283900b1215610d935762010deb1991505b610da062010deb19612a12565b60020b8160020b1315610dbd57610dba62010deb19612a12565b90505b600291820b60808d0152900b60a08b015250505b60008860c001511180610de45750600034115b15610e0f57610e0f886000015189608001518a60a00151610e088c60c00151611ff8565b6000611288565b6000886020015115610e2f57610e288960400151611ff8565b9050610e48565b610e3c8960400151611ff8565b610e4590612a35565b90505b60006040518060a00160405280336001600160a01b031681526020018381526020018b606001516001600160a01b0316600014610e89578b60600151610ec7565b8b6020015115610eb057610eab60016c1fa71f3f5f68a90479ee3f8fec612764565b610ec7565b610ec76b0816769404766de590afe04e6001612a52565b6001600160a01b031681526020018b6080015160020b81526020018b60a0015160020b8152509050826001600160a01b03166367758e6e826040518263ffffffff1660e01b8152600401610f629190600060a08201905060018060a01b038084511683526020840151602084015280604085015116604084015250606083015160020b6060830152608083015160020b608083015292915050565b60a060405180830381600087803b158015610f7c57600080fd5b505af1158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190612a7d565b809950819a50829b50839c50849d505050505050826001600160a01b03166380a0f76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561100157600080fd5b505afa158015611015573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103991906126c8565b60200151935050505091939550919395565b6000816080015161108a5760405162461bcd60e51b81526020600482015260096024820152681bdb9b1e481b5a5b9d60ba1b6044820152606401610490565b611096868686866110ec565b61109f82610605565b9695505050505050565b6000806000806000806110be8b8b8b8b6110ec565b6110c787610bb4565b809650819750829850839950849a50859b505050505050509550955095509550955095565b60405163a725b96560e01b81526001600160a01b0385169063a725b9659061111c9086908690869060040161278c565b600060405180830381600087803b15801561113657600080fd5b505af115801561114a573d6000803e3d6000fd5b5050505061115d84838360006001611288565b50505050565b816001600160a01b0381166111ab5760405162461bcd60e51b815260206004820152600e60248201526d76616d6d2061646472207a65726f60901b6044820152606401610490565b6000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e657600080fd5b505afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e91906126ab565b9050336001600160a01b0382161461126a5760405162461bcd60e51b815260206004820152600f60248201526e37b7363c903b30b6b69037bbb732b960891b6044820152606401610490565b50506001600160a01b03909116600090815260026020526040902055565b604051634904f4dd60e11b81526000906001600160a01b03871690639209e9ba906112bb9033908990899060040161278c565b61014060405180830381600087803b1580156112d657600080fd5b505af11580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e91906127d3565b90506000866001600160a01b031663884287526040518163ffffffff1660e01b815260040160206040518083038186803b15801561134b57600080fd5b505afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190612868565b90506000876001600160a01b031663e098372c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c057600080fd5b505afa1580156113d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f891906126ab565b9050600033828a8a8a604051602001611415959493929190612885565b6040516020818303038152906040528051906020012090508280156114475750600084602001516001600160801b0316115b1561147557600081815260036020526040902054611475576040808501516000838152600360205291909120555b6000896001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e891906126ab565b905085156115015784604001516114fe90612a35565b96505b6000546001600160a01b03828116911614156116ff57600087121561158957604051637717797f60e01b81526001600160a01b038b1690637717797f906115529033908d908d908d90600401612abd565b600060405180830381600087803b15801561156c57600080fd5b505af1158015611580573d6000803e3d6000fd5b50505050611814565b60008713156115b2576115b233306115a08a612062565b6001600160a01b0385169291906120b4565b34156116355760008054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561160657600080fd5b505af115801561161a573d6000803e3d6000fd5b505050505061162834611ff8565b6116329088612ae7565b96505b806001600160a01b031663095ea7b38b61164e8a612062565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561169457600080fd5b505af11580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cc9190612868565b50604051637717797f60e01b81526001600160a01b038b1690637717797f906115529033908d908d908d90600401612abd565b60008713156117af5761171633306115a08a612062565b806001600160a01b031663095ea7b38b61172f8a612062565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561177557600080fd5b505af1158015611789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ad9190612868565b505b604051637717797f60e01b81526001600160a01b038b1690637717797f906117e19033908d908d908d90600401612abd565b600060405180830381600087803b1580156117fb57600080fd5b505af115801561180f573d6000803e3d6000fd5b505050505b604051634904f4dd60e11b81526001600160a01b038b1690639209e9ba906118449033908d908d9060040161278c565b61014060405180830381600087803b15801561185f57600080fd5b505af1158015611873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189791906127d3565b94508380156118b35750600085602001516001600160801b0316115b156118ca576118ca83838760400151600180611ebb565b50505050505050505050565b600080806000198587098587029250828110838203039150508060001415611946576000841161193b5760405162461bcd60e51b815260206004820152601060248201526f4469766973696f6e206279207a65726f60801b6044820152606401610490565b5082900490506105fe565b8084116119805760405162461bcd60e51b81526020600482015260086024820152676f766572666c6f7760c01b6044820152606401610490565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60006001600160801b03821115611a525760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610490565b5090565b8060020b8260020b12611a915760405162461bcd60e51b8152602060048201526003602482015262544c5560e81b6044820152606401610490565b62010deb19600283900b1215611acf5760405162461bcd60e51b8152602060048201526003602482015262544c4d60e81b6044820152606401610490565b611adc62010deb19612a12565b60020b8160020b1315611b175760405162461bcd60e51b815260206004820152600360248201526254554d60e81b6044820152606401610490565b5050565b60008060008360020b12611b32578260020b611b3f565b8260020b611b3f90612a35565b9050611b4e62010deb19612a12565b60020b811115611b845760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610490565b600060018216611b9857600160801b611baa565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611be9576080611be4826ffff97272373d413259a46990580e213a612b28565b901c90505b6004821615611c13576080611c0e826ffff2e50f5f656932ef12357cf3c7fdcc612b28565b901c90505b6008821615611c3d576080611c38826fffe5caca7e10e4e61c3624eaa0941cd0612b28565b901c90505b6010821615611c67576080611c62826fffcb9843d60f6159c9db58835c926644612b28565b901c90505b6020821615611c91576080611c8c826fff973b41fa98c081472e6896dfb254c0612b28565b901c90505b6040821615611cbb576080611cb6826fff2ea16466c96a3843ec78b326b52861612b28565b901c90505b6080821615611ce5576080611ce0826ffe5dee046a99a2a811c461f1969c3053612b28565b901c90505b610100821615611d10576080611d0b826ffcbe86c7900a88aedcffc83b479aa3a4612b28565b901c90505b610200821615611d3b576080611d36826ff987a7253ac413176f2b074cf7815e54612b28565b901c90505b610400821615611d66576080611d61826ff3392b0822b70005940c7a398e4b70f3612b28565b901c90505b610800821615611d91576080611d8c826fe7159475a2c29b7443b29c7fa6e889d9612b28565b901c90505b611000821615611dbc576080611db7826fd097f3bdfd2022b8845ad8f792aa5825612b28565b901c90505b612000821615611de7576080611de2826fa9f746462d870fdf8a65dc1f90e061e5612b28565b901c90505b614000821615611e12576080611e0d826f70d869a156d2a1b890bb3df62baf32f7612b28565b901c90505b618000821615611e3d576080611e38826f31be135f97d08fd981231505542fcfa6612b28565b901c90505b62010000821615611e69576080611e64826f09aa508b5b7a84e1c677de54f3e99bc9612b28565b901c90505b60008460020b1315611e8457611e8181600019612b47565b90505b611e9364010000000082612b5b565b15611e9f576001611ea2565b60005b611eb39060ff16602083901c612b6f565b949350505050565b8015611f3e576000848152600360209081526040808320546001600160a01b038916845260029092528220805491929091611ef7908490612b87565b909155505060008481526003602090815260408083208690556001600160a01b0388168352600290915281208054859290611f33908490612ae7565b90915550611f8f9050565b8115611f8f576000848152600360209081526040808320546001600160a01b038916845260029092528220805491929091611f7a908490612b87565b90915550506000848152600360205260408120555b6001600160a01b0385166000908152600160209081526040808320546002909252909120541315611ff15760405162461bcd60e51b815260206004820152600c60248201526b1b1c0818d85c081b1a5b5a5d60a21b6044820152606401610490565b5050505050565b60006001600160ff1b03821115611a525760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610490565b600080821215611a525760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610490565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091018252602080820180516001600160e01b03166323b872dd60e01b1790528251808401909352600783526629aa261032b93960c91b9083015261115d91869190600090612135908490849061218f565b80519091501561218a57808060200190518101906121539190612868565b61218a5760405162461bcd60e51b815260206004820152600860248201526714d5130819985a5b60c21b6044820152606401610490565b505050565b6060833b6121ce5760405162461bcd60e51b815260206004820152600c60248201526b1b9bdb8b58dbdb9d1c9858dd60a21b6044820152606401610490565b600080856001600160a01b03166000866040516121eb9190612bf2565b60006040518083038185875af1925050503d8060008114612228576040519150601f19603f3d011682016040523d82523d6000602084013e61222d565b606091505b509150915061109f828286606083156122475750816105fe565b8251156122575782518084602001fd5b8160405162461bcd60e51b81526004016104909190612c0e565b6001600160a01b038116811461228657600080fd5b50565b60006020828403121561229b57600080fd5b81356105fe81612271565b600080604083850312156122b957600080fd5b82356122c481612271565b946020939093013593505050565b6000806000606084860312156122e757600080fd5b83356122f281612271565b9250602084013561230281612271565b929592945050506040919091013590565b604051610140810167ffffffffffffffff8111828210171561234557634e487b7160e01b600052604160045260246000fd5b60405290565b8060020b811461228657600080fd5b80356123658161234b565b919050565b801515811461228657600080fd5b600060c0828403121561238a57600080fd5b60405160c0810181811067ffffffffffffffff821117156123bb57634e487b7160e01b600052604160045260246000fd5b60405290508082356123cc81612271565b815260208301356123dc8161234b565b602082015260408301356123ef8161234b565b604082015260608381013590820152608083013561240c8161236a565b608082015260a092830135920191909152919050565b600060c0828403121561243457600080fd5b6105fe8383612378565b600060e0828403121561245057600080fd5b60405160e0810181811067ffffffffffffffff8211171561248157634e487b7160e01b600052604160045260246000fd5b604052905080823561249281612271565b815260208301356124a28161236a565b60208201526040838101359082015260608301356124bf81612271565b606082015260808301356124d28161234b565b60808201526124e360a0840161235a565b60a082015260c083013560c08201525092915050565b600060e0828403121561250b57600080fd5b6105fe838361243e565b6000806000806000610140868803121561252e57600080fd5b853561253981612271565b9450602086013561254981612271565b935060408601356125598161234b565b925060608601356125698161234b565b91506125788760808801612378565b90509295509295909350565b6000806000806000610160868803121561259d57600080fd5b85356125a881612271565b945060208601356125b881612271565b935060408601356125c88161234b565b925060608601356125d88161234b565b9150612578876080880161243e565b600080600080608085870312156125fd57600080fd5b843561260881612271565b9350602085013561261881612271565b925060408501356126288161234b565b915060608501356126388161234b565b939692955090935050565b600080600080600060a0868803121561265b57600080fd5b853561266681612271565b945060208601356126768161234b565b935060408601356126868161234b565b925060608601359150608086013561269d8161236a565b809150509295509295909350565b6000602082840312156126bd57600080fd5b81516105fe81612271565b6000606082840312156126da57600080fd5b6040516060810181811067ffffffffffffffff8211171561270b57634e487b7160e01b600052604160045260246000fd5b604052825161271981612271565b815260208301516127298161234b565b6020820152604083015160ff8116811461274257600080fd5b60408201529392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03838116908316818110156127845761278461274e565b039392505050565b6001600160a01b03939093168352600291820b6020840152900b604082015260600190565b80516123658161236a565b80516001600160801b038116811461236557600080fd5b600061014082840312156127e657600080fd5b6127ee612313565b6127f7836127b1565b8152612805602084016127bc565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b60006020828403121561287a57600080fd5b81516105fe8161236a565b6bffffffffffffffffffffffff19606096871b8116825294861b851660148201529290941b909216602882015260e891821b603c82015291901b603f82015260420190565b60008160020b8360020b6000821282627fffff038213811516156128f0576128f061274e565b82627fffff190382128116156129085761290861274e565b50019392505050565b634e487b7160e01b600052601260045260246000fd5b60008160020b8360020b8061293e5761293e612911565b627fffff198214600019821416156129585761295861274e565b90059392505050565b6001600160a01b03949094168452600292830b6020850152910b60408301526001600160801b0316606082015260800190565b6000602082840312156129a657600080fd5b5051919050565b6000602082840312156129bf57600080fd5b81516105fe8161234b565b60008160020b8360020b6000811281627fffff19018312811516156129f1576129f161274e565b81627fffff018313811615612a0857612a0861274e565b5090039392505050565b60008160020b627fffff19811415612a2c57612a2c61274e565b60000392915050565b6000600160ff1b821415612a4b57612a4b61274e565b5060000390565b60006001600160a01b03828116848216808303821115612a7457612a7461274e565b01949350505050565b600080600080600060a08688031215612a9557600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b03949094168452600292830b6020850152910b6040830152606082015260800190565b600080821280156001600160ff1b0384900385131615612b0957612b0961274e565b600160ff1b8390038412811615612b2257612b2261274e565b50500190565b6000816000190483118215151615612b4257612b4261274e565b500290565b600082612b5657612b56612911565b500490565b600082612b6a57612b6a612911565b500690565b60008219821115612b8257612b8261274e565b500190565b60008083128015600160ff1b850184121615612ba557612ba561274e565b6001600160ff1b0384018313811615612bc057612bc061274e565b50500390565b60005b83811015612be1578181015183820152602001612bc9565b8381111561115d5750506000910152565b60008251612c04818460208701612bc6565b9190910192915050565b6020815260008251806020840152612c2d816040850160208701612bc6565b601f01601f1916919091016040019291505056fea2646970667358221220c03ff67bed83301d0ebd5490ecc86947201dbee2d42dc96da47e35eedefa2fc264736f6c63430008090033" . parse () . expect ("invalid bytecode")
        });
    pub struct PeripheryOld<M>(ethers::contract::Contract<M>);
    impl<M> Clone for PeripheryOld<M> {
        fn clone(&self) -> Self {
            PeripheryOld(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for PeripheryOld<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for PeripheryOld<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(PeripheryOld))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> PeripheryOld<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), PERIPHERYOLD_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                PERIPHERYOLD_ABI.clone(),
                PERIPHERYOLD_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `_lpMarginCaps` (0x05b20d18) function"]
        pub fn _lp_margin_caps(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, I256> {
            self.0
                .method_hash([5, 178, 13, 24], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_lpMarginCumulatives` (0xe5a97cf0) function"]
        pub fn _lp_margin_cumulatives(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, I256> {
            self.0
                .method_hash([229, 169, 124, 240], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_weth` (0xa1764595) function"]
        pub fn weth(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([161, 118, 69, 149], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCurrentTick` (0x040a5dc1) function"]
        pub fn get_current_tick(
            &self,
            margin_engine: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, i32> {
            self.0
                .method_hash([4, 10, 93, 193], margin_engine)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLiquidityForNotional` (0x2676938b) function"]
        pub fn get_liquidity_for_notional(
            &self,
            sqrt_ratio_ax96: ethers::core::types::U256,
            sqrt_ratio_bx96: ethers::core::types::U256,
            notional_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, u128> {
            self.0
                .method_hash(
                    [38, 118, 147, 139],
                    (sqrt_ratio_ax96, sqrt_ratio_bx96, notional_amount),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lpMarginCaps` (0x782085b5) function"]
        pub fn lp_margin_caps(
            &self,
            vamm: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, I256> {
            self.0
                .method_hash([120, 32, 133, 181], vamm)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lpMarginCumulatives` (0x61b02452) function"]
        pub fn lp_margin_cumulatives(
            &self,
            vamm: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, I256> {
            self.0
                .method_hash([97, 176, 36, 82], vamm)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `mintOrBurn` (0x32e00daf) function"]
        pub fn mint_or_burn(
            &self,
            params: MintOrBurnParams,
        ) -> ethers::contract::builders::ContractCall<M, I256> {
            self.0
                .method_hash([50, 224, 13, 175], (params,))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rolloverWithMint` (0x78f70b87) function"]
        pub fn rollover_with_mint(
            &self,
            margin_engine: ethers::core::types::Address,
            owner: ethers::core::types::Address,
            tick_lower: i32,
            tick_upper: i32,
            params_new_position: MintOrBurnParams,
        ) -> ethers::contract::builders::ContractCall<M, I256> {
            self.0
                .method_hash(
                    [120, 247, 11, 135],
                    (
                        margin_engine,
                        owner,
                        tick_lower,
                        tick_upper,
                        params_new_position,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rolloverWithSwap` (0x8d8e0983) function"]
        pub fn rollover_with_swap(
            &self,
            margin_engine: ethers::core::types::Address,
            owner: ethers::core::types::Address,
            tick_lower: i32,
            tick_upper: i32,
            params_new_position: SwapPeripheryParams,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (I256, I256, ethers::core::types::U256, I256, I256, i32),
        > {
            self.0
                .method_hash(
                    [141, 142, 9, 131],
                    (
                        margin_engine,
                        owner,
                        tick_lower,
                        tick_upper,
                        params_new_position,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setLPMarginCap` (0x1b44093d) function"]
        pub fn set_lp_margin_cap(
            &self,
            vamm: ethers::core::types::Address,
            lp_margin_cap_new: I256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([27, 68, 9, 61], (vamm, lp_margin_cap_new))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setLPMarginCumulative` (0xefa7c3d6) function"]
        pub fn set_lp_margin_cumulative(
            &self,
            vamm: ethers::core::types::Address,
            lp_margin_cumulative: I256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([239, 167, 195, 214], (vamm, lp_margin_cumulative))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `settlePositionAndWithdrawMargin` (0xc19be595) function"]
        pub fn settle_position_and_withdraw_margin(
            &self,
            margin_engine: ethers::core::types::Address,
            owner: ethers::core::types::Address,
            tick_lower: i32,
            tick_upper: i32,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [193, 155, 229, 149],
                    (margin_engine, owner, tick_lower, tick_upper),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `swap` (0x34907e34) function"]
        pub fn swap(
            &self,
            params: SwapPeripheryParams,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (I256, I256, ethers::core::types::U256, I256, I256, i32),
        > {
            self.0
                .method_hash([52, 144, 126, 52], (params,))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updatePositionMargin` (0xf9396407) function"]
        pub fn update_position_margin(
            &self,
            margin_engine: ethers::core::types::Address,
            tick_lower: i32,
            tick_upper: i32,
            margin_delta: I256,
            fully_withdraw: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [249, 57, 100, 7],
                    (
                        margin_engine,
                        tick_lower,
                        tick_upper,
                        margin_delta,
                        fully_withdraw,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MarginCap` event"]
        pub fn margin_cap_filter(&self) -> ethers::contract::builders::Event<M, MarginCapFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, MarginCapFilter> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for PeripheryOld<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedIncomeReturnedZero` with signature `AavePoolGetReserveNormalizedIncomeReturnedZero()` and selector `[189, 137, 197, 175]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedIncomeReturnedZero",
        abi = "AavePoolGetReserveNormalizedIncomeReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedIncomeReturnedZero;
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedVariableDebtReturnedZero` with signature `AavePoolGetReserveNormalizedVariableDebtReturnedZero()` and selector `[195, 75, 105, 61]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedVariableDebtReturnedZero",
        abi = "AavePoolGetReserveNormalizedVariableDebtReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedVariableDebtReturnedZero;
    #[doc = "Custom Error type `CTokenExchangeRateReturnedZero` with signature `CTokenExchangeRateReturnedZero()` and selector `[36, 152, 138, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CTokenExchangeRateReturnedZero",
        abi = "CTokenExchangeRateReturnedZero()"
    )]
    pub struct CTokenExchangeRateReturnedZero;
    #[doc = "Custom Error type `CanOnlyTradeIfUnlocked` with signature `CanOnlyTradeIfUnlocked(bool)` and selector `[121, 143, 4, 94]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CanOnlyTradeIfUnlocked", abi = "CanOnlyTradeIfUnlocked(bool)")]
    pub struct CanOnlyTradeIfUnlocked {
        pub unlocked: bool,
    }
    #[doc = "Custom Error type `CannotLiquidate` with signature `CannotLiquidate()` and selector `[191, 135, 199, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CannotLiquidate", abi = "CannotLiquidate()")]
    pub struct CannotLiquidate;
    #[doc = "Custom Error type `CannotSettleBeforeMaturity` with signature `CannotSettleBeforeMaturity()` and selector `[2, 230, 23, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CannotSettleBeforeMaturity",
        abi = "CannotSettleBeforeMaturity()"
    )]
    pub struct CannotSettleBeforeMaturity;
    #[doc = "Custom Error type `DebugError` with signature `DebugError(uint256,uint256)` and selector `[186, 113, 84, 234]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "DebugError", abi = "DebugError(uint256,uint256)")]
    pub struct DebugError {
        pub x: ethers::core::types::U256,
        pub y: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `ExpectedOppositeSigns` with signature `ExpectedOppositeSigns(int256,int256)` and selector `[35, 133, 254, 176]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedOppositeSigns",
        abi = "ExpectedOppositeSigns(int256,int256)"
    )]
    pub struct ExpectedOppositeSigns {
        pub amount_0: I256,
        pub amount_1: I256,
    }
    #[doc = "Custom Error type `ExpectedSqrtPriceZeroBeforeInit` with signature `ExpectedSqrtPriceZeroBeforeInit(uint160)` and selector `[162, 248, 112, 60]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedSqrtPriceZeroBeforeInit",
        abi = "ExpectedSqrtPriceZeroBeforeInit(uint160)"
    )]
    pub struct ExpectedSqrtPriceZeroBeforeInit {
        pub sqrt_price_x96: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `IRSNotionalAmountSpecifiedMustBeNonZero` with signature `IRSNotionalAmountSpecifiedMustBeNonZero()` and selector `[63, 82, 15, 170]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "IRSNotionalAmountSpecifiedMustBeNonZero",
        abi = "IRSNotionalAmountSpecifiedMustBeNonZero()"
    )]
    pub struct IRSNotionalAmountSpecifiedMustBeNonZero;
    #[doc = "Custom Error type `InvalidMarginDelta` with signature `InvalidMarginDelta()` and selector `[138, 204, 109, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "InvalidMarginDelta", abi = "InvalidMarginDelta()")]
    pub struct InvalidMarginDelta;
    #[doc = "Custom Error type `LidoGetPooledEthBySharesReturnedZero` with signature `LidoGetPooledEthBySharesReturnedZero()` and selector `[255, 248, 220, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LidoGetPooledEthBySharesReturnedZero",
        abi = "LidoGetPooledEthBySharesReturnedZero()"
    )]
    pub struct LidoGetPooledEthBySharesReturnedZero;
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInBurn` with signature `LiquidityDeltaMustBePositiveInBurn(uint128)` and selector `[192, 157, 38, 9]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInBurn",
        abi = "LiquidityDeltaMustBePositiveInBurn(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInBurn {
        pub amount: u128,
    }
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInMint` with signature `LiquidityDeltaMustBePositiveInMint(uint128)` and selector `[216, 69, 154, 52]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInMint",
        abi = "LiquidityDeltaMustBePositiveInMint(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInMint {
        pub amount: u128,
    }
    #[doc = "Custom Error type `MarginLessThanMinimum` with signature `MarginLessThanMinimum(int256)` and selector `[107, 79, 255, 36]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "MarginLessThanMinimum", abi = "MarginLessThanMinimum(int256)")]
    pub struct MarginLessThanMinimum {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMet` with signature `MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)` and selector `[67, 242, 131, 33]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMet",
        abi = "MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)"
    )]
    pub struct MarginRequirementNotMet {
        pub margin_requirement: I256,
        pub tick: i32,
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMetFCM` with signature `MarginRequirementNotMetFCM(int256)` and selector `[65, 213, 168, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMetFCM",
        abi = "MarginRequirementNotMetFCM(int256)"
    )]
    pub struct MarginRequirementNotMetFCM {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `NotEnoughFunds` with signature `NotEnoughFunds(uint256,uint256)` and selector `[140, 144, 83, 104]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "NotEnoughFunds", abi = "NotEnoughFunds(uint256,uint256)")]
    pub struct NotEnoughFunds {
        pub requested: ethers::core::types::U256,
        pub available: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `OOO` with signature `OOO()` and selector `[191, 198, 99, 148]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OOO", abi = "OOO()")]
    pub struct OOO;
    #[doc = "Custom Error type `OnlyFCM` with signature `OnlyFCM()` and selector `[93, 138, 54, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyFCM", abi = "OnlyFCM()")]
    pub struct OnlyFCM;
    #[doc = "Custom Error type `OnlyMarginEngine` with signature `OnlyMarginEngine()` and selector `[40, 52, 210, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyMarginEngine", abi = "OnlyMarginEngine()")]
    pub struct OnlyMarginEngine;
    #[doc = "Custom Error type `OnlyOwnerCanUpdatePosition` with signature `OnlyOwnerCanUpdatePosition()` and selector `[125, 164, 92, 231]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "OnlyOwnerCanUpdatePosition",
        abi = "OnlyOwnerCanUpdatePosition()"
    )]
    pub struct OnlyOwnerCanUpdatePosition;
    #[doc = "Custom Error type `OnlyVAMM` with signature `OnlyVAMM()` and selector `[123, 216, 216, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyVAMM", abi = "OnlyVAMM()")]
    pub struct OnlyVAMM;
    #[doc = "Custom Error type `PositionNetZero` with signature `PositionNetZero()` and selector `[89, 32, 46, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNetZero", abi = "PositionNetZero()")]
    pub struct PositionNetZero;
    #[doc = "Custom Error type `PositionNotSettled` with signature `PositionNotSettled()` and selector `[90, 108, 31, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNotSettled", abi = "PositionNotSettled()")]
    pub struct PositionNotSettled;
    #[doc = "Custom Error type `RocketPoolGetEthValueReturnedZero` with signature `RocketPoolGetEthValueReturnedZero()` and selector `[18, 70, 158, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "RocketPoolGetEthValueReturnedZero",
        abi = "RocketPoolGetEthValueReturnedZero()"
    )]
    pub struct RocketPoolGetEthValueReturnedZero;
    #[doc = "Custom Error type `WithdrawalExceedsCurrentMargin` with signature `WithdrawalExceedsCurrentMargin()` and selector `[41, 126, 28, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "WithdrawalExceedsCurrentMargin",
        abi = "WithdrawalExceedsCurrentMargin()"
    )]
    pub struct WithdrawalExceedsCurrentMargin;
    #[doc = "Custom Error type `closeToOrBeyondMaturity` with signature `closeToOrBeyondMaturity()` and selector `[83, 173, 234, 156]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "closeToOrBeyondMaturity", abi = "closeToOrBeyondMaturity()")]
    pub struct closeToOrBeyondMaturity;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum PeripheryOldErrors {
        AavePoolGetReserveNormalizedIncomeReturnedZero(
            AavePoolGetReserveNormalizedIncomeReturnedZero,
        ),
        AavePoolGetReserveNormalizedVariableDebtReturnedZero(
            AavePoolGetReserveNormalizedVariableDebtReturnedZero,
        ),
        CTokenExchangeRateReturnedZero(CTokenExchangeRateReturnedZero),
        CanOnlyTradeIfUnlocked(CanOnlyTradeIfUnlocked),
        CannotLiquidate(CannotLiquidate),
        CannotSettleBeforeMaturity(CannotSettleBeforeMaturity),
        DebugError(DebugError),
        ExpectedOppositeSigns(ExpectedOppositeSigns),
        ExpectedSqrtPriceZeroBeforeInit(ExpectedSqrtPriceZeroBeforeInit),
        IRSNotionalAmountSpecifiedMustBeNonZero(IRSNotionalAmountSpecifiedMustBeNonZero),
        InvalidMarginDelta(InvalidMarginDelta),
        LidoGetPooledEthBySharesReturnedZero(LidoGetPooledEthBySharesReturnedZero),
        LiquidityDeltaMustBePositiveInBurn(LiquidityDeltaMustBePositiveInBurn),
        LiquidityDeltaMustBePositiveInMint(LiquidityDeltaMustBePositiveInMint),
        MarginLessThanMinimum(MarginLessThanMinimum),
        MarginRequirementNotMet(MarginRequirementNotMet),
        MarginRequirementNotMetFCM(MarginRequirementNotMetFCM),
        NotEnoughFunds(NotEnoughFunds),
        OOO(OOO),
        OnlyFCM(OnlyFCM),
        OnlyMarginEngine(OnlyMarginEngine),
        OnlyOwnerCanUpdatePosition(OnlyOwnerCanUpdatePosition),
        OnlyVAMM(OnlyVAMM),
        PositionNetZero(PositionNetZero),
        PositionNotSettled(PositionNotSettled),
        RocketPoolGetEthValueReturnedZero(RocketPoolGetEthValueReturnedZero),
        WithdrawalExceedsCurrentMargin(WithdrawalExceedsCurrentMargin),
        closeToOrBeyondMaturity(closeToOrBeyondMaturity),
    }
    impl ethers::core::abi::AbiDecode for PeripheryOldErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok (decoded) = < AavePoolGetReserveNormalizedIncomeReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (PeripheryOldErrors :: AavePoolGetReserveNormalizedIncomeReturnedZero (decoded)) }
            if let Ok (decoded) = < AavePoolGetReserveNormalizedVariableDebtReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (PeripheryOldErrors :: AavePoolGetReserveNormalizedVariableDebtReturnedZero (decoded)) }
            if let Ok(decoded) =
                <CTokenExchangeRateReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldErrors::CTokenExchangeRateReturnedZero(decoded));
            }
            if let Ok(decoded) =
                <CanOnlyTradeIfUnlocked as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::CanOnlyTradeIfUnlocked(decoded));
            }
            if let Ok(decoded) =
                <CannotLiquidate as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::CannotLiquidate(decoded));
            }
            if let Ok(decoded) =
                <CannotSettleBeforeMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::CannotSettleBeforeMaturity(decoded));
            }
            if let Ok(decoded) = <DebugError as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::DebugError(decoded));
            }
            if let Ok(decoded) =
                <ExpectedOppositeSigns as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::ExpectedOppositeSigns(decoded));
            }
            if let Ok(decoded) =
                <ExpectedSqrtPriceZeroBeforeInit as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldErrors::ExpectedSqrtPriceZeroBeforeInit(decoded));
            }
            if let Ok(decoded) =
                <IRSNotionalAmountSpecifiedMustBeNonZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldErrors::IRSNotionalAmountSpecifiedMustBeNonZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <InvalidMarginDelta as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::InvalidMarginDelta(decoded));
            }
            if let Ok(decoded) =
                <LidoGetPooledEthBySharesReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldErrors::LidoGetPooledEthBySharesReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInBurn as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldErrors::LiquidityDeltaMustBePositiveInBurn(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInMint as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldErrors::LiquidityDeltaMustBePositiveInMint(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <MarginLessThanMinimum as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::MarginLessThanMinimum(decoded));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMet as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::MarginRequirementNotMet(decoded));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMetFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::MarginRequirementNotMetFCM(decoded));
            }
            if let Ok(decoded) =
                <NotEnoughFunds as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::NotEnoughFunds(decoded));
            }
            if let Ok(decoded) = <OOO as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(PeripheryOldErrors::OOO(decoded));
            }
            if let Ok(decoded) = <OnlyFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(PeripheryOldErrors::OnlyFCM(decoded));
            }
            if let Ok(decoded) =
                <OnlyMarginEngine as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::OnlyMarginEngine(decoded));
            }
            if let Ok(decoded) =
                <OnlyOwnerCanUpdatePosition as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::OnlyOwnerCanUpdatePosition(decoded));
            }
            if let Ok(decoded) = <OnlyVAMM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(PeripheryOldErrors::OnlyVAMM(decoded));
            }
            if let Ok(decoded) =
                <PositionNetZero as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::PositionNetZero(decoded));
            }
            if let Ok(decoded) =
                <PositionNotSettled as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::PositionNotSettled(decoded));
            }
            if let Ok(decoded) =
                <RocketPoolGetEthValueReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldErrors::RocketPoolGetEthValueReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <WithdrawalExceedsCurrentMargin as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldErrors::WithdrawalExceedsCurrentMargin(decoded));
            }
            if let Ok(decoded) =
                <closeToOrBeyondMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldErrors::closeToOrBeyondMaturity(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for PeripheryOldErrors {
        fn encode(self) -> Vec<u8> {
            match self {
                PeripheryOldErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(element) => {
                    element.encode()
                }
                PeripheryOldErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                    element,
                ) => element.encode(),
                PeripheryOldErrors::CTokenExchangeRateReturnedZero(element) => element.encode(),
                PeripheryOldErrors::CanOnlyTradeIfUnlocked(element) => element.encode(),
                PeripheryOldErrors::CannotLiquidate(element) => element.encode(),
                PeripheryOldErrors::CannotSettleBeforeMaturity(element) => element.encode(),
                PeripheryOldErrors::DebugError(element) => element.encode(),
                PeripheryOldErrors::ExpectedOppositeSigns(element) => element.encode(),
                PeripheryOldErrors::ExpectedSqrtPriceZeroBeforeInit(element) => element.encode(),
                PeripheryOldErrors::IRSNotionalAmountSpecifiedMustBeNonZero(element) => {
                    element.encode()
                }
                PeripheryOldErrors::InvalidMarginDelta(element) => element.encode(),
                PeripheryOldErrors::LidoGetPooledEthBySharesReturnedZero(element) => {
                    element.encode()
                }
                PeripheryOldErrors::LiquidityDeltaMustBePositiveInBurn(element) => element.encode(),
                PeripheryOldErrors::LiquidityDeltaMustBePositiveInMint(element) => element.encode(),
                PeripheryOldErrors::MarginLessThanMinimum(element) => element.encode(),
                PeripheryOldErrors::MarginRequirementNotMet(element) => element.encode(),
                PeripheryOldErrors::MarginRequirementNotMetFCM(element) => element.encode(),
                PeripheryOldErrors::NotEnoughFunds(element) => element.encode(),
                PeripheryOldErrors::OOO(element) => element.encode(),
                PeripheryOldErrors::OnlyFCM(element) => element.encode(),
                PeripheryOldErrors::OnlyMarginEngine(element) => element.encode(),
                PeripheryOldErrors::OnlyOwnerCanUpdatePosition(element) => element.encode(),
                PeripheryOldErrors::OnlyVAMM(element) => element.encode(),
                PeripheryOldErrors::PositionNetZero(element) => element.encode(),
                PeripheryOldErrors::PositionNotSettled(element) => element.encode(),
                PeripheryOldErrors::RocketPoolGetEthValueReturnedZero(element) => element.encode(),
                PeripheryOldErrors::WithdrawalExceedsCurrentMargin(element) => element.encode(),
                PeripheryOldErrors::closeToOrBeyondMaturity(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for PeripheryOldErrors {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                PeripheryOldErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(element) => {
                    element.fmt(f)
                }
                PeripheryOldErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                    element,
                ) => element.fmt(f),
                PeripheryOldErrors::CTokenExchangeRateReturnedZero(element) => element.fmt(f),
                PeripheryOldErrors::CanOnlyTradeIfUnlocked(element) => element.fmt(f),
                PeripheryOldErrors::CannotLiquidate(element) => element.fmt(f),
                PeripheryOldErrors::CannotSettleBeforeMaturity(element) => element.fmt(f),
                PeripheryOldErrors::DebugError(element) => element.fmt(f),
                PeripheryOldErrors::ExpectedOppositeSigns(element) => element.fmt(f),
                PeripheryOldErrors::ExpectedSqrtPriceZeroBeforeInit(element) => element.fmt(f),
                PeripheryOldErrors::IRSNotionalAmountSpecifiedMustBeNonZero(element) => {
                    element.fmt(f)
                }
                PeripheryOldErrors::InvalidMarginDelta(element) => element.fmt(f),
                PeripheryOldErrors::LidoGetPooledEthBySharesReturnedZero(element) => element.fmt(f),
                PeripheryOldErrors::LiquidityDeltaMustBePositiveInBurn(element) => element.fmt(f),
                PeripheryOldErrors::LiquidityDeltaMustBePositiveInMint(element) => element.fmt(f),
                PeripheryOldErrors::MarginLessThanMinimum(element) => element.fmt(f),
                PeripheryOldErrors::MarginRequirementNotMet(element) => element.fmt(f),
                PeripheryOldErrors::MarginRequirementNotMetFCM(element) => element.fmt(f),
                PeripheryOldErrors::NotEnoughFunds(element) => element.fmt(f),
                PeripheryOldErrors::OOO(element) => element.fmt(f),
                PeripheryOldErrors::OnlyFCM(element) => element.fmt(f),
                PeripheryOldErrors::OnlyMarginEngine(element) => element.fmt(f),
                PeripheryOldErrors::OnlyOwnerCanUpdatePosition(element) => element.fmt(f),
                PeripheryOldErrors::OnlyVAMM(element) => element.fmt(f),
                PeripheryOldErrors::PositionNetZero(element) => element.fmt(f),
                PeripheryOldErrors::PositionNotSettled(element) => element.fmt(f),
                PeripheryOldErrors::RocketPoolGetEthValueReturnedZero(element) => element.fmt(f),
                PeripheryOldErrors::WithdrawalExceedsCurrentMargin(element) => element.fmt(f),
                PeripheryOldErrors::closeToOrBeyondMaturity(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedIncomeReturnedZero> for PeripheryOldErrors {
        fn from(var: AavePoolGetReserveNormalizedIncomeReturnedZero) -> Self {
            PeripheryOldErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(var)
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedVariableDebtReturnedZero>
        for PeripheryOldErrors
    {
        fn from(var: AavePoolGetReserveNormalizedVariableDebtReturnedZero) -> Self {
            PeripheryOldErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(var)
        }
    }
    impl ::std::convert::From<CTokenExchangeRateReturnedZero> for PeripheryOldErrors {
        fn from(var: CTokenExchangeRateReturnedZero) -> Self {
            PeripheryOldErrors::CTokenExchangeRateReturnedZero(var)
        }
    }
    impl ::std::convert::From<CanOnlyTradeIfUnlocked> for PeripheryOldErrors {
        fn from(var: CanOnlyTradeIfUnlocked) -> Self {
            PeripheryOldErrors::CanOnlyTradeIfUnlocked(var)
        }
    }
    impl ::std::convert::From<CannotLiquidate> for PeripheryOldErrors {
        fn from(var: CannotLiquidate) -> Self {
            PeripheryOldErrors::CannotLiquidate(var)
        }
    }
    impl ::std::convert::From<CannotSettleBeforeMaturity> for PeripheryOldErrors {
        fn from(var: CannotSettleBeforeMaturity) -> Self {
            PeripheryOldErrors::CannotSettleBeforeMaturity(var)
        }
    }
    impl ::std::convert::From<DebugError> for PeripheryOldErrors {
        fn from(var: DebugError) -> Self {
            PeripheryOldErrors::DebugError(var)
        }
    }
    impl ::std::convert::From<ExpectedOppositeSigns> for PeripheryOldErrors {
        fn from(var: ExpectedOppositeSigns) -> Self {
            PeripheryOldErrors::ExpectedOppositeSigns(var)
        }
    }
    impl ::std::convert::From<ExpectedSqrtPriceZeroBeforeInit> for PeripheryOldErrors {
        fn from(var: ExpectedSqrtPriceZeroBeforeInit) -> Self {
            PeripheryOldErrors::ExpectedSqrtPriceZeroBeforeInit(var)
        }
    }
    impl ::std::convert::From<IRSNotionalAmountSpecifiedMustBeNonZero> for PeripheryOldErrors {
        fn from(var: IRSNotionalAmountSpecifiedMustBeNonZero) -> Self {
            PeripheryOldErrors::IRSNotionalAmountSpecifiedMustBeNonZero(var)
        }
    }
    impl ::std::convert::From<InvalidMarginDelta> for PeripheryOldErrors {
        fn from(var: InvalidMarginDelta) -> Self {
            PeripheryOldErrors::InvalidMarginDelta(var)
        }
    }
    impl ::std::convert::From<LidoGetPooledEthBySharesReturnedZero> for PeripheryOldErrors {
        fn from(var: LidoGetPooledEthBySharesReturnedZero) -> Self {
            PeripheryOldErrors::LidoGetPooledEthBySharesReturnedZero(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInBurn> for PeripheryOldErrors {
        fn from(var: LiquidityDeltaMustBePositiveInBurn) -> Self {
            PeripheryOldErrors::LiquidityDeltaMustBePositiveInBurn(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInMint> for PeripheryOldErrors {
        fn from(var: LiquidityDeltaMustBePositiveInMint) -> Self {
            PeripheryOldErrors::LiquidityDeltaMustBePositiveInMint(var)
        }
    }
    impl ::std::convert::From<MarginLessThanMinimum> for PeripheryOldErrors {
        fn from(var: MarginLessThanMinimum) -> Self {
            PeripheryOldErrors::MarginLessThanMinimum(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMet> for PeripheryOldErrors {
        fn from(var: MarginRequirementNotMet) -> Self {
            PeripheryOldErrors::MarginRequirementNotMet(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMetFCM> for PeripheryOldErrors {
        fn from(var: MarginRequirementNotMetFCM) -> Self {
            PeripheryOldErrors::MarginRequirementNotMetFCM(var)
        }
    }
    impl ::std::convert::From<NotEnoughFunds> for PeripheryOldErrors {
        fn from(var: NotEnoughFunds) -> Self {
            PeripheryOldErrors::NotEnoughFunds(var)
        }
    }
    impl ::std::convert::From<OOO> for PeripheryOldErrors {
        fn from(var: OOO) -> Self {
            PeripheryOldErrors::OOO(var)
        }
    }
    impl ::std::convert::From<OnlyFCM> for PeripheryOldErrors {
        fn from(var: OnlyFCM) -> Self {
            PeripheryOldErrors::OnlyFCM(var)
        }
    }
    impl ::std::convert::From<OnlyMarginEngine> for PeripheryOldErrors {
        fn from(var: OnlyMarginEngine) -> Self {
            PeripheryOldErrors::OnlyMarginEngine(var)
        }
    }
    impl ::std::convert::From<OnlyOwnerCanUpdatePosition> for PeripheryOldErrors {
        fn from(var: OnlyOwnerCanUpdatePosition) -> Self {
            PeripheryOldErrors::OnlyOwnerCanUpdatePosition(var)
        }
    }
    impl ::std::convert::From<OnlyVAMM> for PeripheryOldErrors {
        fn from(var: OnlyVAMM) -> Self {
            PeripheryOldErrors::OnlyVAMM(var)
        }
    }
    impl ::std::convert::From<PositionNetZero> for PeripheryOldErrors {
        fn from(var: PositionNetZero) -> Self {
            PeripheryOldErrors::PositionNetZero(var)
        }
    }
    impl ::std::convert::From<PositionNotSettled> for PeripheryOldErrors {
        fn from(var: PositionNotSettled) -> Self {
            PeripheryOldErrors::PositionNotSettled(var)
        }
    }
    impl ::std::convert::From<RocketPoolGetEthValueReturnedZero> for PeripheryOldErrors {
        fn from(var: RocketPoolGetEthValueReturnedZero) -> Self {
            PeripheryOldErrors::RocketPoolGetEthValueReturnedZero(var)
        }
    }
    impl ::std::convert::From<WithdrawalExceedsCurrentMargin> for PeripheryOldErrors {
        fn from(var: WithdrawalExceedsCurrentMargin) -> Self {
            PeripheryOldErrors::WithdrawalExceedsCurrentMargin(var)
        }
    }
    impl ::std::convert::From<closeToOrBeyondMaturity> for PeripheryOldErrors {
        fn from(var: closeToOrBeyondMaturity) -> Self {
            PeripheryOldErrors::closeToOrBeyondMaturity(var)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "MarginCap", abi = "MarginCap(address,int256)")]
    pub struct MarginCapFilter {
        pub vamm: ethers::core::types::Address,
        pub lp_margin_cap_new: I256,
    }
    #[doc = "Container type for all input parameters for the `_lpMarginCaps` function with signature `_lpMarginCaps(address)` and selector `[5, 178, 13, 24]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "_lpMarginCaps", abi = "_lpMarginCaps(address)")]
    pub struct _LpMarginCapsCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `_lpMarginCumulatives` function with signature `_lpMarginCumulatives(address)` and selector `[229, 169, 124, 240]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "_lpMarginCumulatives", abi = "_lpMarginCumulatives(address)")]
    pub struct _LpMarginCumulativesCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `_weth` function with signature `_weth()` and selector `[161, 118, 69, 149]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "_weth", abi = "_weth()")]
    pub struct WethCall;
    #[doc = "Container type for all input parameters for the `getCurrentTick` function with signature `getCurrentTick(address)` and selector `[4, 10, 93, 193]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getCurrentTick", abi = "getCurrentTick(address)")]
    pub struct GetCurrentTickCall {
        pub margin_engine: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getLiquidityForNotional` function with signature `getLiquidityForNotional(uint160,uint160,uint256)` and selector `[38, 118, 147, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getLiquidityForNotional",
        abi = "getLiquidityForNotional(uint160,uint160,uint256)"
    )]
    pub struct GetLiquidityForNotionalCall {
        pub sqrt_ratio_ax96: ethers::core::types::U256,
        pub sqrt_ratio_bx96: ethers::core::types::U256,
        pub notional_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `lpMarginCaps` function with signature `lpMarginCaps(address)` and selector `[120, 32, 133, 181]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "lpMarginCaps", abi = "lpMarginCaps(address)")]
    pub struct LpMarginCapsCall {
        pub vamm: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `lpMarginCumulatives` function with signature `lpMarginCumulatives(address)` and selector `[97, 176, 36, 82]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "lpMarginCumulatives", abi = "lpMarginCumulatives(address)")]
    pub struct LpMarginCumulativesCall {
        pub vamm: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `mintOrBurn` function with signature `mintOrBurn((address,int24,int24,uint256,bool,int256))` and selector `[50, 224, 13, 175]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "mintOrBurn",
        abi = "mintOrBurn((address,int24,int24,uint256,bool,int256))"
    )]
    pub struct MintOrBurnCall {
        pub params: MintOrBurnParams,
    }
    #[doc = "Container type for all input parameters for the `rolloverWithMint` function with signature `rolloverWithMint(address,address,int24,int24,(address,int24,int24,uint256,bool,int256))` and selector `[120, 247, 11, 135]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "rolloverWithMint",
        abi = "rolloverWithMint(address,address,int24,int24,(address,int24,int24,uint256,bool,int256))"
    )]
    pub struct RolloverWithMintCall {
        pub margin_engine: ethers::core::types::Address,
        pub owner: ethers::core::types::Address,
        pub tick_lower: i32,
        pub tick_upper: i32,
        pub params_new_position: MintOrBurnParams,
    }
    #[doc = "Container type for all input parameters for the `rolloverWithSwap` function with signature `rolloverWithSwap(address,address,int24,int24,(address,bool,uint256,uint160,int24,int24,uint256))` and selector `[141, 142, 9, 131]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "rolloverWithSwap",
        abi = "rolloverWithSwap(address,address,int24,int24,(address,bool,uint256,uint160,int24,int24,uint256))"
    )]
    pub struct RolloverWithSwapCall {
        pub margin_engine: ethers::core::types::Address,
        pub owner: ethers::core::types::Address,
        pub tick_lower: i32,
        pub tick_upper: i32,
        pub params_new_position: SwapPeripheryParams,
    }
    #[doc = "Container type for all input parameters for the `setLPMarginCap` function with signature `setLPMarginCap(address,int256)` and selector `[27, 68, 9, 61]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "setLPMarginCap", abi = "setLPMarginCap(address,int256)")]
    pub struct SetLPMarginCapCall {
        pub vamm: ethers::core::types::Address,
        pub lp_margin_cap_new: I256,
    }
    #[doc = "Container type for all input parameters for the `setLPMarginCumulative` function with signature `setLPMarginCumulative(address,int256)` and selector `[239, 167, 195, 214]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "setLPMarginCumulative",
        abi = "setLPMarginCumulative(address,int256)"
    )]
    pub struct SetLPMarginCumulativeCall {
        pub vamm: ethers::core::types::Address,
        pub lp_margin_cumulative: I256,
    }
    #[doc = "Container type for all input parameters for the `settlePositionAndWithdrawMargin` function with signature `settlePositionAndWithdrawMargin(address,address,int24,int24)` and selector `[193, 155, 229, 149]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "settlePositionAndWithdrawMargin",
        abi = "settlePositionAndWithdrawMargin(address,address,int24,int24)"
    )]
    pub struct SettlePositionAndWithdrawMarginCall {
        pub margin_engine: ethers::core::types::Address,
        pub owner: ethers::core::types::Address,
        pub tick_lower: i32,
        pub tick_upper: i32,
    }
    #[doc = "Container type for all input parameters for the `swap` function with signature `swap((address,bool,uint256,uint160,int24,int24,uint256))` and selector `[52, 144, 126, 52]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "swap",
        abi = "swap((address,bool,uint256,uint160,int24,int24,uint256))"
    )]
    pub struct SwapCall {
        pub params: SwapPeripheryParams,
    }
    #[doc = "Container type for all input parameters for the `updatePositionMargin` function with signature `updatePositionMargin(address,int24,int24,int256,bool)` and selector `[249, 57, 100, 7]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "updatePositionMargin",
        abi = "updatePositionMargin(address,int24,int24,int256,bool)"
    )]
    pub struct UpdatePositionMarginCall {
        pub margin_engine: ethers::core::types::Address,
        pub tick_lower: i32,
        pub tick_upper: i32,
        pub margin_delta: I256,
        pub fully_withdraw: bool,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum PeripheryOldCalls {
        _LpMarginCaps(_LpMarginCapsCall),
        _LpMarginCumulatives(_LpMarginCumulativesCall),
        Weth(WethCall),
        GetCurrentTick(GetCurrentTickCall),
        GetLiquidityForNotional(GetLiquidityForNotionalCall),
        LpMarginCaps(LpMarginCapsCall),
        LpMarginCumulatives(LpMarginCumulativesCall),
        MintOrBurn(MintOrBurnCall),
        RolloverWithMint(RolloverWithMintCall),
        RolloverWithSwap(RolloverWithSwapCall),
        SetLPMarginCap(SetLPMarginCapCall),
        SetLPMarginCumulative(SetLPMarginCumulativeCall),
        SettlePositionAndWithdrawMargin(SettlePositionAndWithdrawMarginCall),
        Swap(SwapCall),
        UpdatePositionMargin(UpdatePositionMarginCall),
    }
    impl ethers::core::abi::AbiDecode for PeripheryOldCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <_LpMarginCapsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::_LpMarginCaps(decoded));
            }
            if let Ok(decoded) =
                <_LpMarginCumulativesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::_LpMarginCumulatives(decoded));
            }
            if let Ok(decoded) = <WethCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(PeripheryOldCalls::Weth(decoded));
            }
            if let Ok(decoded) =
                <GetCurrentTickCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::GetCurrentTick(decoded));
            }
            if let Ok(decoded) =
                <GetLiquidityForNotionalCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::GetLiquidityForNotional(decoded));
            }
            if let Ok(decoded) =
                <LpMarginCapsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::LpMarginCaps(decoded));
            }
            if let Ok(decoded) =
                <LpMarginCumulativesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::LpMarginCumulatives(decoded));
            }
            if let Ok(decoded) =
                <MintOrBurnCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::MintOrBurn(decoded));
            }
            if let Ok(decoded) =
                <RolloverWithMintCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::RolloverWithMint(decoded));
            }
            if let Ok(decoded) =
                <RolloverWithSwapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::RolloverWithSwap(decoded));
            }
            if let Ok(decoded) =
                <SetLPMarginCapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::SetLPMarginCap(decoded));
            }
            if let Ok(decoded) =
                <SetLPMarginCumulativeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::SetLPMarginCumulative(decoded));
            }
            if let Ok(decoded) =
                <SettlePositionAndWithdrawMarginCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PeripheryOldCalls::SettlePositionAndWithdrawMargin(decoded));
            }
            if let Ok(decoded) = <SwapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(PeripheryOldCalls::Swap(decoded));
            }
            if let Ok(decoded) =
                <UpdatePositionMarginCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PeripheryOldCalls::UpdatePositionMargin(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for PeripheryOldCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                PeripheryOldCalls::_LpMarginCaps(element) => element.encode(),
                PeripheryOldCalls::_LpMarginCumulatives(element) => element.encode(),
                PeripheryOldCalls::Weth(element) => element.encode(),
                PeripheryOldCalls::GetCurrentTick(element) => element.encode(),
                PeripheryOldCalls::GetLiquidityForNotional(element) => element.encode(),
                PeripheryOldCalls::LpMarginCaps(element) => element.encode(),
                PeripheryOldCalls::LpMarginCumulatives(element) => element.encode(),
                PeripheryOldCalls::MintOrBurn(element) => element.encode(),
                PeripheryOldCalls::RolloverWithMint(element) => element.encode(),
                PeripheryOldCalls::RolloverWithSwap(element) => element.encode(),
                PeripheryOldCalls::SetLPMarginCap(element) => element.encode(),
                PeripheryOldCalls::SetLPMarginCumulative(element) => element.encode(),
                PeripheryOldCalls::SettlePositionAndWithdrawMargin(element) => element.encode(),
                PeripheryOldCalls::Swap(element) => element.encode(),
                PeripheryOldCalls::UpdatePositionMargin(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for PeripheryOldCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                PeripheryOldCalls::_LpMarginCaps(element) => element.fmt(f),
                PeripheryOldCalls::_LpMarginCumulatives(element) => element.fmt(f),
                PeripheryOldCalls::Weth(element) => element.fmt(f),
                PeripheryOldCalls::GetCurrentTick(element) => element.fmt(f),
                PeripheryOldCalls::GetLiquidityForNotional(element) => element.fmt(f),
                PeripheryOldCalls::LpMarginCaps(element) => element.fmt(f),
                PeripheryOldCalls::LpMarginCumulatives(element) => element.fmt(f),
                PeripheryOldCalls::MintOrBurn(element) => element.fmt(f),
                PeripheryOldCalls::RolloverWithMint(element) => element.fmt(f),
                PeripheryOldCalls::RolloverWithSwap(element) => element.fmt(f),
                PeripheryOldCalls::SetLPMarginCap(element) => element.fmt(f),
                PeripheryOldCalls::SetLPMarginCumulative(element) => element.fmt(f),
                PeripheryOldCalls::SettlePositionAndWithdrawMargin(element) => element.fmt(f),
                PeripheryOldCalls::Swap(element) => element.fmt(f),
                PeripheryOldCalls::UpdatePositionMargin(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<_LpMarginCapsCall> for PeripheryOldCalls {
        fn from(var: _LpMarginCapsCall) -> Self {
            PeripheryOldCalls::_LpMarginCaps(var)
        }
    }
    impl ::std::convert::From<_LpMarginCumulativesCall> for PeripheryOldCalls {
        fn from(var: _LpMarginCumulativesCall) -> Self {
            PeripheryOldCalls::_LpMarginCumulatives(var)
        }
    }
    impl ::std::convert::From<WethCall> for PeripheryOldCalls {
        fn from(var: WethCall) -> Self {
            PeripheryOldCalls::Weth(var)
        }
    }
    impl ::std::convert::From<GetCurrentTickCall> for PeripheryOldCalls {
        fn from(var: GetCurrentTickCall) -> Self {
            PeripheryOldCalls::GetCurrentTick(var)
        }
    }
    impl ::std::convert::From<GetLiquidityForNotionalCall> for PeripheryOldCalls {
        fn from(var: GetLiquidityForNotionalCall) -> Self {
            PeripheryOldCalls::GetLiquidityForNotional(var)
        }
    }
    impl ::std::convert::From<LpMarginCapsCall> for PeripheryOldCalls {
        fn from(var: LpMarginCapsCall) -> Self {
            PeripheryOldCalls::LpMarginCaps(var)
        }
    }
    impl ::std::convert::From<LpMarginCumulativesCall> for PeripheryOldCalls {
        fn from(var: LpMarginCumulativesCall) -> Self {
            PeripheryOldCalls::LpMarginCumulatives(var)
        }
    }
    impl ::std::convert::From<MintOrBurnCall> for PeripheryOldCalls {
        fn from(var: MintOrBurnCall) -> Self {
            PeripheryOldCalls::MintOrBurn(var)
        }
    }
    impl ::std::convert::From<RolloverWithMintCall> for PeripheryOldCalls {
        fn from(var: RolloverWithMintCall) -> Self {
            PeripheryOldCalls::RolloverWithMint(var)
        }
    }
    impl ::std::convert::From<RolloverWithSwapCall> for PeripheryOldCalls {
        fn from(var: RolloverWithSwapCall) -> Self {
            PeripheryOldCalls::RolloverWithSwap(var)
        }
    }
    impl ::std::convert::From<SetLPMarginCapCall> for PeripheryOldCalls {
        fn from(var: SetLPMarginCapCall) -> Self {
            PeripheryOldCalls::SetLPMarginCap(var)
        }
    }
    impl ::std::convert::From<SetLPMarginCumulativeCall> for PeripheryOldCalls {
        fn from(var: SetLPMarginCumulativeCall) -> Self {
            PeripheryOldCalls::SetLPMarginCumulative(var)
        }
    }
    impl ::std::convert::From<SettlePositionAndWithdrawMarginCall> for PeripheryOldCalls {
        fn from(var: SettlePositionAndWithdrawMarginCall) -> Self {
            PeripheryOldCalls::SettlePositionAndWithdrawMargin(var)
        }
    }
    impl ::std::convert::From<SwapCall> for PeripheryOldCalls {
        fn from(var: SwapCall) -> Self {
            PeripheryOldCalls::Swap(var)
        }
    }
    impl ::std::convert::From<UpdatePositionMarginCall> for PeripheryOldCalls {
        fn from(var: UpdatePositionMarginCall) -> Self {
            PeripheryOldCalls::UpdatePositionMargin(var)
        }
    }
    #[doc = "Container type for all return fields from the `_lpMarginCaps` function with signature `_lpMarginCaps(address)` and selector `[5, 178, 13, 24]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct _LpMarginCapsReturn(pub I256);
    #[doc = "Container type for all return fields from the `_lpMarginCumulatives` function with signature `_lpMarginCumulatives(address)` and selector `[229, 169, 124, 240]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct _LpMarginCumulativesReturn(pub I256);
    #[doc = "Container type for all return fields from the `_weth` function with signature `_weth()` and selector `[161, 118, 69, 149]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct WethReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `getCurrentTick` function with signature `getCurrentTick(address)` and selector `[4, 10, 93, 193]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetCurrentTickReturn {
        pub current_tick: i32,
    }
    #[doc = "Container type for all return fields from the `getLiquidityForNotional` function with signature `getLiquidityForNotional(uint160,uint160,uint256)` and selector `[38, 118, 147, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetLiquidityForNotionalReturn {
        pub liquidity: u128,
    }
    #[doc = "Container type for all return fields from the `lpMarginCaps` function with signature `lpMarginCaps(address)` and selector `[120, 32, 133, 181]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct LpMarginCapsReturn(pub I256);
    #[doc = "Container type for all return fields from the `lpMarginCumulatives` function with signature `lpMarginCumulatives(address)` and selector `[97, 176, 36, 82]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct LpMarginCumulativesReturn(pub I256);
    #[doc = "Container type for all return fields from the `mintOrBurn` function with signature `mintOrBurn((address,int24,int24,uint256,bool,int256))` and selector `[50, 224, 13, 175]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct MintOrBurnReturn {
        pub position_margin_requirement: I256,
    }
    #[doc = "Container type for all return fields from the `rolloverWithMint` function with signature `rolloverWithMint(address,address,int24,int24,(address,int24,int24,uint256,bool,int256))` and selector `[120, 247, 11, 135]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RolloverWithMintReturn {
        pub new_position_margin_requirement: I256,
    }
    #[doc = "Container type for all return fields from the `rolloverWithSwap` function with signature `rolloverWithSwap(address,address,int24,int24,(address,bool,uint256,uint160,int24,int24,uint256))` and selector `[141, 142, 9, 131]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RolloverWithSwapReturn {
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
        pub margin_requirement: I256,
        pub tick_after: i32,
    }
    #[doc = "Container type for all return fields from the `swap` function with signature `swap((address,bool,uint256,uint160,int24,int24,uint256))` and selector `[52, 144, 126, 52]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct SwapReturn {
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
        pub margin_requirement: I256,
        pub tick_after: i32,
    }
}
