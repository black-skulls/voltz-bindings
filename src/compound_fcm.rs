pub use compound_fcm::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod compound_fcm {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    pub use super::super::shared_types::*;
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CompoundFCM was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static COMPOUNDFCM_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedIncomeReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedVariableDebtReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CTokenExchangeRateReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\",\"components\":[]}],\"type\":\"error\",\"name\":\"CanOnlyTradeIfUnlocked\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotLiquidate\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotSettleBeforeMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"DebugError\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedOppositeSigns\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedSqrtPriceZeroBeforeInit\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IRSNotionalAmountSpecifiedMustBeNonZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidMarginDelta\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"LidoGetPooledEthBySharesReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInBurn\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInMint\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginLessThanMinimum\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMet\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMetFCM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"NotEnoughFunds\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OOO\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyFCM\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyMarginEngine\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyOwnerCanUpdatePosition\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyVAMM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathSD59x18__FromIntOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathSD59x18__FromIntUnderflow\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathSD59x18__MulOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__FromUintOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMath__MulDivOverflow\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNetZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNotSettled\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"RocketPoolGetEthValueReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"WithdrawalExceedsCurrentMargin\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"closeToOrBeyondMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AdminChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"BeaconUpgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"marginInScaledYieldBearingTokens\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"fixedTokenBalance\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"variableTokenBalance\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FCMTraderUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"desiredNotional\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FullyCollateralisedSwap\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"desiredNotional\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FullyCollateralisedUnwind\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Initialized\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Upgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"int256\",\"name\":\"settlementCashflow\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"fcmPositionSettlement\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"traderAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getTraderMarginInCTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginInYieldBearingTokens\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getTraderWithYieldBearingAssets\",\"outputs\":[{\"internalType\":\"struct TraderWithYieldBearingAssets.Info\",\"name\":\"traderInfo\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"marginInScaledYieldBearingTokens\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenBalance\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenBalance\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"__vamm\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract IMarginEngine\",\"name\":\"__marginEngine\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initiateFullyCollateralisedFixedTakerSwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"marginEngine\",\"outputs\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rateOracle\",\"outputs\":[{\"internalType\":\"contract IRateOracle\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setPausability\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"settleTrader\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"traderSettlementCashflow\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"traders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginInScaledYieldBearingTokens\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenBalance\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenBalance\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"marginDeltaInUnderlyingTokens\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferMarginToMarginEngineTrader\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalToUnwind\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unwindFullyCollateralisedFixedTakerSwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"upgradeTo\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"upgradeToAndCall\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vamm\",\"outputs\":[{\"internalType\":\"contract IVAMM\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static COMPOUNDFCM_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60a0604052306080523480156200001557600080fd5b50606454610100900460ff1615808015620000375750606454600160ff909116105b8062000067575062000054306200014160201b62001b951760201c565b15801562000067575060645460ff166001145b620000cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6064805460ff191660011790558015620000f3576064805461ff0019166101001790555b80156200013a576064805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000150565b6001600160a01b03163b151590565b6080516134b6620001886000396000818161092c0152818161096c01528181610d9801528181610dd80152610e6b01526134b66000f3fe6080604052600436106101295760003560e01c806369e527da116100ab5780639a2f48f51161006f5780639a2f48f514610386578063bc61f02d146103db578063c1ccfa6814610411578063e098372c14610431578063ebc9b02e1461044f578063f2fde38b1461046457600080fd5b806369e527da146102ae578063715018a6146102cc5780638da5cb5b146102e157806392a88fa2146102ff57806398f4b1b21461036857600080fd5b8063485cc955116100f2578063485cc955146102075780634f1ef2861461022757806352d1902d1461023a57806355468a8b1461025d5780635c975abb1461027d57600080fd5b80624006e01461012e57806303742274146101655780630d211954146101a55780632495a599146101c75780633659cfe6146101e7575b600080fd5b34801561013a57600080fd5b506001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017157600080fd5b50610185610180366004612e9b565b610484565b60408051948552602085019390935291830152606082015260800161015c565b3480156101b157600080fd5b506101c56101c0366004612ed9565b6108d8565b005b3480156101d357600080fd5b50600454610148906001600160a01b031681565b3480156101f357600080fd5b506101c5610202366004612ef6565b610921565b34801561021357600080fd5b506101c5610222366004612f13565b610a01565b6101c5610235366004612f57565b610d8d565b34801561024657600080fd5b5061024f610e5e565b60405190815260200161015c565b34801561026957600080fd5b50610185610278366004612e9b565b610f11565b34801561028957600080fd5b5060045461029e90600160a01b900460ff1681565b604051901515815260200161015c565b3480156102ba57600080fd5b506031546001600160a01b0316610148565b3480156102d857600080fd5b506101c56112b9565b3480156102ed57600080fd5b506097546001600160a01b0316610148565b34801561030b57600080fd5b5061034661031a366004612ef6565b600360208190526000918252604090912080546001820154600283015492909301549092919060ff1684565b604080519485526020850193909352918301521515606082015260800161015c565b34801561037457600080fd5b506000546001600160a01b0316610148565b34801561039257600080fd5b506103a66103a1366004612ef6565b6112cd565b60405161015c919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b3480156103e757600080fd5b5061024f6103f6366004612ef6565b6001600160a01b031660009081526003602052604090205490565b34801561041d57600080fd5b506101c561042c36600461301b565b61134a565b34801561043d57600080fd5b506002546001600160a01b0316610148565b34801561045b57600080fd5b5061024f611570565b34801561047057600080fd5b506101c561047f366004612ef6565b611b1f565b600080600080600460149054906101000a900460ff16156104c05760405162461bcd60e51b81526004016104b790613047565b60405180910390fd5b3360009081526003602052604081206002810154909112156105245760405162461bcd60e51b815260206004820152601a60248201527f5472616465722056542062616c616e636520706f73697469766500000000000060448201526064016104b7565b600160ff1b8160020154136105735760405162461bcd60e51b81526020600482015260156024820152742a3930b232b9102b2a103130b630b731b29036b4b760591b60448201526064016104b7565b8681600201546105829061307d565b10156105d05760405162461bcd60e51b815260206004820152601d60248201527f6e6f74696f6e616c20746f20756e77696e64203e206e6f74696f6e616c00000060448201526064016104b7565b60006040518060a00160405280306001600160a01b031681526020016105f58a611ba4565b6105fe9061307d565b81526001600160a01b038916602082015260015460409091019061062b90600160a01b900460020b61309a565b600290810b8252600154600160a01b9004810b602090920191909152546040516333bac73760e11b81529192506001600160a01b0316906367758e6e906106769084906004016130bd565b60a060405180830381600087803b15801561069057600080fd5b505af11580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190613109565b509298509096509450925060008512156107185760405162461bcd60e51b815260206004820152601160248201527056542064656c7461206e6567617469766560781b60448201526064016104b7565b600080610726848989611c12565b915091506000603160009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561077a57600080fd5b505afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190613149565b905060006107c08983611c4d565b905060008187600001546107d49190613162565b80885590506107e4858583611c64565b600154600454610803916001600160a01b03918216913391168c611da4565b60315461081a906001600160a01b03163384611e15565b604080518e81526001600160a01b038e1660208201529081018a9052606081018c9052608081018b905260a0810189905233907f6acfc9440f6cbb04b516cd21204df4411f56488a61afeb29b0f25531809ccdb29060c00160405180910390a28654600188015460028901546040805193845260208401929092529082015233907f85f7a754cbb9fd93ae8f2b8606ccb555835a917e569742c9d2e818e3073c8c9d9060600160405180910390a25050505050505092959194509250565b6001546001600160a01b0316331461090357604051630a0d349f60e21b815260040160405180910390fd5b60048054911515600160a01b0260ff60a01b19909216919091179055565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561096a5760405162461bcd60e51b81526004016104b790613179565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109b360008051602061343a833981519152546001600160a01b031690565b6001600160a01b0316146109d95760405162461bcd60e51b81526004016104b7906131c5565b6109e281611e45565b604080516000808252602082019092526109fe91839190611e4d565b50565b606454610100900460ff1615808015610a215750606454600160ff909116105b80610a3b5750303b158015610a3b575060645460ff166001145b610a9e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104b7565b6064805460ff191660011790558015610ac1576064805461ff0019166101001790555b600280546001600160a01b038086166001600160a01b03199283161790925560018054928516929091168217905560408051634c7a58d960e11b815290516398f4b1b291600480820192602092909190829003018186803b158015610b2557600080fd5b505afa158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190613211565b600080546001600160a01b0319166001600160a01b0392831617905560015460408051632495a59960e01b815290519190921691632495a599916004808301926020929190829003018186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee9190613211565b600480546001600160a01b0319166001600160a01b039283161781556000546040805163ccf3eb9f60e01b81529051919093169263ccf3eb9f9281810192602092909190829003018186803b158015610c4657600080fd5b505afa158015610c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7e9190613211565b603180546001600160a01b0319166001600160a01b03928316179055600254604080516334324e9f60e21b81529051919092169163d0c93a7c916004808301926020929190829003018186803b158015610cd757600080fd5b505afa158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f919061322e565b6001805462ffffff92909216600160a01b0262ffffff60a01b19909216919091179055610d3a611fc7565b610d42611ff6565b8015610d88576064805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610dd65760405162461bcd60e51b81526004016104b790613179565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e1f60008051602061343a833981519152546001600160a01b031690565b6001600160a01b031614610e455760405162461bcd60e51b81526004016104b7906131c5565b610e4e82611e45565b610e5a82826001611e4d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610efe5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016104b7565b5060008051602061343a83398151915290565b600080600080600460149054906101000a900460ff1615610f445760405162461bcd60e51b81526004016104b790613047565b85610f805760405162461bcd60e51b815260206004820152600c60248201526b06e6f74696f6e616c203d20360a41b60448201526064016104b7565b60006040518060a00160405280306001600160a01b03168152602001610fa589611ba4565b81526001600160a01b0388166020820152600154604090910190610fd290600160a01b900460020b61309a565b600290810b8252600154600160a01b9004810b602090920191909152546040516333bac73760e11b81529192506001600160a01b0316906367758e6e9061101d9084906004016130bd565b60a060405180830381600087803b15801561103757600080fd5b505af115801561104b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106f9190613109565b509297509095509350915060008413156110bb5760405162461bcd60e51b815260206004820152600d60248201526c2b2a103232b63a309039b4b3b760991b60448201526064016104b7565b600160ff1b84136110fd5760405162461bcd60e51b815260206004820152600c60248201526b2b2a103232b63a309036b4b760a11b60448201526064016104b7565b336000908152600360209081526040808320603154825163bd6d894d60e01b815292519194936001600160a01b039091169263bd6d894d926004808301939282900301818787803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111899190613149565b905060006111a08261119a8961307d565b90611c4d565b905060008184600001546111b49190613251565b80855590506111c4848a8a611c12565b50506031546111de906001600160a01b0316333085611da4565b6001546004546111fd916001600160a01b03918216913391168a611da4565b604080518c81526001600160a01b038c166020820152908101889052606081018a90526080810189905260a0810187905233907f3d4e16ab2c61731f475c393d983859da40555d340dbe3b2a164616aca9e75f989060c00160405180910390a28354600185015460028601546040805193845260208401929092529082015233907f85f7a754cbb9fd93ae8f2b8606ccb555835a917e569742c9d2e818e3073c8c9d9060600160405180910390a2505050505092959194509250565b6112c161201d565b6112cb6000612077565b565b6112fa60405180608001604052806000815260200160008152602001600081526020016000151581525090565b506001600160a01b031660009081526003602081815260409283902083516080810185528154815260018201549281019290925260028101549382019390935291015460ff161515606082015290565b6001546001600160a01b0316331461137557604051630a0d349f60e21b815260040160405180910390fd5b600454600160a01b900460ff161561139f5760405162461bcd60e51b81526004016104b790613047565b600480546031546040516370a0823160e01b81526001600160a01b039182169381019390935283929116906370a082319060240160206040518083038186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190613149565b106114c75760315460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e390602401602060405180830381600087803b15801561146e57600080fd5b505af1158015611482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a69190613149565b156114b057600080fd5b600454610e5a906001600160a01b03168383611e15565b610e5a8261155d603160009054906101000a90046001600160a01b03166001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115569190613149565b8490611c4d565b6031546001600160a01b03169190611e15565b600061157a6120c9565b600160009054906101000a90046001600160a01b03166001600160a01b03166393edb4546040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c857600080fd5b505afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116009190613149565b111561161f576040516301730b8160e11b815260040160405180910390fd5b600454600160a01b900460ff16156116495760405162461bcd60e51b81526004016104b790613047565b33600090815260036020908152604080832060018082015460028301549154845163652c30b760e01b815294519396956118f29592946001600160a01b039092169263652c30b79260048083019392829003018186803b1580156116ac57600080fd5b505afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190613149565b600160009054906101000a90046001600160a01b03166001600160a01b03166393edb4546040518163ffffffff1660e01b815260040160206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190613149565b6000546001546040805163652c30b760e01b815290516001600160a01b03938416936325f258dd93169163652c30b7916004808301926020929190829003018186803b1580156117b957600080fd5b505afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190613149565b600160009054906101000a90046001600160a01b03166001600160a01b03166393edb4546040518163ffffffff1660e01b815260040160206040518083038186803b15801561183f57600080fd5b505afa158015611853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118779190613149565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381600087803b1580156118b557600080fd5b505af11580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190613149565b6120d9565b905061191b82600101546119059061307d565b83600201546119139061307d565b849190611c12565b50506000811215611a0157600160ff1b81136119625760405162461bcd60e51b815260206004820152600660248201526529a19036b4b760d11b60448201526064016104b7565b6031546040805163182df0f560e01b815290516000926001600160a01b03169163182df0f5916004808301926020929190829003018186803b1580156119a757600080fd5b505afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df9190613149565b905060006119f08261119a8561307d565b84546119fc9190613162565b845550505b815460008355611a1083612142565b603154611a27906001600160a01b03163383611e15565b6000821315611a955760015460405163efcfc3f960e01b8152336004820152602481018490526001600160a01b039091169063efcfc3f990604401600060405180830381600087803b158015611a7c57600080fd5b505af1158015611a90573d6000803e3d6000fd5b505050505b60405182815233907f2761931c2b8dc26fc26290447a831f72789013b635b9d8af518a0ff79bda796f9060200160405180910390a28254600184015460028501546040805193845260208401929092529082015233907f85f7a754cbb9fd93ae8f2b8606ccb555835a917e569742c9d2e818e3073c8c9d9060600160405180910390a25091505090565b611b2761201d565b6001600160a01b038116611b8c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b6109fe81612077565b6001600160a01b03163b151590565b60006001600160ff1b03821115611c0e5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016104b7565b5090565b600080838560010154611c259190613269565b9150828560020154611c379190613269565b6001860183905560029095018590555093915050565b6000611c5b83836000612199565b90505b92915050565b6000821315611ca05760405162461bcd60e51b81526020600482015260086024820152672b2a211039b4b3b760c11b60448201526064016104b7565b600160ff1b8213611cdd5760405162461bcd60e51b81526020600482015260076024820152662b2a211036b4b760c91b60448201526064016104b7565b6000611ce88361307d565b90506000611cf582611ba4565b611d06611d0185612240565b611ba4565b611d1091906132aa565b90506000611d1e86866122d5565b90506000811215611d9c57600160ff1b8113611d665760405162461bcd60e51b81526020600482015260076024820152662929a19036b4b760c91b60448201526064016104b7565b81611d708261307d565b1315611d9c57611d808184613269565b6040516341d5a83b60e01b81526004016104b791815260200190565b505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611e0f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125cf565b50505050565b6040516001600160a01b038316602482015260448101829052610d8890849063a9059cbb60e01b90606401611dd8565b6109fe61201d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611e8057610d8883612650565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb957600080fd5b505afa925050508015611ee9575060408051601f3d908101601f19168201909252611ee691810190613149565b60015b611f4c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104b7565b60008051602061343a8339815191528114611fbb5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104b7565b50610d888383836126ec565b606454610100900460ff16611fee5760405162461bcd60e51b81526004016104b7906132e9565b6112cb612711565b606454610100900460ff166112cb5760405162461bcd60e51b81526004016104b7906132e9565b6097546001600160a01b031633146112cb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006120d442612741565b905090565b6000806120e58761278e565b905060006120f28761278e565b9050600061210c6121056001898961280b565b84906128e0565b9050600061211a83876128e0565b905060006121288284613269565b670de0b6b3a764000090059b9a5050505050505050505050565b600381015460ff16156121895760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481cd95d1d1b1959608a1b60448201526064016104b7565b600301805460ff19166001179055565b6000826121d15760405162461bcd60e51b81526004016104b7906020808252600490820152630444956360e41b604082015260600190565b60006121de60028561334a565b9050838160018560018111156121f6576121f661336c565b1461220957670de0b6b3a7640000612217565b6b033b2e3c9fd0803ce80000005b6122219088613382565b61222b9190613251565b612235919061334a565b9150505b9392505050565b600080603160009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561229157600080fd5b505afa1580156122a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c99190613149565b905061223983826129a5565b6000806122e18461278e565b905060006122ee8461278e565b905060006124108361240b60018060009054906101000a90046001600160a01b03166001600160a01b031663652c30b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561234857600080fd5b505afa15801561235c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123809190613149565b600160009054906101000a90046001600160a01b03166001600160a01b03166393edb4546040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ce57600080fd5b505afa1580156123e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124069190613149565b61280b565b6128e0565b600080546001546040805163652c30b760e01b8152905194955092936001600160a01b03928316936325f258dd939092169163652c30b7916004808301926020929190829003018186803b15801561246757600080fd5b505afa15801561247b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249f9190613149565b600160009054906101000a90046001600160a01b03166001600160a01b03166393edb4546040518163ffffffff1660e01b815260040160206040518083038186803b1580156124ed57600080fd5b505afa158015612501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125259190613149565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381600087803b15801561256357600080fd5b505af1158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b9190613149565b905060006125a984836128e0565b905060006125b78285613269565b670de0b6b3a764000090059998505050505050505050565b60006125fb83836040518060400160405280600781526020016629aa261032b93960c91b8152506129b3565b805190915015610d88578080602001905181019061261991906133a1565b610d885760405162461bcd60e51b815260206004820152600860248201526714d5130819985a5b60c21b60448201526064016104b7565b6001600160a01b0381163b6126bd5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104b7565b60008051602061343a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126f583612a61565b6000825111806127025750805b15610d8857611e0f8383612aa1565b606454610100900460ff166127385760405162461bcd60e51b81526004016104b7906132e9565b6112cb33612077565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2182111561278057604051633492ffd960e01b8152600481018390526024016104b7565b50670de0b6b3a76400000290565b60007809392ee8e921d5d073aff322e62439fcf32d7f344649470f8f198212156127ce5760405163e608e18b60e01b8152600481018390526024016104b7565b7809392ee8e921d5d073aff322e62439fcf32d7f344649470f90821315612780576040516371f72a3160e01b8152600481018390526024016104b7565b60008282116128455760405162461bcd60e51b81526004016104b790602080825260049082015263453c3d5360e01b604082015260600190565b600061284f6120c9565b9050838110156128895760405162461bcd60e51b8152602060048201526005602482015264422e543c5360d81b60448201526064016104b7565b600085806128975750838210155b156128ad576128a68585613162565b90506128ba565b6128b78583613162565b90505b6128d668056bc75e2d631000006128d083612b95565b90612ba8565b9695505050505050565b6000600160ff1b8314806128f75750600160ff1b82145b1561291557604051630d01a11b60e21b815260040160405180910390fd5b60008060008512612926578461292b565b846000035b91506000841261293b5783612940565b836000035b9050600061294e8383612bbd565b90506001600160ff1b0381111561297b5760405163bf79e8d960e01b8152600481018290526024016104b7565b6000198087139086138082186001146129945782612999565b826000035b98975050505050505050565b6000611c5b83836000612c7f565b6060833b6129f25760405162461bcd60e51b815260206004820152600c60248201526b1b9bdb8b58dbdb9d1c9858dd60a21b60448201526064016104b7565b600080856001600160a01b0316600086604051612a0f91906133ea565b60006040518083038185875af1925050503d8060008114612a4c576040519150601f19603f3d011682016040523d82523d6000602084013e612a51565b606091505b50915091506128d6828286612d3c565b612a6a81612650565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612b095760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104b7565b600080846001600160a01b031684604051612b2491906133ea565b600060405180830381855af49150503d8060008114612b5f576040519150601f19603f3d011682016040523d82523d6000602084013e612b64565b606091505b5091509150612b8c828260405180606001604052806027815260200161345a60279139612d75565b95945050505050565b6000611c5e826a1a1601fc4ea7109e0000005b6000611c5b83670de0b6b3a764000084612d8e565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110612c015760405163698d9a0160e11b8152600481018290526024016104b7565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff811182612c3b5780670de0b6b3a7640000850401945050505050611c5e565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000831580612c8c575082155b15612c9957506000612239565b6001826001811115612cad57612cad61336c565b14612cc057670de0b6b3a7640000612cce565b6b033b2e3c9fd0803ce80000005b6001836001811115612ce257612ce261336c565b14612cff57612cfa6002670de0b6b3a764000061334a565b612d16565b612d1660026b033b2e3c9fd0803ce800000061334a565b612d208587613382565b612d2a9190613251565b612d34919061334a565b949350505050565b60608315612d4b575081612239565b825115612d5b5782518084602001fd5b8160405162461bcd60e51b81526004016104b79190613406565b60608315612d84575081612239565b6122398383612e5c565b600080806000198587098587029250828110838203039150508060001415612dc957838281612dbf57612dbf613334565b0492505050612239565b838110612df357604051631dcf306360e21b815260048101829052602481018590526044016104b7565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b815115612e6c5781518083602001fd5b8060405162461bcd60e51b81526004016104b79190613406565b6001600160a01b03811681146109fe57600080fd5b60008060408385031215612eae57600080fd5b823591506020830135612ec081612e86565b809150509250929050565b80151581146109fe57600080fd5b600060208284031215612eeb57600080fd5b813561223981612ecb565b600060208284031215612f0857600080fd5b813561223981612e86565b60008060408385031215612f2657600080fd5b8235612f3181612e86565b91506020830135612ec081612e86565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612f6a57600080fd5b8235612f7581612e86565b9150602083013567ffffffffffffffff80821115612f9257600080fd5b818501915085601f830112612fa657600080fd5b813581811115612fb857612fb8612f41565b604051601f8201601f19908116603f01168101908382118183101715612fe057612fe0612f41565b81604052828152886020848701011115612ff957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561302e57600080fd5b823561303981612e86565b946020939093013593505050565b60208082526006908201526514185d5cd95960d21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82141561309357613093613067565b5060000390565b60008160020b627fffff198114156130b4576130b4613067565b60000392915050565b600060a08201905060018060a01b038084511683526020840151602084015280604085015116604084015250606083015160020b6060830152608083015160020b608083015292915050565b600080600080600060a0868803121561312157600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b60006020828403121561315b57600080fd5b5051919050565b60008282101561317457613174613067565b500390565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561322357600080fd5b815161223981612e86565b60006020828403121561324057600080fd5b81518060020b811461223957600080fd5b6000821982111561326457613264613067565b500190565b600080821280156001600160ff1b038490038513161561328b5761328b613067565b600160ff1b83900384128116156132a4576132a4613067565b50500190565b60008083128015600160ff1b8501841216156132c8576132c8613067565b6001600160ff1b03840183138116156132e3576132e3613067565b50500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261336757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600081600019048311821515161561339c5761339c613067565b500290565b6000602082840312156133b357600080fd5b815161223981612ecb565b60005b838110156133d95781810151838201526020016133c1565b83811115611e0f5750506000910152565b600082516133fc8184602087016133be565b9190910192915050565b60208152600082518060208401526134258160408501602087016133be565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122083b1030f636f37c73800fb58375dbb762b54b95b4025248f5c578d2e5b0c61bc64736f6c63430008090033" . parse () . expect ("invalid bytecode")
        });
    pub struct CompoundFCM<M>(ethers::contract::Contract<M>);
    impl<M> Clone for CompoundFCM<M> {
        fn clone(&self) -> Self {
            CompoundFCM(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for CompoundFCM<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CompoundFCM<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CompoundFCM))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> CompoundFCM<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), COMPOUNDFCM_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                COMPOUNDFCM_ABI.clone(),
                COMPOUNDFCM_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `cToken` (0x69e527da) function"]
        pub fn c_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([105, 229, 39, 218], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getTraderMarginInCTokens` (0xbc61f02d) function"]
        pub fn get_trader_margin_in_c_tokens(
            &self,
            trader_address: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([188, 97, 240, 45], trader_address)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getTraderWithYieldBearingAssets` (0x9a2f48f5) function"]
        pub fn get_trader_with_yield_bearing_assets(
            &self,
            trader: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, Info> {
            self.0
                .method_hash([154, 47, 72, 245], trader)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `initialize` (0x485cc955) function"]
        pub fn initialize(
            &self,
            vamm: ethers::core::types::Address,
            margin_engine: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([72, 92, 201, 85], (vamm, margin_engine))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `initiateFullyCollateralisedFixedTakerSwap` (0x55468a8b) function"]
        pub fn initiate_fully_collateralised_fixed_taker_swap(
            &self,
            notional: ethers::core::types::U256,
            sqrt_price_limit_x96: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (I256, I256, ethers::core::types::U256, I256),
        > {
            self.0
                .method_hash([85, 70, 138, 139], (notional, sqrt_price_limit_x96))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `marginEngine` (0x004006e0) function"]
        pub fn margin_engine(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([0, 64, 6, 224], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `owner` (0x8da5cb5b) function"]
        pub fn owner(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `paused` (0x5c975abb) function"]
        pub fn paused(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([92, 151, 90, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `proxiableUUID` (0x52d1902d) function"]
        pub fn proxiable_uuid(&self) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([82, 209, 144, 45], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rateOracle` (0x98f4b1b2) function"]
        pub fn rate_oracle(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([152, 244, 177, 178], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `renounceOwnership` (0x715018a6) function"]
        pub fn renounce_ownership(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setPausability` (0x0d211954) function"]
        pub fn set_pausability(
            &self,
            state: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([13, 33, 25, 84], state)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `settleTrader` (0xebc9b02e) function"]
        pub fn settle_trader(&self) -> ethers::contract::builders::ContractCall<M, I256> {
            self.0
                .method_hash([235, 201, 176, 46], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `traders` (0x92a88fa2) function"]
        pub fn traders(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::U256, I256, I256, bool),
        > {
            self.0
                .method_hash([146, 168, 143, 162], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferMarginToMarginEngineTrader` (0xc1ccfa68) function"]
        pub fn transfer_margin_to_margin_engine_trader(
            &self,
            account: ethers::core::types::Address,
            margin_delta_in_underlying_tokens: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [193, 204, 250, 104],
                    (account, margin_delta_in_underlying_tokens),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnership` (0xf2fde38b) function"]
        pub fn transfer_ownership(
            &self,
            new_owner: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `underlyingToken` (0x2495a599) function"]
        pub fn underlying_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([36, 149, 165, 153], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `unwindFullyCollateralisedFixedTakerSwap` (0x03742274) function"]
        pub fn unwind_fully_collateralised_fixed_taker_swap(
            &self,
            notional_to_unwind: ethers::core::types::U256,
            sqrt_price_limit_x96: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (I256, I256, ethers::core::types::U256, I256),
        > {
            self.0
                .method_hash(
                    [3, 116, 34, 116],
                    (notional_to_unwind, sqrt_price_limit_x96),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `upgradeTo` (0x3659cfe6) function"]
        pub fn upgrade_to(
            &self,
            new_implementation: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([54, 89, 207, 230], new_implementation)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `upgradeToAndCall` (0x4f1ef286) function"]
        pub fn upgrade_to_and_call(
            &self,
            new_implementation: ethers::core::types::Address,
            data: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([79, 30, 242, 134], (new_implementation, data))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vamm` (0xe098372c) function"]
        pub fn vamm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([224, 152, 55, 44], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `AdminChanged` event"]
        pub fn admin_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AdminChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `BeaconUpgraded` event"]
        pub fn beacon_upgraded_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, BeaconUpgradedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `FCMTraderUpdate` event"]
        pub fn fcm_trader_update_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FcmtraderUpdateFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `FullyCollateralisedSwap` event"]
        pub fn fully_collateralised_swap_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FullyCollateralisedSwapFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `FullyCollateralisedUnwind` event"]
        pub fn fully_collateralised_unwind_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FullyCollateralisedUnwindFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Initialized` event"]
        pub fn initialized_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, InitializedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OwnershipTransferred` event"]
        pub fn ownership_transferred_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Upgraded` event"]
        pub fn upgraded_filter(&self) -> ethers::contract::builders::Event<M, UpgradedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `fcmPositionSettlement` event"]
        pub fn fcm_position_settlement_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FcmPositionSettlementFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, CompoundFCMEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for CompoundFCM<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedIncomeReturnedZero` with signature `AavePoolGetReserveNormalizedIncomeReturnedZero()` and selector `[189, 137, 197, 175]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedIncomeReturnedZero",
        abi = "AavePoolGetReserveNormalizedIncomeReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedIncomeReturnedZero;
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedVariableDebtReturnedZero` with signature `AavePoolGetReserveNormalizedVariableDebtReturnedZero()` and selector `[195, 75, 105, 61]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedVariableDebtReturnedZero",
        abi = "AavePoolGetReserveNormalizedVariableDebtReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedVariableDebtReturnedZero;
    #[doc = "Custom Error type `CTokenExchangeRateReturnedZero` with signature `CTokenExchangeRateReturnedZero()` and selector `[36, 152, 138, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CTokenExchangeRateReturnedZero",
        abi = "CTokenExchangeRateReturnedZero()"
    )]
    pub struct CTokenExchangeRateReturnedZero;
    #[doc = "Custom Error type `CanOnlyTradeIfUnlocked` with signature `CanOnlyTradeIfUnlocked(bool)` and selector `[121, 143, 4, 94]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CanOnlyTradeIfUnlocked", abi = "CanOnlyTradeIfUnlocked(bool)")]
    pub struct CanOnlyTradeIfUnlocked {
        pub unlocked: bool,
    }
    #[doc = "Custom Error type `CannotLiquidate` with signature `CannotLiquidate()` and selector `[191, 135, 199, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CannotLiquidate", abi = "CannotLiquidate()")]
    pub struct CannotLiquidate;
    #[doc = "Custom Error type `CannotSettleBeforeMaturity` with signature `CannotSettleBeforeMaturity()` and selector `[2, 230, 23, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CannotSettleBeforeMaturity",
        abi = "CannotSettleBeforeMaturity()"
    )]
    pub struct CannotSettleBeforeMaturity;
    #[doc = "Custom Error type `DebugError` with signature `DebugError(uint256,uint256)` and selector `[186, 113, 84, 234]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "DebugError", abi = "DebugError(uint256,uint256)")]
    pub struct DebugError {
        pub x: ethers::core::types::U256,
        pub y: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `ExpectedOppositeSigns` with signature `ExpectedOppositeSigns(int256,int256)` and selector `[35, 133, 254, 176]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedOppositeSigns",
        abi = "ExpectedOppositeSigns(int256,int256)"
    )]
    pub struct ExpectedOppositeSigns {
        pub amount_0: I256,
        pub amount_1: I256,
    }
    #[doc = "Custom Error type `ExpectedSqrtPriceZeroBeforeInit` with signature `ExpectedSqrtPriceZeroBeforeInit(uint160)` and selector `[162, 248, 112, 60]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedSqrtPriceZeroBeforeInit",
        abi = "ExpectedSqrtPriceZeroBeforeInit(uint160)"
    )]
    pub struct ExpectedSqrtPriceZeroBeforeInit {
        pub sqrt_price_x96: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `IRSNotionalAmountSpecifiedMustBeNonZero` with signature `IRSNotionalAmountSpecifiedMustBeNonZero()` and selector `[63, 82, 15, 170]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "IRSNotionalAmountSpecifiedMustBeNonZero",
        abi = "IRSNotionalAmountSpecifiedMustBeNonZero()"
    )]
    pub struct IRSNotionalAmountSpecifiedMustBeNonZero;
    #[doc = "Custom Error type `InvalidMarginDelta` with signature `InvalidMarginDelta()` and selector `[138, 204, 109, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "InvalidMarginDelta", abi = "InvalidMarginDelta()")]
    pub struct InvalidMarginDelta;
    #[doc = "Custom Error type `LidoGetPooledEthBySharesReturnedZero` with signature `LidoGetPooledEthBySharesReturnedZero()` and selector `[255, 248, 220, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LidoGetPooledEthBySharesReturnedZero",
        abi = "LidoGetPooledEthBySharesReturnedZero()"
    )]
    pub struct LidoGetPooledEthBySharesReturnedZero;
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInBurn` with signature `LiquidityDeltaMustBePositiveInBurn(uint128)` and selector `[192, 157, 38, 9]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInBurn",
        abi = "LiquidityDeltaMustBePositiveInBurn(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInBurn {
        pub amount: u128,
    }
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInMint` with signature `LiquidityDeltaMustBePositiveInMint(uint128)` and selector `[216, 69, 154, 52]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInMint",
        abi = "LiquidityDeltaMustBePositiveInMint(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInMint {
        pub amount: u128,
    }
    #[doc = "Custom Error type `MarginLessThanMinimum` with signature `MarginLessThanMinimum(int256)` and selector `[107, 79, 255, 36]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "MarginLessThanMinimum", abi = "MarginLessThanMinimum(int256)")]
    pub struct MarginLessThanMinimum {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMet` with signature `MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)` and selector `[67, 242, 131, 33]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMet",
        abi = "MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)"
    )]
    pub struct MarginRequirementNotMet {
        pub margin_requirement: I256,
        pub tick: i32,
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMetFCM` with signature `MarginRequirementNotMetFCM(int256)` and selector `[65, 213, 168, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMetFCM",
        abi = "MarginRequirementNotMetFCM(int256)"
    )]
    pub struct MarginRequirementNotMetFCM {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `NotEnoughFunds` with signature `NotEnoughFunds(uint256,uint256)` and selector `[140, 144, 83, 104]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "NotEnoughFunds", abi = "NotEnoughFunds(uint256,uint256)")]
    pub struct NotEnoughFunds {
        pub requested: ethers::core::types::U256,
        pub available: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `OOO` with signature `OOO()` and selector `[191, 198, 99, 148]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OOO", abi = "OOO()")]
    pub struct OOO;
    #[doc = "Custom Error type `OnlyFCM` with signature `OnlyFCM()` and selector `[93, 138, 54, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyFCM", abi = "OnlyFCM()")]
    pub struct OnlyFCM;
    #[doc = "Custom Error type `OnlyMarginEngine` with signature `OnlyMarginEngine()` and selector `[40, 52, 210, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyMarginEngine", abi = "OnlyMarginEngine()")]
    pub struct OnlyMarginEngine;
    #[doc = "Custom Error type `OnlyOwnerCanUpdatePosition` with signature `OnlyOwnerCanUpdatePosition()` and selector `[125, 164, 92, 231]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "OnlyOwnerCanUpdatePosition",
        abi = "OnlyOwnerCanUpdatePosition()"
    )]
    pub struct OnlyOwnerCanUpdatePosition;
    #[doc = "Custom Error type `OnlyVAMM` with signature `OnlyVAMM()` and selector `[123, 216, 216, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyVAMM", abi = "OnlyVAMM()")]
    pub struct OnlyVAMM;
    #[doc = "Custom Error type `PRBMathSD59x18__FromIntOverflow` with signature `PRBMathSD59x18__FromIntOverflow(int256)` and selector `[113, 247, 42, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathSD59x18__FromIntOverflow",
        abi = "PRBMathSD59x18__FromIntOverflow(int256)"
    )]
    pub struct PRBMathSD59x18__FromIntOverflow {
        pub x: I256,
    }
    #[doc = "Custom Error type `PRBMathSD59x18__FromIntUnderflow` with signature `PRBMathSD59x18__FromIntUnderflow(int256)` and selector `[230, 8, 225, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathSD59x18__FromIntUnderflow",
        abi = "PRBMathSD59x18__FromIntUnderflow(int256)"
    )]
    pub struct PRBMathSD59x18__FromIntUnderflow {
        pub x: I256,
    }
    #[doc = "Custom Error type `PRBMathSD59x18__MulInputTooSmall` with signature `PRBMathSD59x18__MulInputTooSmall()` and selector `[52, 6, 132, 108]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathSD59x18__MulInputTooSmall",
        abi = "PRBMathSD59x18__MulInputTooSmall()"
    )]
    pub struct PRBMathSD59x18__MulInputTooSmall;
    #[doc = "Custom Error type `PRBMathSD59x18__MulOverflow` with signature `PRBMathSD59x18__MulOverflow(uint256)` and selector `[191, 121, 232, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathSD59x18__MulOverflow",
        abi = "PRBMathSD59x18__MulOverflow(uint256)"
    )]
    pub struct PRBMathSD59x18__MulOverflow {
        pub r_abs: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMathUD60x18__FromUintOverflow` with signature `PRBMathUD60x18__FromUintOverflow(uint256)` and selector `[52, 146, 255, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__FromUintOverflow",
        abi = "PRBMathUD60x18__FromUintOverflow(uint256)"
    )]
    pub struct PRBMathUD60x18__FromUintOverflow {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMath__MulDivFixedPointOverflow` with signature `PRBMath__MulDivFixedPointOverflow(uint256)` and selector `[211, 27, 52, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMath__MulDivFixedPointOverflow",
        abi = "PRBMath__MulDivFixedPointOverflow(uint256)"
    )]
    pub struct PRBMath__MulDivFixedPointOverflow {
        pub prod_1: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMath__MulDivOverflow` with signature `PRBMath__MulDivOverflow(uint256,uint256)` and selector `[119, 60, 193, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMath__MulDivOverflow",
        abi = "PRBMath__MulDivOverflow(uint256,uint256)"
    )]
    pub struct PRBMath__MulDivOverflow {
        pub prod_1: ethers::core::types::U256,
        pub denominator: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PositionNetZero` with signature `PositionNetZero()` and selector `[89, 32, 46, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNetZero", abi = "PositionNetZero()")]
    pub struct PositionNetZero;
    #[doc = "Custom Error type `PositionNotSettled` with signature `PositionNotSettled()` and selector `[90, 108, 31, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNotSettled", abi = "PositionNotSettled()")]
    pub struct PositionNotSettled;
    #[doc = "Custom Error type `RocketPoolGetEthValueReturnedZero` with signature `RocketPoolGetEthValueReturnedZero()` and selector `[18, 70, 158, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "RocketPoolGetEthValueReturnedZero",
        abi = "RocketPoolGetEthValueReturnedZero()"
    )]
    pub struct RocketPoolGetEthValueReturnedZero;
    #[doc = "Custom Error type `WithdrawalExceedsCurrentMargin` with signature `WithdrawalExceedsCurrentMargin()` and selector `[41, 126, 28, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "WithdrawalExceedsCurrentMargin",
        abi = "WithdrawalExceedsCurrentMargin()"
    )]
    pub struct WithdrawalExceedsCurrentMargin;
    #[doc = "Custom Error type `closeToOrBeyondMaturity` with signature `closeToOrBeyondMaturity()` and selector `[83, 173, 234, 156]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "closeToOrBeyondMaturity", abi = "closeToOrBeyondMaturity()")]
    pub struct closeToOrBeyondMaturity;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundFCMErrors {
        AavePoolGetReserveNormalizedIncomeReturnedZero(
            AavePoolGetReserveNormalizedIncomeReturnedZero,
        ),
        AavePoolGetReserveNormalizedVariableDebtReturnedZero(
            AavePoolGetReserveNormalizedVariableDebtReturnedZero,
        ),
        CTokenExchangeRateReturnedZero(CTokenExchangeRateReturnedZero),
        CanOnlyTradeIfUnlocked(CanOnlyTradeIfUnlocked),
        CannotLiquidate(CannotLiquidate),
        CannotSettleBeforeMaturity(CannotSettleBeforeMaturity),
        DebugError(DebugError),
        ExpectedOppositeSigns(ExpectedOppositeSigns),
        ExpectedSqrtPriceZeroBeforeInit(ExpectedSqrtPriceZeroBeforeInit),
        IRSNotionalAmountSpecifiedMustBeNonZero(IRSNotionalAmountSpecifiedMustBeNonZero),
        InvalidMarginDelta(InvalidMarginDelta),
        LidoGetPooledEthBySharesReturnedZero(LidoGetPooledEthBySharesReturnedZero),
        LiquidityDeltaMustBePositiveInBurn(LiquidityDeltaMustBePositiveInBurn),
        LiquidityDeltaMustBePositiveInMint(LiquidityDeltaMustBePositiveInMint),
        MarginLessThanMinimum(MarginLessThanMinimum),
        MarginRequirementNotMet(MarginRequirementNotMet),
        MarginRequirementNotMetFCM(MarginRequirementNotMetFCM),
        NotEnoughFunds(NotEnoughFunds),
        OOO(OOO),
        OnlyFCM(OnlyFCM),
        OnlyMarginEngine(OnlyMarginEngine),
        OnlyOwnerCanUpdatePosition(OnlyOwnerCanUpdatePosition),
        OnlyVAMM(OnlyVAMM),
        PRBMathSD59x18__FromIntOverflow(PRBMathSD59x18__FromIntOverflow),
        PRBMathSD59x18__FromIntUnderflow(PRBMathSD59x18__FromIntUnderflow),
        PRBMathSD59x18__MulInputTooSmall(PRBMathSD59x18__MulInputTooSmall),
        PRBMathSD59x18__MulOverflow(PRBMathSD59x18__MulOverflow),
        PRBMathUD60x18__FromUintOverflow(PRBMathUD60x18__FromUintOverflow),
        PRBMath__MulDivFixedPointOverflow(PRBMath__MulDivFixedPointOverflow),
        PRBMath__MulDivOverflow(PRBMath__MulDivOverflow),
        PositionNetZero(PositionNetZero),
        PositionNotSettled(PositionNotSettled),
        RocketPoolGetEthValueReturnedZero(RocketPoolGetEthValueReturnedZero),
        WithdrawalExceedsCurrentMargin(WithdrawalExceedsCurrentMargin),
        closeToOrBeyondMaturity(closeToOrBeyondMaturity),
    }
    impl ethers::core::abi::AbiDecode for CompoundFCMErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok (decoded) = < AavePoolGetReserveNormalizedIncomeReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (CompoundFCMErrors :: AavePoolGetReserveNormalizedIncomeReturnedZero (decoded)) }
            if let Ok (decoded) = < AavePoolGetReserveNormalizedVariableDebtReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (CompoundFCMErrors :: AavePoolGetReserveNormalizedVariableDebtReturnedZero (decoded)) }
            if let Ok(decoded) =
                <CTokenExchangeRateReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::CTokenExchangeRateReturnedZero(decoded));
            }
            if let Ok(decoded) =
                <CanOnlyTradeIfUnlocked as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::CanOnlyTradeIfUnlocked(decoded));
            }
            if let Ok(decoded) =
                <CannotLiquidate as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::CannotLiquidate(decoded));
            }
            if let Ok(decoded) =
                <CannotSettleBeforeMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::CannotSettleBeforeMaturity(decoded));
            }
            if let Ok(decoded) = <DebugError as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::DebugError(decoded));
            }
            if let Ok(decoded) =
                <ExpectedOppositeSigns as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::ExpectedOppositeSigns(decoded));
            }
            if let Ok(decoded) =
                <ExpectedSqrtPriceZeroBeforeInit as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::ExpectedSqrtPriceZeroBeforeInit(decoded));
            }
            if let Ok(decoded) =
                <IRSNotionalAmountSpecifiedMustBeNonZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::IRSNotionalAmountSpecifiedMustBeNonZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <InvalidMarginDelta as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::InvalidMarginDelta(decoded));
            }
            if let Ok(decoded) =
                <LidoGetPooledEthBySharesReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::LidoGetPooledEthBySharesReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInBurn as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::LiquidityDeltaMustBePositiveInBurn(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInMint as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::LiquidityDeltaMustBePositiveInMint(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <MarginLessThanMinimum as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::MarginLessThanMinimum(decoded));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMet as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::MarginRequirementNotMet(decoded));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMetFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::MarginRequirementNotMetFCM(decoded));
            }
            if let Ok(decoded) =
                <NotEnoughFunds as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::NotEnoughFunds(decoded));
            }
            if let Ok(decoded) = <OOO as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundFCMErrors::OOO(decoded));
            }
            if let Ok(decoded) = <OnlyFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundFCMErrors::OnlyFCM(decoded));
            }
            if let Ok(decoded) =
                <OnlyMarginEngine as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::OnlyMarginEngine(decoded));
            }
            if let Ok(decoded) =
                <OnlyOwnerCanUpdatePosition as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::OnlyOwnerCanUpdatePosition(decoded));
            }
            if let Ok(decoded) = <OnlyVAMM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundFCMErrors::OnlyVAMM(decoded));
            }
            if let Ok(decoded) =
                <PRBMathSD59x18__FromIntOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::PRBMathSD59x18__FromIntOverflow(decoded));
            }
            if let Ok(decoded) =
                <PRBMathSD59x18__FromIntUnderflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::PRBMathSD59x18__FromIntUnderflow(decoded));
            }
            if let Ok(decoded) =
                <PRBMathSD59x18__MulInputTooSmall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::PRBMathSD59x18__MulInputTooSmall(decoded));
            }
            if let Ok(decoded) =
                <PRBMathSD59x18__MulOverflow as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::PRBMathSD59x18__MulOverflow(decoded));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__FromUintOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::PRBMathUD60x18__FromUintOverflow(decoded));
            }
            if let Ok(decoded) =
                <PRBMath__MulDivFixedPointOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::PRBMath__MulDivFixedPointOverflow(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMath__MulDivOverflow as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::PRBMath__MulDivOverflow(decoded));
            }
            if let Ok(decoded) =
                <PositionNetZero as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::PositionNetZero(decoded));
            }
            if let Ok(decoded) =
                <PositionNotSettled as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::PositionNotSettled(decoded));
            }
            if let Ok(decoded) =
                <RocketPoolGetEthValueReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::RocketPoolGetEthValueReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <WithdrawalExceedsCurrentMargin as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMErrors::WithdrawalExceedsCurrentMargin(decoded));
            }
            if let Ok(decoded) =
                <closeToOrBeyondMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMErrors::closeToOrBeyondMaturity(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CompoundFCMErrors {
        fn encode(self) -> Vec<u8> {
            match self {
                CompoundFCMErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(element) => {
                    element.encode()
                }
                CompoundFCMErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                    element,
                ) => element.encode(),
                CompoundFCMErrors::CTokenExchangeRateReturnedZero(element) => element.encode(),
                CompoundFCMErrors::CanOnlyTradeIfUnlocked(element) => element.encode(),
                CompoundFCMErrors::CannotLiquidate(element) => element.encode(),
                CompoundFCMErrors::CannotSettleBeforeMaturity(element) => element.encode(),
                CompoundFCMErrors::DebugError(element) => element.encode(),
                CompoundFCMErrors::ExpectedOppositeSigns(element) => element.encode(),
                CompoundFCMErrors::ExpectedSqrtPriceZeroBeforeInit(element) => element.encode(),
                CompoundFCMErrors::IRSNotionalAmountSpecifiedMustBeNonZero(element) => {
                    element.encode()
                }
                CompoundFCMErrors::InvalidMarginDelta(element) => element.encode(),
                CompoundFCMErrors::LidoGetPooledEthBySharesReturnedZero(element) => {
                    element.encode()
                }
                CompoundFCMErrors::LiquidityDeltaMustBePositiveInBurn(element) => element.encode(),
                CompoundFCMErrors::LiquidityDeltaMustBePositiveInMint(element) => element.encode(),
                CompoundFCMErrors::MarginLessThanMinimum(element) => element.encode(),
                CompoundFCMErrors::MarginRequirementNotMet(element) => element.encode(),
                CompoundFCMErrors::MarginRequirementNotMetFCM(element) => element.encode(),
                CompoundFCMErrors::NotEnoughFunds(element) => element.encode(),
                CompoundFCMErrors::OOO(element) => element.encode(),
                CompoundFCMErrors::OnlyFCM(element) => element.encode(),
                CompoundFCMErrors::OnlyMarginEngine(element) => element.encode(),
                CompoundFCMErrors::OnlyOwnerCanUpdatePosition(element) => element.encode(),
                CompoundFCMErrors::OnlyVAMM(element) => element.encode(),
                CompoundFCMErrors::PRBMathSD59x18__FromIntOverflow(element) => element.encode(),
                CompoundFCMErrors::PRBMathSD59x18__FromIntUnderflow(element) => element.encode(),
                CompoundFCMErrors::PRBMathSD59x18__MulInputTooSmall(element) => element.encode(),
                CompoundFCMErrors::PRBMathSD59x18__MulOverflow(element) => element.encode(),
                CompoundFCMErrors::PRBMathUD60x18__FromUintOverflow(element) => element.encode(),
                CompoundFCMErrors::PRBMath__MulDivFixedPointOverflow(element) => element.encode(),
                CompoundFCMErrors::PRBMath__MulDivOverflow(element) => element.encode(),
                CompoundFCMErrors::PositionNetZero(element) => element.encode(),
                CompoundFCMErrors::PositionNotSettled(element) => element.encode(),
                CompoundFCMErrors::RocketPoolGetEthValueReturnedZero(element) => element.encode(),
                CompoundFCMErrors::WithdrawalExceedsCurrentMargin(element) => element.encode(),
                CompoundFCMErrors::closeToOrBeyondMaturity(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CompoundFCMErrors {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundFCMErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(element) => {
                    element.fmt(f)
                }
                CompoundFCMErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                    element,
                ) => element.fmt(f),
                CompoundFCMErrors::CTokenExchangeRateReturnedZero(element) => element.fmt(f),
                CompoundFCMErrors::CanOnlyTradeIfUnlocked(element) => element.fmt(f),
                CompoundFCMErrors::CannotLiquidate(element) => element.fmt(f),
                CompoundFCMErrors::CannotSettleBeforeMaturity(element) => element.fmt(f),
                CompoundFCMErrors::DebugError(element) => element.fmt(f),
                CompoundFCMErrors::ExpectedOppositeSigns(element) => element.fmt(f),
                CompoundFCMErrors::ExpectedSqrtPriceZeroBeforeInit(element) => element.fmt(f),
                CompoundFCMErrors::IRSNotionalAmountSpecifiedMustBeNonZero(element) => {
                    element.fmt(f)
                }
                CompoundFCMErrors::InvalidMarginDelta(element) => element.fmt(f),
                CompoundFCMErrors::LidoGetPooledEthBySharesReturnedZero(element) => element.fmt(f),
                CompoundFCMErrors::LiquidityDeltaMustBePositiveInBurn(element) => element.fmt(f),
                CompoundFCMErrors::LiquidityDeltaMustBePositiveInMint(element) => element.fmt(f),
                CompoundFCMErrors::MarginLessThanMinimum(element) => element.fmt(f),
                CompoundFCMErrors::MarginRequirementNotMet(element) => element.fmt(f),
                CompoundFCMErrors::MarginRequirementNotMetFCM(element) => element.fmt(f),
                CompoundFCMErrors::NotEnoughFunds(element) => element.fmt(f),
                CompoundFCMErrors::OOO(element) => element.fmt(f),
                CompoundFCMErrors::OnlyFCM(element) => element.fmt(f),
                CompoundFCMErrors::OnlyMarginEngine(element) => element.fmt(f),
                CompoundFCMErrors::OnlyOwnerCanUpdatePosition(element) => element.fmt(f),
                CompoundFCMErrors::OnlyVAMM(element) => element.fmt(f),
                CompoundFCMErrors::PRBMathSD59x18__FromIntOverflow(element) => element.fmt(f),
                CompoundFCMErrors::PRBMathSD59x18__FromIntUnderflow(element) => element.fmt(f),
                CompoundFCMErrors::PRBMathSD59x18__MulInputTooSmall(element) => element.fmt(f),
                CompoundFCMErrors::PRBMathSD59x18__MulOverflow(element) => element.fmt(f),
                CompoundFCMErrors::PRBMathUD60x18__FromUintOverflow(element) => element.fmt(f),
                CompoundFCMErrors::PRBMath__MulDivFixedPointOverflow(element) => element.fmt(f),
                CompoundFCMErrors::PRBMath__MulDivOverflow(element) => element.fmt(f),
                CompoundFCMErrors::PositionNetZero(element) => element.fmt(f),
                CompoundFCMErrors::PositionNotSettled(element) => element.fmt(f),
                CompoundFCMErrors::RocketPoolGetEthValueReturnedZero(element) => element.fmt(f),
                CompoundFCMErrors::WithdrawalExceedsCurrentMargin(element) => element.fmt(f),
                CompoundFCMErrors::closeToOrBeyondMaturity(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedIncomeReturnedZero> for CompoundFCMErrors {
        fn from(var: AavePoolGetReserveNormalizedIncomeReturnedZero) -> Self {
            CompoundFCMErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(var)
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedVariableDebtReturnedZero>
        for CompoundFCMErrors
    {
        fn from(var: AavePoolGetReserveNormalizedVariableDebtReturnedZero) -> Self {
            CompoundFCMErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(var)
        }
    }
    impl ::std::convert::From<CTokenExchangeRateReturnedZero> for CompoundFCMErrors {
        fn from(var: CTokenExchangeRateReturnedZero) -> Self {
            CompoundFCMErrors::CTokenExchangeRateReturnedZero(var)
        }
    }
    impl ::std::convert::From<CanOnlyTradeIfUnlocked> for CompoundFCMErrors {
        fn from(var: CanOnlyTradeIfUnlocked) -> Self {
            CompoundFCMErrors::CanOnlyTradeIfUnlocked(var)
        }
    }
    impl ::std::convert::From<CannotLiquidate> for CompoundFCMErrors {
        fn from(var: CannotLiquidate) -> Self {
            CompoundFCMErrors::CannotLiquidate(var)
        }
    }
    impl ::std::convert::From<CannotSettleBeforeMaturity> for CompoundFCMErrors {
        fn from(var: CannotSettleBeforeMaturity) -> Self {
            CompoundFCMErrors::CannotSettleBeforeMaturity(var)
        }
    }
    impl ::std::convert::From<DebugError> for CompoundFCMErrors {
        fn from(var: DebugError) -> Self {
            CompoundFCMErrors::DebugError(var)
        }
    }
    impl ::std::convert::From<ExpectedOppositeSigns> for CompoundFCMErrors {
        fn from(var: ExpectedOppositeSigns) -> Self {
            CompoundFCMErrors::ExpectedOppositeSigns(var)
        }
    }
    impl ::std::convert::From<ExpectedSqrtPriceZeroBeforeInit> for CompoundFCMErrors {
        fn from(var: ExpectedSqrtPriceZeroBeforeInit) -> Self {
            CompoundFCMErrors::ExpectedSqrtPriceZeroBeforeInit(var)
        }
    }
    impl ::std::convert::From<IRSNotionalAmountSpecifiedMustBeNonZero> for CompoundFCMErrors {
        fn from(var: IRSNotionalAmountSpecifiedMustBeNonZero) -> Self {
            CompoundFCMErrors::IRSNotionalAmountSpecifiedMustBeNonZero(var)
        }
    }
    impl ::std::convert::From<InvalidMarginDelta> for CompoundFCMErrors {
        fn from(var: InvalidMarginDelta) -> Self {
            CompoundFCMErrors::InvalidMarginDelta(var)
        }
    }
    impl ::std::convert::From<LidoGetPooledEthBySharesReturnedZero> for CompoundFCMErrors {
        fn from(var: LidoGetPooledEthBySharesReturnedZero) -> Self {
            CompoundFCMErrors::LidoGetPooledEthBySharesReturnedZero(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInBurn> for CompoundFCMErrors {
        fn from(var: LiquidityDeltaMustBePositiveInBurn) -> Self {
            CompoundFCMErrors::LiquidityDeltaMustBePositiveInBurn(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInMint> for CompoundFCMErrors {
        fn from(var: LiquidityDeltaMustBePositiveInMint) -> Self {
            CompoundFCMErrors::LiquidityDeltaMustBePositiveInMint(var)
        }
    }
    impl ::std::convert::From<MarginLessThanMinimum> for CompoundFCMErrors {
        fn from(var: MarginLessThanMinimum) -> Self {
            CompoundFCMErrors::MarginLessThanMinimum(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMet> for CompoundFCMErrors {
        fn from(var: MarginRequirementNotMet) -> Self {
            CompoundFCMErrors::MarginRequirementNotMet(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMetFCM> for CompoundFCMErrors {
        fn from(var: MarginRequirementNotMetFCM) -> Self {
            CompoundFCMErrors::MarginRequirementNotMetFCM(var)
        }
    }
    impl ::std::convert::From<NotEnoughFunds> for CompoundFCMErrors {
        fn from(var: NotEnoughFunds) -> Self {
            CompoundFCMErrors::NotEnoughFunds(var)
        }
    }
    impl ::std::convert::From<OOO> for CompoundFCMErrors {
        fn from(var: OOO) -> Self {
            CompoundFCMErrors::OOO(var)
        }
    }
    impl ::std::convert::From<OnlyFCM> for CompoundFCMErrors {
        fn from(var: OnlyFCM) -> Self {
            CompoundFCMErrors::OnlyFCM(var)
        }
    }
    impl ::std::convert::From<OnlyMarginEngine> for CompoundFCMErrors {
        fn from(var: OnlyMarginEngine) -> Self {
            CompoundFCMErrors::OnlyMarginEngine(var)
        }
    }
    impl ::std::convert::From<OnlyOwnerCanUpdatePosition> for CompoundFCMErrors {
        fn from(var: OnlyOwnerCanUpdatePosition) -> Self {
            CompoundFCMErrors::OnlyOwnerCanUpdatePosition(var)
        }
    }
    impl ::std::convert::From<OnlyVAMM> for CompoundFCMErrors {
        fn from(var: OnlyVAMM) -> Self {
            CompoundFCMErrors::OnlyVAMM(var)
        }
    }
    impl ::std::convert::From<PRBMathSD59x18__FromIntOverflow> for CompoundFCMErrors {
        fn from(var: PRBMathSD59x18__FromIntOverflow) -> Self {
            CompoundFCMErrors::PRBMathSD59x18__FromIntOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMathSD59x18__FromIntUnderflow> for CompoundFCMErrors {
        fn from(var: PRBMathSD59x18__FromIntUnderflow) -> Self {
            CompoundFCMErrors::PRBMathSD59x18__FromIntUnderflow(var)
        }
    }
    impl ::std::convert::From<PRBMathSD59x18__MulInputTooSmall> for CompoundFCMErrors {
        fn from(var: PRBMathSD59x18__MulInputTooSmall) -> Self {
            CompoundFCMErrors::PRBMathSD59x18__MulInputTooSmall(var)
        }
    }
    impl ::std::convert::From<PRBMathSD59x18__MulOverflow> for CompoundFCMErrors {
        fn from(var: PRBMathSD59x18__MulOverflow) -> Self {
            CompoundFCMErrors::PRBMathSD59x18__MulOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__FromUintOverflow> for CompoundFCMErrors {
        fn from(var: PRBMathUD60x18__FromUintOverflow) -> Self {
            CompoundFCMErrors::PRBMathUD60x18__FromUintOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMath__MulDivFixedPointOverflow> for CompoundFCMErrors {
        fn from(var: PRBMath__MulDivFixedPointOverflow) -> Self {
            CompoundFCMErrors::PRBMath__MulDivFixedPointOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMath__MulDivOverflow> for CompoundFCMErrors {
        fn from(var: PRBMath__MulDivOverflow) -> Self {
            CompoundFCMErrors::PRBMath__MulDivOverflow(var)
        }
    }
    impl ::std::convert::From<PositionNetZero> for CompoundFCMErrors {
        fn from(var: PositionNetZero) -> Self {
            CompoundFCMErrors::PositionNetZero(var)
        }
    }
    impl ::std::convert::From<PositionNotSettled> for CompoundFCMErrors {
        fn from(var: PositionNotSettled) -> Self {
            CompoundFCMErrors::PositionNotSettled(var)
        }
    }
    impl ::std::convert::From<RocketPoolGetEthValueReturnedZero> for CompoundFCMErrors {
        fn from(var: RocketPoolGetEthValueReturnedZero) -> Self {
            CompoundFCMErrors::RocketPoolGetEthValueReturnedZero(var)
        }
    }
    impl ::std::convert::From<WithdrawalExceedsCurrentMargin> for CompoundFCMErrors {
        fn from(var: WithdrawalExceedsCurrentMargin) -> Self {
            CompoundFCMErrors::WithdrawalExceedsCurrentMargin(var)
        }
    }
    impl ::std::convert::From<closeToOrBeyondMaturity> for CompoundFCMErrors {
        fn from(var: closeToOrBeyondMaturity) -> Self {
            CompoundFCMErrors::closeToOrBeyondMaturity(var)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "AdminChanged", abi = "AdminChanged(address,address)")]
    pub struct AdminChangedFilter {
        pub previous_admin: ethers::core::types::Address,
        pub new_admin: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "BeaconUpgraded", abi = "BeaconUpgraded(address)")]
    pub struct BeaconUpgradedFilter {
        #[ethevent(indexed)]
        pub beacon: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "FCMTraderUpdate",
        abi = "FCMTraderUpdate(address,uint256,int256,int256)"
    )]
    pub struct FcmtraderUpdateFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        pub margin_in_scaled_yield_bearing_tokens: ethers::core::types::U256,
        pub fixed_token_balance: I256,
        pub variable_token_balance: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "FullyCollateralisedSwap",
        abi = "FullyCollateralisedSwap(address,uint256,uint160,uint256,int256,int256,int256)"
    )]
    pub struct FullyCollateralisedSwapFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        pub desired_notional: ethers::core::types::U256,
        pub sqrt_price_limit_x96: ethers::core::types::U256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "FullyCollateralisedUnwind",
        abi = "FullyCollateralisedUnwind(address,uint256,uint160,uint256,int256,int256,int256)"
    )]
    pub struct FullyCollateralisedUnwindFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        pub desired_notional: ethers::core::types::U256,
        pub sqrt_price_limit_x96: ethers::core::types::U256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "Initialized", abi = "Initialized(uint8)")]
    pub struct InitializedFilter {
        pub version: u8,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "Upgraded", abi = "Upgraded(address)")]
    pub struct UpgradedFilter {
        #[ethevent(indexed)]
        pub implementation: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "fcmPositionSettlement",
        abi = "fcmPositionSettlement(address,int256)"
    )]
    pub struct FcmPositionSettlementFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        pub settlement_cashflow: I256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundFCMEvents {
        AdminChangedFilter(AdminChangedFilter),
        BeaconUpgradedFilter(BeaconUpgradedFilter),
        FcmtraderUpdateFilter(FcmtraderUpdateFilter),
        FullyCollateralisedSwapFilter(FullyCollateralisedSwapFilter),
        FullyCollateralisedUnwindFilter(FullyCollateralisedUnwindFilter),
        InitializedFilter(InitializedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        UpgradedFilter(UpgradedFilter),
        FcmPositionSettlementFilter(FcmPositionSettlementFilter),
    }
    impl ethers::contract::EthLogDecode for CompoundFCMEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AdminChangedFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::AdminChangedFilter(decoded));
            }
            if let Ok(decoded) = BeaconUpgradedFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::BeaconUpgradedFilter(decoded));
            }
            if let Ok(decoded) = FcmtraderUpdateFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::FcmtraderUpdateFilter(decoded));
            }
            if let Ok(decoded) = FullyCollateralisedSwapFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::FullyCollateralisedSwapFilter(decoded));
            }
            if let Ok(decoded) = FullyCollateralisedUnwindFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::FullyCollateralisedUnwindFilter(decoded));
            }
            if let Ok(decoded) = InitializedFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::InitializedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = UpgradedFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::UpgradedFilter(decoded));
            }
            if let Ok(decoded) = FcmPositionSettlementFilter::decode_log(log) {
                return Ok(CompoundFCMEvents::FcmPositionSettlementFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for CompoundFCMEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundFCMEvents::AdminChangedFilter(element) => element.fmt(f),
                CompoundFCMEvents::BeaconUpgradedFilter(element) => element.fmt(f),
                CompoundFCMEvents::FcmtraderUpdateFilter(element) => element.fmt(f),
                CompoundFCMEvents::FullyCollateralisedSwapFilter(element) => element.fmt(f),
                CompoundFCMEvents::FullyCollateralisedUnwindFilter(element) => element.fmt(f),
                CompoundFCMEvents::InitializedFilter(element) => element.fmt(f),
                CompoundFCMEvents::OwnershipTransferredFilter(element) => element.fmt(f),
                CompoundFCMEvents::UpgradedFilter(element) => element.fmt(f),
                CompoundFCMEvents::FcmPositionSettlementFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `cToken` function with signature `cToken()` and selector `[105, 229, 39, 218]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "cToken", abi = "cToken()")]
    pub struct CtokenCall;
    #[doc = "Container type for all input parameters for the `getTraderMarginInCTokens` function with signature `getTraderMarginInCTokens(address)` and selector `[188, 97, 240, 45]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getTraderMarginInCTokens",
        abi = "getTraderMarginInCTokens(address)"
    )]
    pub struct GetTraderMarginInCTokensCall {
        pub trader_address: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getTraderWithYieldBearingAssets` function with signature `getTraderWithYieldBearingAssets(address)` and selector `[154, 47, 72, 245]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getTraderWithYieldBearingAssets",
        abi = "getTraderWithYieldBearingAssets(address)"
    )]
    pub struct GetTraderWithYieldBearingAssetsCall {
        pub trader: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `initialize` function with signature `initialize(address,address)` and selector `[72, 92, 201, 85]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "initialize", abi = "initialize(address,address)")]
    pub struct InitializeCall {
        pub vamm: ethers::core::types::Address,
        pub margin_engine: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `initiateFullyCollateralisedFixedTakerSwap` function with signature `initiateFullyCollateralisedFixedTakerSwap(uint256,uint160)` and selector `[85, 70, 138, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "initiateFullyCollateralisedFixedTakerSwap",
        abi = "initiateFullyCollateralisedFixedTakerSwap(uint256,uint160)"
    )]
    pub struct InitiateFullyCollateralisedFixedTakerSwapCall {
        pub notional: ethers::core::types::U256,
        pub sqrt_price_limit_x96: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `marginEngine` function with signature `marginEngine()` and selector `[0, 64, 6, 224]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "marginEngine", abi = "marginEngine()")]
    pub struct MarginEngineCall;
    #[doc = "Container type for all input parameters for the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    #[doc = "Container type for all input parameters for the `paused` function with signature `paused()` and selector `[92, 151, 90, 187]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "paused", abi = "paused()")]
    pub struct PausedCall;
    #[doc = "Container type for all input parameters for the `proxiableUUID` function with signature `proxiableUUID()` and selector `[82, 209, 144, 45]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "proxiableUUID", abi = "proxiableUUID()")]
    pub struct ProxiableUUIDCall;
    #[doc = "Container type for all input parameters for the `rateOracle` function with signature `rateOracle()` and selector `[152, 244, 177, 178]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "rateOracle", abi = "rateOracle()")]
    pub struct RateOracleCall;
    #[doc = "Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `[113, 80, 24, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    #[doc = "Container type for all input parameters for the `setPausability` function with signature `setPausability(bool)` and selector `[13, 33, 25, 84]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "setPausability", abi = "setPausability(bool)")]
    pub struct SetPausabilityCall {
        pub state: bool,
    }
    #[doc = "Container type for all input parameters for the `settleTrader` function with signature `settleTrader()` and selector `[235, 201, 176, 46]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "settleTrader", abi = "settleTrader()")]
    pub struct SettleTraderCall;
    #[doc = "Container type for all input parameters for the `traders` function with signature `traders(address)` and selector `[146, 168, 143, 162]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "traders", abi = "traders(address)")]
    pub struct TradersCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `transferMarginToMarginEngineTrader` function with signature `transferMarginToMarginEngineTrader(address,uint256)` and selector `[193, 204, 250, 104]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "transferMarginToMarginEngineTrader",
        abi = "transferMarginToMarginEngineTrader(address,uint256)"
    )]
    pub struct TransferMarginToMarginEngineTraderCall {
        pub account: ethers::core::types::Address,
        pub margin_delta_in_underlying_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `[242, 253, 227, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `underlyingToken` function with signature `underlyingToken()` and selector `[36, 149, 165, 153]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "underlyingToken", abi = "underlyingToken()")]
    pub struct UnderlyingTokenCall;
    #[doc = "Container type for all input parameters for the `unwindFullyCollateralisedFixedTakerSwap` function with signature `unwindFullyCollateralisedFixedTakerSwap(uint256,uint160)` and selector `[3, 116, 34, 116]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "unwindFullyCollateralisedFixedTakerSwap",
        abi = "unwindFullyCollateralisedFixedTakerSwap(uint256,uint160)"
    )]
    pub struct UnwindFullyCollateralisedFixedTakerSwapCall {
        pub notional_to_unwind: ethers::core::types::U256,
        pub sqrt_price_limit_x96: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `upgradeTo` function with signature `upgradeTo(address)` and selector `[54, 89, 207, 230]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "upgradeTo", abi = "upgradeTo(address)")]
    pub struct UpgradeToCall {
        pub new_implementation: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `upgradeToAndCall` function with signature `upgradeToAndCall(address,bytes)` and selector `[79, 30, 242, 134]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "upgradeToAndCall", abi = "upgradeToAndCall(address,bytes)")]
    pub struct UpgradeToAndCallCall {
        pub new_implementation: ethers::core::types::Address,
        pub data: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `vamm` function with signature `vamm()` and selector `[224, 152, 55, 44]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "vamm", abi = "vamm()")]
    pub struct VammCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundFCMCalls {
        Ctoken(CtokenCall),
        GetTraderMarginInCTokens(GetTraderMarginInCTokensCall),
        GetTraderWithYieldBearingAssets(GetTraderWithYieldBearingAssetsCall),
        Initialize(InitializeCall),
        InitiateFullyCollateralisedFixedTakerSwap(InitiateFullyCollateralisedFixedTakerSwapCall),
        MarginEngine(MarginEngineCall),
        Owner(OwnerCall),
        Paused(PausedCall),
        ProxiableUUID(ProxiableUUIDCall),
        RateOracle(RateOracleCall),
        RenounceOwnership(RenounceOwnershipCall),
        SetPausability(SetPausabilityCall),
        SettleTrader(SettleTraderCall),
        Traders(TradersCall),
        TransferMarginToMarginEngineTrader(TransferMarginToMarginEngineTraderCall),
        TransferOwnership(TransferOwnershipCall),
        UnderlyingToken(UnderlyingTokenCall),
        UnwindFullyCollateralisedFixedTakerSwap(UnwindFullyCollateralisedFixedTakerSwapCall),
        UpgradeTo(UpgradeToCall),
        UpgradeToAndCall(UpgradeToAndCallCall),
        Vamm(VammCall),
    }
    impl ethers::core::abi::AbiDecode for CompoundFCMCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <CtokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::Ctoken(decoded));
            }
            if let Ok(decoded) =
                <GetTraderMarginInCTokensCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMCalls::GetTraderMarginInCTokens(decoded));
            }
            if let Ok(decoded) =
                <GetTraderWithYieldBearingAssetsCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMCalls::GetTraderWithYieldBearingAssets(decoded));
            }
            if let Ok(decoded) =
                <InitializeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::Initialize(decoded));
            }
            if let Ok (decoded) = < InitiateFullyCollateralisedFixedTakerSwapCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (CompoundFCMCalls :: InitiateFullyCollateralisedFixedTakerSwap (decoded)) }
            if let Ok(decoded) =
                <MarginEngineCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::MarginEngine(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::Owner(decoded));
            }
            if let Ok(decoded) = <PausedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::Paused(decoded));
            }
            if let Ok(decoded) =
                <ProxiableUUIDCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::ProxiableUUID(decoded));
            }
            if let Ok(decoded) =
                <RateOracleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::RateOracle(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <SetPausabilityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::SetPausability(decoded));
            }
            if let Ok(decoded) =
                <SettleTraderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::SettleTrader(decoded));
            }
            if let Ok(decoded) =
                <TradersCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::Traders(decoded));
            }
            if let Ok(decoded) =
                <TransferMarginToMarginEngineTraderCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundFCMCalls::TransferMarginToMarginEngineTrader(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::UnderlyingToken(decoded));
            }
            if let Ok (decoded) = < UnwindFullyCollateralisedFixedTakerSwapCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (CompoundFCMCalls :: UnwindFullyCollateralisedFixedTakerSwap (decoded)) }
            if let Ok(decoded) =
                <UpgradeToCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::UpgradeTo(decoded));
            }
            if let Ok(decoded) =
                <UpgradeToAndCallCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundFCMCalls::UpgradeToAndCall(decoded));
            }
            if let Ok(decoded) = <VammCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundFCMCalls::Vamm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CompoundFCMCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CompoundFCMCalls::Ctoken(element) => element.encode(),
                CompoundFCMCalls::GetTraderMarginInCTokens(element) => element.encode(),
                CompoundFCMCalls::GetTraderWithYieldBearingAssets(element) => element.encode(),
                CompoundFCMCalls::Initialize(element) => element.encode(),
                CompoundFCMCalls::InitiateFullyCollateralisedFixedTakerSwap(element) => {
                    element.encode()
                }
                CompoundFCMCalls::MarginEngine(element) => element.encode(),
                CompoundFCMCalls::Owner(element) => element.encode(),
                CompoundFCMCalls::Paused(element) => element.encode(),
                CompoundFCMCalls::ProxiableUUID(element) => element.encode(),
                CompoundFCMCalls::RateOracle(element) => element.encode(),
                CompoundFCMCalls::RenounceOwnership(element) => element.encode(),
                CompoundFCMCalls::SetPausability(element) => element.encode(),
                CompoundFCMCalls::SettleTrader(element) => element.encode(),
                CompoundFCMCalls::Traders(element) => element.encode(),
                CompoundFCMCalls::TransferMarginToMarginEngineTrader(element) => element.encode(),
                CompoundFCMCalls::TransferOwnership(element) => element.encode(),
                CompoundFCMCalls::UnderlyingToken(element) => element.encode(),
                CompoundFCMCalls::UnwindFullyCollateralisedFixedTakerSwap(element) => {
                    element.encode()
                }
                CompoundFCMCalls::UpgradeTo(element) => element.encode(),
                CompoundFCMCalls::UpgradeToAndCall(element) => element.encode(),
                CompoundFCMCalls::Vamm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CompoundFCMCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundFCMCalls::Ctoken(element) => element.fmt(f),
                CompoundFCMCalls::GetTraderMarginInCTokens(element) => element.fmt(f),
                CompoundFCMCalls::GetTraderWithYieldBearingAssets(element) => element.fmt(f),
                CompoundFCMCalls::Initialize(element) => element.fmt(f),
                CompoundFCMCalls::InitiateFullyCollateralisedFixedTakerSwap(element) => {
                    element.fmt(f)
                }
                CompoundFCMCalls::MarginEngine(element) => element.fmt(f),
                CompoundFCMCalls::Owner(element) => element.fmt(f),
                CompoundFCMCalls::Paused(element) => element.fmt(f),
                CompoundFCMCalls::ProxiableUUID(element) => element.fmt(f),
                CompoundFCMCalls::RateOracle(element) => element.fmt(f),
                CompoundFCMCalls::RenounceOwnership(element) => element.fmt(f),
                CompoundFCMCalls::SetPausability(element) => element.fmt(f),
                CompoundFCMCalls::SettleTrader(element) => element.fmt(f),
                CompoundFCMCalls::Traders(element) => element.fmt(f),
                CompoundFCMCalls::TransferMarginToMarginEngineTrader(element) => element.fmt(f),
                CompoundFCMCalls::TransferOwnership(element) => element.fmt(f),
                CompoundFCMCalls::UnderlyingToken(element) => element.fmt(f),
                CompoundFCMCalls::UnwindFullyCollateralisedFixedTakerSwap(element) => {
                    element.fmt(f)
                }
                CompoundFCMCalls::UpgradeTo(element) => element.fmt(f),
                CompoundFCMCalls::UpgradeToAndCall(element) => element.fmt(f),
                CompoundFCMCalls::Vamm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<CtokenCall> for CompoundFCMCalls {
        fn from(var: CtokenCall) -> Self {
            CompoundFCMCalls::Ctoken(var)
        }
    }
    impl ::std::convert::From<GetTraderMarginInCTokensCall> for CompoundFCMCalls {
        fn from(var: GetTraderMarginInCTokensCall) -> Self {
            CompoundFCMCalls::GetTraderMarginInCTokens(var)
        }
    }
    impl ::std::convert::From<GetTraderWithYieldBearingAssetsCall> for CompoundFCMCalls {
        fn from(var: GetTraderWithYieldBearingAssetsCall) -> Self {
            CompoundFCMCalls::GetTraderWithYieldBearingAssets(var)
        }
    }
    impl ::std::convert::From<InitializeCall> for CompoundFCMCalls {
        fn from(var: InitializeCall) -> Self {
            CompoundFCMCalls::Initialize(var)
        }
    }
    impl ::std::convert::From<InitiateFullyCollateralisedFixedTakerSwapCall> for CompoundFCMCalls {
        fn from(var: InitiateFullyCollateralisedFixedTakerSwapCall) -> Self {
            CompoundFCMCalls::InitiateFullyCollateralisedFixedTakerSwap(var)
        }
    }
    impl ::std::convert::From<MarginEngineCall> for CompoundFCMCalls {
        fn from(var: MarginEngineCall) -> Self {
            CompoundFCMCalls::MarginEngine(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for CompoundFCMCalls {
        fn from(var: OwnerCall) -> Self {
            CompoundFCMCalls::Owner(var)
        }
    }
    impl ::std::convert::From<PausedCall> for CompoundFCMCalls {
        fn from(var: PausedCall) -> Self {
            CompoundFCMCalls::Paused(var)
        }
    }
    impl ::std::convert::From<ProxiableUUIDCall> for CompoundFCMCalls {
        fn from(var: ProxiableUUIDCall) -> Self {
            CompoundFCMCalls::ProxiableUUID(var)
        }
    }
    impl ::std::convert::From<RateOracleCall> for CompoundFCMCalls {
        fn from(var: RateOracleCall) -> Self {
            CompoundFCMCalls::RateOracle(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for CompoundFCMCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            CompoundFCMCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<SetPausabilityCall> for CompoundFCMCalls {
        fn from(var: SetPausabilityCall) -> Self {
            CompoundFCMCalls::SetPausability(var)
        }
    }
    impl ::std::convert::From<SettleTraderCall> for CompoundFCMCalls {
        fn from(var: SettleTraderCall) -> Self {
            CompoundFCMCalls::SettleTrader(var)
        }
    }
    impl ::std::convert::From<TradersCall> for CompoundFCMCalls {
        fn from(var: TradersCall) -> Self {
            CompoundFCMCalls::Traders(var)
        }
    }
    impl ::std::convert::From<TransferMarginToMarginEngineTraderCall> for CompoundFCMCalls {
        fn from(var: TransferMarginToMarginEngineTraderCall) -> Self {
            CompoundFCMCalls::TransferMarginToMarginEngineTrader(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for CompoundFCMCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            CompoundFCMCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UnderlyingTokenCall> for CompoundFCMCalls {
        fn from(var: UnderlyingTokenCall) -> Self {
            CompoundFCMCalls::UnderlyingToken(var)
        }
    }
    impl ::std::convert::From<UnwindFullyCollateralisedFixedTakerSwapCall> for CompoundFCMCalls {
        fn from(var: UnwindFullyCollateralisedFixedTakerSwapCall) -> Self {
            CompoundFCMCalls::UnwindFullyCollateralisedFixedTakerSwap(var)
        }
    }
    impl ::std::convert::From<UpgradeToCall> for CompoundFCMCalls {
        fn from(var: UpgradeToCall) -> Self {
            CompoundFCMCalls::UpgradeTo(var)
        }
    }
    impl ::std::convert::From<UpgradeToAndCallCall> for CompoundFCMCalls {
        fn from(var: UpgradeToAndCallCall) -> Self {
            CompoundFCMCalls::UpgradeToAndCall(var)
        }
    }
    impl ::std::convert::From<VammCall> for CompoundFCMCalls {
        fn from(var: VammCall) -> Self {
            CompoundFCMCalls::Vamm(var)
        }
    }
    #[doc = "Container type for all return fields from the `cToken` function with signature `cToken()` and selector `[105, 229, 39, 218]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct CtokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `getTraderMarginInCTokens` function with signature `getTraderMarginInCTokens(address)` and selector `[188, 97, 240, 45]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetTraderMarginInCTokensReturn {
        pub margin_in_yield_bearing_tokens: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getTraderWithYieldBearingAssets` function with signature `getTraderWithYieldBearingAssets(address)` and selector `[154, 47, 72, 245]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetTraderWithYieldBearingAssetsReturn {
        pub trader_info: Info,
    }
    #[doc = "Container type for all return fields from the `initiateFullyCollateralisedFixedTakerSwap` function with signature `initiateFullyCollateralisedFixedTakerSwap(uint256,uint160)` and selector `[85, 70, 138, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct InitiateFullyCollateralisedFixedTakerSwapReturn {
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[doc = "Container type for all return fields from the `marginEngine` function with signature `marginEngine()` and selector `[0, 64, 6, 224]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct MarginEngineReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `paused` function with signature `paused()` and selector `[92, 151, 90, 187]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct PausedReturn(pub bool);
    #[doc = "Container type for all return fields from the `proxiableUUID` function with signature `proxiableUUID()` and selector `[82, 209, 144, 45]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct ProxiableUUIDReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `rateOracle` function with signature `rateOracle()` and selector `[152, 244, 177, 178]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RateOracleReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `settleTrader` function with signature `settleTrader()` and selector `[235, 201, 176, 46]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct SettleTraderReturn {
        pub trader_settlement_cashflow: I256,
    }
    #[doc = "Container type for all return fields from the `traders` function with signature `traders(address)` and selector `[146, 168, 143, 162]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct TradersReturn {
        pub margin_in_scaled_yield_bearing_tokens: ethers::core::types::U256,
        pub fixed_token_balance: I256,
        pub variable_token_balance: I256,
        pub is_settled: bool,
    }
    #[doc = "Container type for all return fields from the `underlyingToken` function with signature `underlyingToken()` and selector `[36, 149, 165, 153]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct UnderlyingTokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `unwindFullyCollateralisedFixedTakerSwap` function with signature `unwindFullyCollateralisedFixedTakerSwap(uint256,uint160)` and selector `[3, 116, 34, 116]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct UnwindFullyCollateralisedFixedTakerSwapReturn {
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[doc = "Container type for all return fields from the `vamm` function with signature `vamm()` and selector `[224, 152, 55, 44]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VammReturn(pub ethers::core::types::Address);
}
