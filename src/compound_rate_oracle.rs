pub use compound_rate_oracle::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod compound_rate_oracle {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CompoundRateOracle was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static COMPOUNDRATEORACLE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"_ctoken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"ethPool\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"contract IERC20Minimal\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"uint32[]\",\"name\":\"_times\",\"type\":\"uint32[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"_results\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedIncomeReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedVariableDebtReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CTokenExchangeRateReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\",\"components\":[]}],\"type\":\"error\",\"name\":\"CanOnlyTradeIfUnlocked\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotLiquidate\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotSettleBeforeMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"DebugError\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedOppositeSigns\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedSqrtPriceZeroBeforeInit\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IRSNotionalAmountSpecifiedMustBeNonZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidMarginDelta\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"LidoGetPooledEthBySharesReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInBurn\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInMint\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginLessThanMinimum\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMet\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMetFCM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"NotEnoughFunds\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OOO\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyFCM\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyMarginEngine\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyOwnerCanUpdatePosition\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyVAMM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__Exp2InputTooBig\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__FromUintOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__LogInputTooSmall\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMath__MulDivOverflow\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNetZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNotSettled\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"RocketPoolGetEthValueReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"WithdrawalExceedsCurrentMargin\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"closeToOrBeyondMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSecondsSinceLastUpdate\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MinSecondsSinceLastUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestampScaled\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"observedValue\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"cardinalityNext\",\"type\":\"uint16\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OracleBufferUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RateCardinalityNext\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ONE_IN_WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"UNDERLYING_YIELD_BEARING_PROTOCOL_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ctoken\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentBlockSlope\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"blockChange\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getApyFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apyFromToWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getApyFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apyFromToWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getBlockSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockChange\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCurrentRateInRay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRate\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastRateSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateChange\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastUpdatedRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"resultRay\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRateFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRateFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rateCardinalityNext\",\"type\":\"uint16\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beforeOrAtRateValueRay\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"apyFromBeforeOrAtToAtOrAfterWad\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"timeDeltaBeforeOrAtToQueriedTimeWad\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"interpolateRateValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateValueRay\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minSecondsSinceLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint216\",\"name\":\"observedValue\",\"type\":\"uint216\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"oracleVars\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rateIndex\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"rateCardinality\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"rateCardinalityNext\",\"type\":\"uint16\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSecondsSinceLastUpdate\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMinSecondsSinceLastUpdate\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"settlementRateCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termStartTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"termEndTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"variableFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termStartTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"termEndTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"variableFactorNoCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"writeOracleEntry\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static COMPOUNDRATEORACLE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6101206040523480156200001257600080fd5b5060405162003b6938038062003b69833981016040819052620000359162000b5b565b83620000413362000273565b6001600160a01b0381166080524362010004556200006a620002c3602090811b62000ce317901c565b62010003805463ffffffff9290921663ffffffff199283161790556201000580549091166105dc17905550606462010006556001600160a01b03861660a05284806200013d5750836001600160a01b031660a0516001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015620000f757600080fd5b505afa1580156200010c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000132919062000c23565b6001600160a01b0316145b6200018f5760405162461bcd60e51b815260206004820152601360248201527f546f6b656e7320646f206e6f74206d617463680000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038416620001e75760405162461bcd60e51b815260206004820152601560248201527f756e6465726c79696e67206d7573742065786973740000000000000000000000604482015260640162000186565b60ff831660c081905260111115620002015760006200021f565b601160c05162000212919062000c60565b6200021f90600a62000d83565b60e05260c051601160ff909116106200023a57600062000257565b60c0516200024a90601162000c60565b6200025790600a62000d83565b61010052620002678282620002d5565b50505050505062000e9b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002d0426200059c565b905090565b620002e4600261ffff62000d94565b8251106200031e5760405162461bcd60e51b815260040162000186906020808252600490820152631350561560e21b604082015260600190565b8151815161ffff8216146200036b5760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b604482015260640162000186565b60006200037a82600162000db7565b61ffff166001600160401b0381111562000398576200039862000a03565b604051908082528060200260200182016040528015620003c2578160200160208202803683370190505b5090506000620003d483600162000db7565b61ffff166001600160401b03811115620003f257620003f262000a03565b6040519080825280602002602001820160405280156200041c578160200160208202803683370190505b50905060005b8361ffff16811015620004cd5785818151811062000444576200044462000de0565b602002602001015183828151811062000461576200046162000de0565b602002602001019063ffffffff16908163ffffffff168152505084818151811062000490576200049062000de0565b6020026020010151828281518110620004ad57620004ad62000de0565b602090810291909101015280620004c48162000df6565b91505062000422565b50600080620004db620005e3565b9150915081848661ffff1681518110620004f957620004f962000de0565b602002602001019063ffffffff16908163ffffffff168152505080838661ffff16815181106200052d576200052d62000de0565b6020026020010181815250506200055684846004620006d760201b62000cf3179092919060201c565b6003805461ffff948516620100000263ffff0000199486166401000000000265ffff0000ffff199092169590931694909417939093179190911617905550505050505050565b8063ffffffff81168114620005de5760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b604482015260640162000186565b919050565b600080600060a0516001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156200062457600080fd5b505afa15801562000639573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200065f919062000e14565b90508062000680576040516324988a7b60e01b815260040160405180910390fd5b601160ff1660c05160ff1610620006a85760e051620006a0908262000d94565b9150620006bb565b61010051620006b8908262000e2e565b91505b620006d0620002c360201b62000ce31760201c565b9250509091565b600080600061ffff855110620007195760405162461bcd60e51b815260040162000186906020808252600490820152631350561560e21b604082015260600190565b8451845161ffff821614620007665760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b604482015260640162000186565b60008161ffff1611620007a15760405162461bcd60e51b81526020600482015260026024820152610c1560f21b604482015260640162000186565b6000805b8261ffff168161ffff1610156200093757878161ffff1681518110620007cf57620007cf62000de0565b602002602001015163ffffffff168263ffffffff1610620008255760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b604482015260640162000186565b62000877888261ffff168151811062000842576200084262000de0565b6020026020010151888361ffff168151811062000863576200086362000de0565b60200260200101516200095860201b60201c565b898261ffff1661ffff811062000891576200089162000de0565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516640100000000027fff0000000000000000000000000000000000000000000000000000000000000090921663ffffffff9094169390931717929092161790558751889061ffff831690811062000917576200091762000de0565b6020026020010151915080806200092e9062000e50565b915050620007a5565b5081806200094760018262000e75565b945094509450505093509350939050565b60408051606081018252600080825260208201819052918101919091526001600160d81b03821115620009b75760405162461bcd60e51b815260040162000186906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff841681526001600160d81b03831660208201526001918101919091525b92915050565b6001600160a01b038116811462000a0057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000a445762000a4462000a03565b604052919050565b60006001600160401b0382111562000a685762000a6862000a03565b5060051b60200190565b600082601f83011262000a8457600080fd5b8151602062000a9d62000a978362000a4c565b62000a19565b82815260059290921b8401810191818101908684111562000abd57600080fd5b8286015b8481101562000aee57805163ffffffff8116811462000ae05760008081fd5b835291830191830162000ac1565b509695505050505050565b600082601f83011262000b0b57600080fd5b8151602062000b1e62000a978362000a4c565b82815260059290921b8401810191818101908684111562000b3e57600080fd5b8286015b8481101562000aee578051835291830191830162000b42565b60008060008060008060c0878903121562000b7557600080fd5b865162000b8281620009ea565b6020880151909650801515811462000b9957600080fd5b604088015190955062000bac81620009ea565b606088015190945060ff8116811462000bc457600080fd5b60808801519093506001600160401b038082111562000be257600080fd5b62000bf08a838b0162000a72565b935060a089015191508082111562000c0757600080fd5b5062000c1689828a0162000af9565b9150509295509295509295565b60006020828403121562000c3657600080fd5b815162000c4381620009ea565b9392505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101562000c7d5762000c7d62000c4a565b90039392505050565b600181815b8085111562000cc757816000190482111562000cab5762000cab62000c4a565b8085161562000cb957918102915b93841c939080029062000c8b565b509250929050565b60008262000ce057506001620009e4565b8162000cef57506000620009e4565b816001811462000d08576002811462000d135762000d33565b6001915050620009e4565b60ff84111562000d275762000d2762000c4a565b50506001821b620009e4565b5060208310610133831016604e8410600b841016171562000d58575081810a620009e4565b62000d64838362000c86565b806000190482111562000d7b5762000d7b62000c4a565b029392505050565b600062000c4360ff84168362000ccf565b60008262000db257634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff80831681851680830382111562000dd75762000dd762000c4a565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000e0d5762000e0d62000c4a565b5060010190565b60006020828403121562000e2757600080fd5b5051919050565b600081600019048311821515161562000e4b5762000e4b62000c4a565b500290565b600061ffff8083168181141562000e6b5762000e6b62000c4a565b6001019392505050565b600061ffff8381169083168181101562000e935762000e9362000c4a565b039392505050565b60805160a05160c05160e05161010051612c7b62000eee60003960006107f2015260006107c10152600081816102d2015261079501526000818161044d01526106e2015260006103340152612c7b6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637cf2cc9f116100f9578063c7db359b11610097578063f2fde38b11610071578063f2fde38b14610477578063f739670c1461048a578063f90ce5ba1461049d578063fe115fbe146104b557600080fd5b8063c7db359b14610400578063ccf3eb9f14610448578063efdf5d8b1461046f57600080fd5b806391aa375d116100d357806391aa375d146103a057806393556dbd146103cb578063bdb05092146103de578063c330c98d146103f157600080fd5b80637cf2cc9f1461037e5780638a6b8c5d146103875780638da5cb5b1461038f57600080fd5b8063313ce5671161016657806354124c641161014057806354124c641461031c5780636f307dc31461032f578063715018a61461036e5780637aa4db131461037657600080fd5b8063313ce567146102cd57806332148f67146102f4578063414535281461030957600080fd5b806322ff6568116101a257806322ff65681461022d57806324b18b1714610247578063252c09d71461027b57806325f258dd146102ba57600080fd5b80631195082e146101c9578063163e9c4f1461020757806317221ef11461021a575b600080fd5b6101f46101d73660046129ae565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101f46102153660046129e1565b6104bd565b6101f46102283660046129e1565b6104cf565b610235600281565b60405160ff90911681526020016101fe565b6201000554620100065461025f9163ffffffff169082565b6040805163ffffffff90931683526020830191909152016101fe565b61028e6102893660046129e1565b6104db565b6040805163ffffffff90941684526001600160d81b0390921660208401521515908201526060016101fe565b6101f46102c83660046129fa565b610515565b6102357f000000000000000000000000000000000000000000000000000000000000000081565b610307610302366004612a1c565b61058b565b005b6101f46103173660046129fa565b610611565b6101f461032a366004612a40565b610625565b6103567f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101fe565b61030761067a565b61030761068e565b6101f460025481565b61025f6106db565b6000546001600160a01b0316610356565b6201000654620100055463ffffffff165b6040805192835263ffffffff9091166020830152016101fe565b6101f46103d93660046129fa565b610829565b6103076103ec3660046129e1565b6108be565b6101f4670de0b6b3a764000081565b6003546104239061ffff80821691620100008104821691600160201b9091041683565b6040805161ffff948516815292841660208401529216918101919091526060016101fe565b6103567f000000000000000000000000000000000000000000000000000000000000000081565b6101f461090b565b610307610485366004612a6c565b610993565b6101f46104983660046129fa565b610a09565b6201000354620100045461025f9163ffffffff169082565b6103b1610b13565b60006104c98242610a09565b92915050565b60006104c98242610829565b60048161ffff81106104ec57600080fd5b015463ffffffff81169150600160201b81046001600160d81b031690600160f81b900460ff1683565b6000806105228484610f36565b90925090508015610584576000610542670de0b6b3a76400008604611074565b90506000610559670de0b6b3a76400008604611074565b63ffffffff928316600090815260016020908152604080832095909316825293909352909120839055505b5092915050565b600354600160201b900461ffff1660006105a7600483856110b9565b6003805461ffff808416600160201b810265ffff00000000199093169290921790925591925083161461060c5760405161ffff821681527f8a96a9c4bca0fb28be0fc5c84e95aff121a64e2533021e9d638bdc1f03b14ece9060200160405180910390a15b505050565b600061061d8383610f36565b509392505050565b600080610631836111ae565b90506000610647670de0b6b3a764000086612aab565b9050600061065582846111c5565b9050600061066282611204565b905061066e888261122e565b98975050505050505050565b61068261123c565b61068c6000611296565b565b6003546106b39061ffff80821691620100008104821691600160201b909104166112e6565b6003805463ffffffff19166201000061ffff9384160261ffff19161792909116919091179055565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190612ac3565b905080610791576040516324988a7b60e01b815260040160405180910390fd5b60117f000000000000000000000000000000000000000000000000000000000000000060ff16106107ed576107e67f000000000000000000000000000000000000000000000000000000000000000082612af2565b915061081a565b6108177f000000000000000000000000000000000000000000000000000000000000000082612b06565b91505b610822610ce3565b9250509091565b6000818311156108735760405162461bcd60e51b815260206004820152601060248201526f4d69736f72646572656420646174657360801b60448201526064015b60405180910390fd5b600061087f8484610a09565b9050600061088d8585612b25565b9050600061089a82611489565b905060006108a7826111ae565b90506108b384826114d6565b979650505050505050565b6108c661123c565b80600254146109085760028190556040518181527f88bd1242a1ad7dbba4967e0120324f17c382e4e3006e01dc3ffc0bf43e4b2a399060200160405180910390a15b50565b60008060006109186106db565b91509150610924610ce3565b63ffffffff168263ffffffff161061093c5792915050565b600080610947610b13565b915091508063ffffffff16828561095c610ce3565b6109669190612b3c565b63ffffffff166109769190612b06565b6109809190612af2565b61098a9084612aab565b94505050505090565b61099b61123c565b6001600160a01b038116610a005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161086a565b61090881611296565b600081831115610a475760405162461bcd60e51b815260206004820152600960248201526866726f6d203e20746f60b81b604482015260640161086a565b81831415610a57575060006104c9565b6000610a61610ce3565b90506000610a6e85611074565b90506000610a7b85611074565b600354909150600090610a9f908590859061ffff808216916201000090041661153b565b600354909150600090610ac3908690859061ffff808216916201000090041661153b565b905081811115610b05576000610af7676765c793fa10079d601b1b610ae8848661179c565b610af29190612b25565b6117aa565b96506104c995505050505050565b6000955050505050506104c9565b600354600090819061ffff16816001821015610b4757600354610b429060019062010000900461ffff16612b61565b610b5a565b600354610b5a9060019061ffff16612b61565b60035490915060026201000090910461ffff1610801590610b9b575060048161ffff1661ffff8110610b8e57610b8e612b7c565b0154600160f81b900460ff165b8015610bf8575060048261ffff1661ffff8110610bba57610bba612b7c565b0154600160201b90046001600160d81b0316600461ffff838116908110610be357610be3612b7c565b0154600160201b90046001600160d81b031611155b610c2a5760405162461bcd60e51b815260206004820152600360248201526204e45560ec1b604482015260640161086a565b60048161ffff1661ffff8110610c4257610c42612b7c565b0154600160201b90046001600160d81b0316600461ffff848116908110610c6b57610c6b612b7c565b0154610c879190600160201b90046001600160d81b0316612b92565b6001600160d81b0316935060048161ffff1661ffff8110610caa57610caa612b7c565b015463ffffffff16600461ffff808516908110610cc957610cc9612b7c565b0154610cdb919063ffffffff16612b3c565b925050509091565b6000610cee42611074565b905090565b600080600061ffff855110610d335760405162461bcd60e51b815260040161086a906020808252600490820152631350561560e21b604082015260600190565b8451845161ffff821614610d7e5760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b604482015260640161086a565b60008161ffff1611610db75760405162461bcd60e51b81526020600482015260026024820152610c1560f21b604482015260640161086a565b6000805b8261ffff168161ffff161015610f1757878161ffff1681518110610de157610de1612b7c565b602002602001015163ffffffff168263ffffffff1610610e355760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b604482015260640161086a565b610e79888261ffff1681518110610e4e57610e4e612b7c565b6020026020010151888361ffff1681518110610e6c57610e6c612b7c565b6020026020010151611836565b898261ffff1661ffff8110610e9057610e90612b7c565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff9094169390931717929092161790558751889061ffff8316908110610efa57610efa612b7c565b602002602001015191508080610f0f90612bb2565b915050610dbb565b508180610f25600182612b61565b945094509450505093509350939050565b60008080610f4d670de0b6b3a76400008604611074565b90506000610f64670de0b6b3a76400008604611074565b905060008263ffffffff16118015610f82575060008163ffffffff16115b610fb65760405162461bcd60e51b8152602060048201526005602482015264554e49545360d81b604482015260640161086a565b63ffffffff8083166000908152600160209081526040808320938516835292905220541561100c5763ffffffff80831660009081526001602090815260408083209385168352929052908120549450925061106b565b8063ffffffff1661101b610ce3565b63ffffffff16106110475761103c8263ffffffff168263ffffffff16610a09565b93506001925061106b565b6110648263ffffffff16611059610ce3565b63ffffffff16610a09565b9350600092505b50509250929050565b8063ffffffff811681146110b45760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b604482015260640161086a565b919050565b6000808361ffff16116110f25760405162461bcd60e51b81526020600482015260016024820152604960f81b604482015260640161086a565b61ffff8261ffff16106111365760405162461bcd60e51b815260206004820152600c60248201526b189d5999995c881b1a5b5a5d60a21b604482015260640161086a565b8261ffff168261ffff161161114c5750816111a7565b825b8261ffff168161ffff1610156111a2576001858261ffff1661ffff811061117757611177612b7c565b01805463ffffffff191663ffffffff929092169190911790558061119a81612bb2565b91505061114e565b508190505b9392505050565b60006104c9826a1a1601fc4ea7109e0000006118c3565b6000826111ea5781156111d95760006111e3565b670de0b6b3a76400005b90506104c9565b6111a76111ff6111f9856118d8565b84611988565b611994565b600080611224670de0b6b3a7640000676765c793fa10079d601b1b612af2565b6111a79084612b06565b60006111a7838360016119da565b6000546001600160a01b0316331461068c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161086a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060048661ffff1661ffff811061130357611303612b7c565b60408051606081018252929091015463ffffffff811683526001600160d81b03600160201b820416602084015260ff600160f81b90910416151590820152905060008061134e6106db565b60025485519294509092506113689163ffffffff16612aab565b8263ffffffff16101561138357878794509450505050611481565b7f5aec68e6980e788266f2f59f6fddb85f3e256ce6da46fdfab920b9b06aaa73756113ac611a8d565b6040805191825230602083015261ffff8b81168383015263ffffffff86166060840152608083018590528a811660a0840152891660c0830152519081900360e00190a162010004546113fe9043612b25565b6201000655620100035463ffffffff16611416610ce3565b6114209190612b3c565b62010005805463ffffffff191663ffffffff9290921691909117905543620100045561144a610ce3565b62010003805463ffffffff191663ffffffff928316179055611479906004908a90859085908c908c90611a9816565b945094505050505b935093915050565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218211156114c857604051633492ffd960e01b81526004810183905260240161086a565b50670de0b6b3a76400000290565b6000826114e5575060006104c9565b60006114fa6114f46001611489565b846118c3565b9050600061151c8561150c6001611489565b6115169190612aab565b836111c5565b90506115286001611489565b6115329082612b25565b95945050505050565b60008363ffffffff168563ffffffff16101561156a57604051632ff198e560e21b815260040160405180910390fd5b8363ffffffff168563ffffffff16141561162757604080516060810182526000808252602082018190529181019190915260048461ffff1661ffff81106115b3576115b3612b7c565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff16151593830193909352909250908716146116105761160961090b565b9150611621565b80602001516001600160d81b031691505b50611794565b600061163161090b565b90506000806116456004888a868a8a611be0565b91509150816000015163ffffffff168763ffffffff1614156116765781602001516001600160d81b03169350611790565b805163ffffffff8881169116141561169d5780602001516001600160d81b03169350611790565b600082602001516001600160d81b031682602001516001600160d81b0316111561170c576000676765c793fa10079d601b1b6116f384602001516001600160d81b031686602001516001600160d81b031661179c565b6116fd9190612b25565b9050611708816117aa565b9150505b8251825160009161173f91670de0b6b3a76400009161172a91612b3c565b63ffffffff1661173a9190612b06565b6111ae565b9050600061174d83836114d6565b905061178a85602001516001600160d81b031682670de0b6b3a764000088600001518e61177a9190612b3c565b63ffffffff1661032a9190612b06565b96505050505b5050505b949350505050565b60006111a783836001611dbc565b6000806117ca670de0b6b3a7640000676765c793fa10079d601b1b612af2565b6117d49084612af2565b905060026117f5670de0b6b3a7640000676765c793fa10079d601b1b612af2565b6117ff9190612af2565b61181c670de0b6b3a7640000676765c793fa10079d601b1b612af2565b6118269085612bd4565b106104c9576111a7600182612aab565b60408051606081018252600080825260208201819052918101919091526001600160d81b038211156118935760405162461bcd60e51b815260040161086a906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff9390931683526001600160d81b0391909116602083015260019082015290565b60006111a783670de0b6b3a764000084611e57565b6000670de0b6b3a764000082101561190657604051633621413760e21b81526004810183905260240161086a565b600061191b670de0b6b3a76400008404611f25565b670de0b6b3a7640000808202935090915083821c9081141561193e575050919050565b6706f05b59d3b200005b801561198057670de0b6b3a7640000828002049150671bc16d674ec800008210611978579283019260019190911c905b60011c611948565b505050919050565b60006111a78383612008565b6000680a688906bd8b00000082106119c257604051634a4f26f160e01b81526004810183905260240161086a565b670de0b6b3a7640000604083901b046111a7816120ca565b60008315806119e7575082155b156119f4575060006111a7565b6001826001811115611a0857611a08612be8565b14611a1b57670de0b6b3a7640000611a28565b676765c793fa10079d601b1b5b6001836001811115611a3c57611a3c612be8565b14611a5957611a546002670de0b6b3a7640000612af2565b611a6f565b611a6f6002676765c793fa10079d601b1b612af2565b611a798587612b06565b611a839190612aab565b6117949190612af2565b6000610cee42611489565b6000806000888861ffff1661ffff8110611ab457611ab4612b7c565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff161515938301939093529092509088161415611b0f5787859250925050611bd5565b8461ffff168461ffff16118015611b375750611b2c600186612b61565b61ffff168861ffff16145b15611b4457839150611b48565b8491505b81611b54896001612bfe565b611b5e9190612c24565b9250611b6a8787611836565b898461ffff1661ffff8110611b8157611b81612b7c565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff909416939093171792909216179055505b965096945050505050565b60408051606081018252600080825260208201819052918101919091526040805160608101825260008082526020820181905291810191909152878461ffff1661ffff8110611c3157611c31612b7c565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff1615159383019390935290935090881610611cb0578663ffffffff16826000015163ffffffff161415611c9c57611bd5565b81611ca78787611836565b91509150611bd5565b8783611cbd866001612bfe565b611cc79190612c24565b61ffff1661ffff8110611cdc57611cdc612b7c565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181018290529250611d615760408051606081018252895463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181019190915291505b815163ffffffff80891691161115611da15760405162461bcd60e51b815260206004820152600360248201526213d31160ea1b604482015260640161086a565b611dad888886866127c5565b91509150965096945050505050565b600082611df45760405162461bcd60e51b815260040161086a906020808252600490820152630444956360e41b604082015260600190565b6000611e01600285612af2565b905083816001856001811115611e1957611e19612be8565b14611e2c57670de0b6b3a7640000611e39565b676765c793fa10079d601b1b5b611e439088612b06565b611e4d9190612aab565b6115329190612af2565b600080806000198587098587029250828110838203039150508060001415611e9257838281611e8857611e88612adc565b04925050506111a7565b838110611ebc57604051631dcf306360e21b8152600481018290526024810185905260440161086a565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000600160801b8210611f4557608091821c91611f429082612aab565b90505b680100000000000000008210611f6857604091821c91611f659082612aab565b90505b600160201b8210611f8657602091821c91611f839082612aab565b90505b620100008210611fa357601091821c91611fa09082612aab565b90505b6101008210611fbf57600891821c91611fbc9082612aab565b90505b60108210611fda57600491821c91611fd79082612aab565b90505b60048210611ff557600291821c91611ff29082612aab565b90505b600282106110b4576104c9600182612aab565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061204c5760405163698d9a0160e11b81526004810182905260240161086a565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826120865780670de0b6b3a76400008504019450505050506104c9565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6780000000000000008216156120ee5768016a09e667f3bcc9090260401c5b67400000000000000082161561210d576801306fe0a31b7152df0260401c5b67200000000000000082161561212c576801172b83c7d517adce0260401c5b67100000000000000082161561214b5768010b5586cf9890f62a0260401c5b67080000000000000082161561216a576801059b0d31585743ae0260401c5b67040000000000000082161561218957680102c9a3e778060ee70260401c5b6702000000000000008216156121a85768010163da9fb33356d80260401c5b6701000000000000008216156121c757680100b1afa5abcbed610260401c5b66800000000000008216156121e55768010058c86da1c09ea20260401c5b6640000000000000821615612203576801002c605e2e8cec500260401c5b662000000000000082161561222157680100162f3904051fa10260401c5b661000000000000082161561223f576801000b175effdc76ba0260401c5b660800000000000082161561225d57680100058ba01fb9f96d0260401c5b660400000000000082161561227b5768010002c5cc37da94920260401c5b6602000000000000821615612299576801000162e525ee05470260401c5b66010000000000008216156122b75768010000b17255775c040260401c5b658000000000008216156122d4576801000058b91b5bc9ae0260401c5b654000000000008216156122f157680100002c5c89d5ec6d0260401c5b6520000000000082161561230e5768010000162e43f4f8310260401c5b6510000000000082161561232b57680100000b1721bcfc9a0260401c5b650800000000008216156123485768010000058b90cf1e6e0260401c5b65040000000000821615612365576801000002c5c863b73f0260401c5b6502000000000082161561238257680100000162e430e5a20260401c5b6501000000000082161561239f576801000000b1721835510260401c5b6480000000008216156123bb57680100000058b90c0b490260401c5b6440000000008216156123d75768010000002c5c8601cc0260401c5b6420000000008216156123f3576801000000162e42fff00260401c5b64100000000082161561240f5768010000000b17217fbb0260401c5b64080000000082161561242b576801000000058b90bfce0260401c5b64040000000082161561244757680100000002c5c85fe30260401c5b6402000000008216156124635768010000000162e42ff10260401c5b600160201b82161561247e57680100000000b17217f80260401c5b63800000008216156124995768010000000058b90bfc0260401c5b63400000008216156124b4576801000000002c5c85fe0260401c5b63200000008216156124cf57680100000000162e42ff0260401c5b63100000008216156124ea576801000000000b17217f0260401c5b630800000082161561250557680100000000058b90c00260401c5b63040000008216156125205768010000000002c5c8600260401c5b630200000082161561253b576801000000000162e4300260401c5b63010000008216156125565768010000000000b172180260401c5b62800000821615612570576801000000000058b90c0260401c5b6240000082161561258a57680100000000002c5c860260401c5b622000008216156125a45768010000000000162e430260401c5b621000008216156125be57680100000000000b17210260401c5b620800008216156125d85768010000000000058b910260401c5b620400008216156125f2576801000000000002c5c80260401c5b6202000082161561260c57680100000000000162e40260401c5b62010000821615612626576801000000000000b1720260401c5b61800082161561263f57680100000000000058b90260401c5b6140008216156126585768010000000000002c5d0260401c5b612000821615612671576801000000000000162e0260401c5b61100082161561268a5768010000000000000b170260401c5b6108008216156126a3576801000000000000058c0260401c5b6104008216156126bc57680100000000000002c60260401c5b6102008216156126d557680100000000000001630260401c5b6101008216156126ee57680100000000000000b10260401c5b608082161561270657680100000000000000590260401c5b604082161561271e576801000000000000002c0260401c5b602082161561273657680100000000000000160260401c5b601082161561274e576801000000000000000b0260401c5b600882161561276657680100000000000000060260401c5b600482161561277e57680100000000000000030260401c5b600282161561279657680100000000000000010260401c5b60018216156127ae57680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052909183612806866001612bfe565b6128109190612c24565b61ffff169050600060018561ffff168361282a9190612aab565b6128349190612b25565b905060005b60016128458385612aab565b901c90508861285861ffff881683612bd4565b61ffff811061286957612869612b7c565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff16151591810182905295506128c0576128b9816001612aab565b9250612839565b8861ffff87166128d1836001612aab565b6128db9190612bd4565b61ffff81106128ec576128ec612b7c565b60408051606081018252919092015463ffffffff8082168352600160201b82046001600160d81b03166020840152600160f81b90910460ff16151592820192909252865190955089821691161180159081906129585750846000015163ffffffff168963ffffffff1611155b15612963575061298e565b8061297a57612973600183612b25565b9250612988565b612985826001612aab565b93505b50612839565b50505094509492505050565b803563ffffffff811681146110b457600080fd5b600080604083850312156129c157600080fd5b6129ca8361299a565b91506129d86020840161299a565b90509250929050565b6000602082840312156129f357600080fd5b5035919050565b60008060408385031215612a0d57600080fd5b50508035926020909101359150565b600060208284031215612a2e57600080fd5b813561ffff811681146111a757600080fd5b600080600060608486031215612a5557600080fd5b505081359360208301359350604090920135919050565b600060208284031215612a7e57600080fd5b81356001600160a01b03811681146111a757600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612abe57612abe612a95565b500190565b600060208284031215612ad557600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082612b0157612b01612adc565b500490565b6000816000190483118215151615612b2057612b20612a95565b500290565b600082821015612b3757612b37612a95565b500390565b600063ffffffff83811690831681811015612b5957612b59612a95565b039392505050565b600061ffff83811690831681811015612b5957612b59612a95565b634e487b7160e01b600052603260045260246000fd5b60006001600160d81b0383811690831681811015612b5957612b59612a95565b600061ffff80831681811415612bca57612bca612a95565b6001019392505050565b600082612be357612be3612adc565b500690565b634e487b7160e01b600052602160045260246000fd5b600061ffff808316818516808303821115612c1b57612c1b612a95565b01949350505050565b600061ffff80841680612c3957612c39612adc565b9216919091069291505056fea264697066735822122090f10156c80e9ac5202aec07d9a7d9e80bb9122918e87fc0714e5bf98bcaf62164736f6c63430008090033" . parse () . expect ("invalid bytecode")
        });
    pub struct CompoundRateOracle<M>(ethers::contract::Contract<M>);
    impl<M> Clone for CompoundRateOracle<M> {
        fn clone(&self) -> Self {
            CompoundRateOracle(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for CompoundRateOracle<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CompoundRateOracle<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CompoundRateOracle))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> CompoundRateOracle<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), COMPOUNDRATEORACLE_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                COMPOUNDRATEORACLE_ABI.clone(),
                COMPOUNDRATEORACLE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `ONE_IN_WAD` (0xc330c98d) function"]
        pub fn one_in_wad(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([195, 48, 201, 141], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` (0x22ff6568) function"]
        pub fn underlying_yield_bearing_protocol_id(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([34, 255, 101, 104], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `ctoken` (0xccf3eb9f) function"]
        pub fn ctoken(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([204, 243, 235, 159], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `currentBlockSlope` (0x24b18b17) function"]
        pub fn current_block_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([36, 177, 139, 23], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decimals` (0x313ce567) function"]
        pub fn decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([49, 60, 229, 103], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getApyFrom` (0x17221ef1) function"]
        pub fn get_apy_from(
            &self,
            from: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([23, 34, 30, 241], from)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getApyFromTo` (0x93556dbd) function"]
        pub fn get_apy_from_to(
            &self,
            from: ethers::core::types::U256,
            to: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([147, 85, 109, 189], (from, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getBlockSlope` (0x91aa375d) function"]
        pub fn get_block_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, u32)> {
            self.0
                .method_hash([145, 170, 55, 93], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCurrentRateInRay` (0xefdf5d8b) function"]
        pub fn get_current_rate_in_ray(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([239, 223, 93, 139], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLastRateSlope` (0xfe115fbe) function"]
        pub fn get_last_rate_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, u32)> {
            self.0
                .method_hash([254, 17, 95, 190], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLastUpdatedRate` (0x8a6b8c5d) function"]
        pub fn get_last_updated_rate(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([138, 107, 140, 93], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getRateFrom` (0x163e9c4f) function"]
        pub fn get_rate_from(
            &self,
            from: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([22, 62, 156, 79], from)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getRateFromTo` (0xf739670c) function"]
        pub fn get_rate_from_to(
            &self,
            from: ethers::core::types::U256,
            to: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([247, 57, 103, 12], (from, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `increaseObservationCardinalityNext` (0x32148f67) function"]
        pub fn increase_observation_cardinality_next(
            &self,
            rate_cardinality_next: u16,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([50, 20, 143, 103], rate_cardinality_next)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `interpolateRateValue` (0x54124c64) function"]
        pub fn interpolate_rate_value(
            &self,
            before_or_at_rate_value_ray: ethers::core::types::U256,
            apy_from_before_or_at_to_at_or_after_wad: ethers::core::types::U256,
            time_delta_before_or_at_to_queried_time_wad: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [84, 18, 76, 100],
                    (
                        before_or_at_rate_value_ray,
                        apy_from_before_or_at_to_at_or_after_wad,
                        time_delta_before_or_at_to_queried_time_wad,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lastUpdatedBlock` (0xf90ce5ba) function"]
        pub fn last_updated_block(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([249, 12, 229, 186], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `minSecondsSinceLastUpdate` (0x7cf2cc9f) function"]
        pub fn min_seconds_since_last_update(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([124, 242, 204, 159], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `observations` (0x252c09d7) function"]
        pub fn observations(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256, bool)>
        {
            self.0
                .method_hash([37, 44, 9, 215], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `oracleVars` (0xc7db359b) function"]
        pub fn oracle_vars(&self) -> ethers::contract::builders::ContractCall<M, (u16, u16, u16)> {
            self.0
                .method_hash([199, 219, 53, 155], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `owner` (0x8da5cb5b) function"]
        pub fn owner(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `renounceOwnership` (0x715018a6) function"]
        pub fn renounce_ownership(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setMinSecondsSinceLastUpdate` (0xbdb05092) function"]
        pub fn set_min_seconds_since_last_update(
            &self,
            min_seconds_since_last_update: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([189, 176, 80, 146], min_seconds_since_last_update)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `settlementRateCache` (0x1195082e) function"]
        pub fn settlement_rate_cache(
            &self,
            p0: u32,
            p1: u32,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([17, 149, 8, 46], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnership` (0xf2fde38b) function"]
        pub fn transfer_ownership(
            &self,
            new_owner: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `underlying` (0x6f307dc3) function"]
        pub fn underlying(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([111, 48, 125, 195], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `variableFactor` (0x25f258dd) function"]
        pub fn variable_factor(
            &self,
            term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
            term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [37, 242, 88, 221],
                    (
                        term_start_timestamp_in_wei_seconds,
                        term_end_timestamp_in_wei_seconds,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `variableFactorNoCache` (0x41453528) function"]
        pub fn variable_factor_no_cache(
            &self,
            term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
            term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [65, 69, 53, 40],
                    (
                        term_start_timestamp_in_wei_seconds,
                        term_end_timestamp_in_wei_seconds,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `writeOracleEntry` (0x7aa4db13) function"]
        pub fn write_oracle_entry(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([122, 164, 219, 19], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MinSecondsSinceLastUpdate` event"]
        pub fn min_seconds_since_last_update_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MinSecondsSinceLastUpdateFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OracleBufferUpdate` event"]
        pub fn oracle_buffer_update_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OracleBufferUpdateFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OwnershipTransferred` event"]
        pub fn ownership_transferred_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `RateCardinalityNext` event"]
        pub fn rate_cardinality_next_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, RateCardinalityNextFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, CompoundRateOracleEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for CompoundRateOracle<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedIncomeReturnedZero` with signature `AavePoolGetReserveNormalizedIncomeReturnedZero()` and selector `[189, 137, 197, 175]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedIncomeReturnedZero",
        abi = "AavePoolGetReserveNormalizedIncomeReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedIncomeReturnedZero;
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedVariableDebtReturnedZero` with signature `AavePoolGetReserveNormalizedVariableDebtReturnedZero()` and selector `[195, 75, 105, 61]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedVariableDebtReturnedZero",
        abi = "AavePoolGetReserveNormalizedVariableDebtReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedVariableDebtReturnedZero;
    #[doc = "Custom Error type `CTokenExchangeRateReturnedZero` with signature `CTokenExchangeRateReturnedZero()` and selector `[36, 152, 138, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CTokenExchangeRateReturnedZero",
        abi = "CTokenExchangeRateReturnedZero()"
    )]
    pub struct CTokenExchangeRateReturnedZero;
    #[doc = "Custom Error type `CanOnlyTradeIfUnlocked` with signature `CanOnlyTradeIfUnlocked(bool)` and selector `[121, 143, 4, 94]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CanOnlyTradeIfUnlocked", abi = "CanOnlyTradeIfUnlocked(bool)")]
    pub struct CanOnlyTradeIfUnlocked {
        pub unlocked: bool,
    }
    #[doc = "Custom Error type `CannotLiquidate` with signature `CannotLiquidate()` and selector `[191, 135, 199, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CannotLiquidate", abi = "CannotLiquidate()")]
    pub struct CannotLiquidate;
    #[doc = "Custom Error type `CannotSettleBeforeMaturity` with signature `CannotSettleBeforeMaturity()` and selector `[2, 230, 23, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CannotSettleBeforeMaturity",
        abi = "CannotSettleBeforeMaturity()"
    )]
    pub struct CannotSettleBeforeMaturity;
    #[doc = "Custom Error type `DebugError` with signature `DebugError(uint256,uint256)` and selector `[186, 113, 84, 234]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "DebugError", abi = "DebugError(uint256,uint256)")]
    pub struct DebugError {
        pub x: ethers::core::types::U256,
        pub y: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `ExpectedOppositeSigns` with signature `ExpectedOppositeSigns(int256,int256)` and selector `[35, 133, 254, 176]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedOppositeSigns",
        abi = "ExpectedOppositeSigns(int256,int256)"
    )]
    pub struct ExpectedOppositeSigns {
        pub amount_0: I256,
        pub amount_1: I256,
    }
    #[doc = "Custom Error type `ExpectedSqrtPriceZeroBeforeInit` with signature `ExpectedSqrtPriceZeroBeforeInit(uint160)` and selector `[162, 248, 112, 60]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedSqrtPriceZeroBeforeInit",
        abi = "ExpectedSqrtPriceZeroBeforeInit(uint160)"
    )]
    pub struct ExpectedSqrtPriceZeroBeforeInit {
        pub sqrt_price_x96: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `IRSNotionalAmountSpecifiedMustBeNonZero` with signature `IRSNotionalAmountSpecifiedMustBeNonZero()` and selector `[63, 82, 15, 170]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "IRSNotionalAmountSpecifiedMustBeNonZero",
        abi = "IRSNotionalAmountSpecifiedMustBeNonZero()"
    )]
    pub struct IRSNotionalAmountSpecifiedMustBeNonZero;
    #[doc = "Custom Error type `InvalidMarginDelta` with signature `InvalidMarginDelta()` and selector `[138, 204, 109, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "InvalidMarginDelta", abi = "InvalidMarginDelta()")]
    pub struct InvalidMarginDelta;
    #[doc = "Custom Error type `LidoGetPooledEthBySharesReturnedZero` with signature `LidoGetPooledEthBySharesReturnedZero()` and selector `[255, 248, 220, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LidoGetPooledEthBySharesReturnedZero",
        abi = "LidoGetPooledEthBySharesReturnedZero()"
    )]
    pub struct LidoGetPooledEthBySharesReturnedZero;
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInBurn` with signature `LiquidityDeltaMustBePositiveInBurn(uint128)` and selector `[192, 157, 38, 9]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInBurn",
        abi = "LiquidityDeltaMustBePositiveInBurn(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInBurn {
        pub amount: u128,
    }
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInMint` with signature `LiquidityDeltaMustBePositiveInMint(uint128)` and selector `[216, 69, 154, 52]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInMint",
        abi = "LiquidityDeltaMustBePositiveInMint(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInMint {
        pub amount: u128,
    }
    #[doc = "Custom Error type `MarginLessThanMinimum` with signature `MarginLessThanMinimum(int256)` and selector `[107, 79, 255, 36]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "MarginLessThanMinimum", abi = "MarginLessThanMinimum(int256)")]
    pub struct MarginLessThanMinimum {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMet` with signature `MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)` and selector `[67, 242, 131, 33]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMet",
        abi = "MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)"
    )]
    pub struct MarginRequirementNotMet {
        pub margin_requirement: I256,
        pub tick: i32,
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMetFCM` with signature `MarginRequirementNotMetFCM(int256)` and selector `[65, 213, 168, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMetFCM",
        abi = "MarginRequirementNotMetFCM(int256)"
    )]
    pub struct MarginRequirementNotMetFCM {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `NotEnoughFunds` with signature `NotEnoughFunds(uint256,uint256)` and selector `[140, 144, 83, 104]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "NotEnoughFunds", abi = "NotEnoughFunds(uint256,uint256)")]
    pub struct NotEnoughFunds {
        pub requested: ethers::core::types::U256,
        pub available: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `OOO` with signature `OOO()` and selector `[191, 198, 99, 148]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OOO", abi = "OOO()")]
    pub struct OOO;
    #[doc = "Custom Error type `OnlyFCM` with signature `OnlyFCM()` and selector `[93, 138, 54, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyFCM", abi = "OnlyFCM()")]
    pub struct OnlyFCM;
    #[doc = "Custom Error type `OnlyMarginEngine` with signature `OnlyMarginEngine()` and selector `[40, 52, 210, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyMarginEngine", abi = "OnlyMarginEngine()")]
    pub struct OnlyMarginEngine;
    #[doc = "Custom Error type `OnlyOwnerCanUpdatePosition` with signature `OnlyOwnerCanUpdatePosition()` and selector `[125, 164, 92, 231]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "OnlyOwnerCanUpdatePosition",
        abi = "OnlyOwnerCanUpdatePosition()"
    )]
    pub struct OnlyOwnerCanUpdatePosition;
    #[doc = "Custom Error type `OnlyVAMM` with signature `OnlyVAMM()` and selector `[123, 216, 216, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyVAMM", abi = "OnlyVAMM()")]
    pub struct OnlyVAMM;
    #[doc = "Custom Error type `PRBMathUD60x18__Exp2InputTooBig` with signature `PRBMathUD60x18__Exp2InputTooBig(uint256)` and selector `[74, 79, 38, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__Exp2InputTooBig",
        abi = "PRBMathUD60x18__Exp2InputTooBig(uint256)"
    )]
    pub struct PRBMathUD60x18__Exp2InputTooBig {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMathUD60x18__FromUintOverflow` with signature `PRBMathUD60x18__FromUintOverflow(uint256)` and selector `[52, 146, 255, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__FromUintOverflow",
        abi = "PRBMathUD60x18__FromUintOverflow(uint256)"
    )]
    pub struct PRBMathUD60x18__FromUintOverflow {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMathUD60x18__LogInputTooSmall` with signature `PRBMathUD60x18__LogInputTooSmall(uint256)` and selector `[216, 133, 4, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__LogInputTooSmall",
        abi = "PRBMathUD60x18__LogInputTooSmall(uint256)"
    )]
    pub struct PRBMathUD60x18__LogInputTooSmall {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMath__MulDivFixedPointOverflow` with signature `PRBMath__MulDivFixedPointOverflow(uint256)` and selector `[211, 27, 52, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMath__MulDivFixedPointOverflow",
        abi = "PRBMath__MulDivFixedPointOverflow(uint256)"
    )]
    pub struct PRBMath__MulDivFixedPointOverflow {
        pub prod_1: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMath__MulDivOverflow` with signature `PRBMath__MulDivOverflow(uint256,uint256)` and selector `[119, 60, 193, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMath__MulDivOverflow",
        abi = "PRBMath__MulDivOverflow(uint256,uint256)"
    )]
    pub struct PRBMath__MulDivOverflow {
        pub prod_1: ethers::core::types::U256,
        pub denominator: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PositionNetZero` with signature `PositionNetZero()` and selector `[89, 32, 46, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNetZero", abi = "PositionNetZero()")]
    pub struct PositionNetZero;
    #[doc = "Custom Error type `PositionNotSettled` with signature `PositionNotSettled()` and selector `[90, 108, 31, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNotSettled", abi = "PositionNotSettled()")]
    pub struct PositionNotSettled;
    #[doc = "Custom Error type `RocketPoolGetEthValueReturnedZero` with signature `RocketPoolGetEthValueReturnedZero()` and selector `[18, 70, 158, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "RocketPoolGetEthValueReturnedZero",
        abi = "RocketPoolGetEthValueReturnedZero()"
    )]
    pub struct RocketPoolGetEthValueReturnedZero;
    #[doc = "Custom Error type `WithdrawalExceedsCurrentMargin` with signature `WithdrawalExceedsCurrentMargin()` and selector `[41, 126, 28, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "WithdrawalExceedsCurrentMargin",
        abi = "WithdrawalExceedsCurrentMargin()"
    )]
    pub struct WithdrawalExceedsCurrentMargin;
    #[doc = "Custom Error type `closeToOrBeyondMaturity` with signature `closeToOrBeyondMaturity()` and selector `[83, 173, 234, 156]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "closeToOrBeyondMaturity", abi = "closeToOrBeyondMaturity()")]
    pub struct closeToOrBeyondMaturity;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundRateOracleErrors {
        AavePoolGetReserveNormalizedIncomeReturnedZero(
            AavePoolGetReserveNormalizedIncomeReturnedZero,
        ),
        AavePoolGetReserveNormalizedVariableDebtReturnedZero(
            AavePoolGetReserveNormalizedVariableDebtReturnedZero,
        ),
        CTokenExchangeRateReturnedZero(CTokenExchangeRateReturnedZero),
        CanOnlyTradeIfUnlocked(CanOnlyTradeIfUnlocked),
        CannotLiquidate(CannotLiquidate),
        CannotSettleBeforeMaturity(CannotSettleBeforeMaturity),
        DebugError(DebugError),
        ExpectedOppositeSigns(ExpectedOppositeSigns),
        ExpectedSqrtPriceZeroBeforeInit(ExpectedSqrtPriceZeroBeforeInit),
        IRSNotionalAmountSpecifiedMustBeNonZero(IRSNotionalAmountSpecifiedMustBeNonZero),
        InvalidMarginDelta(InvalidMarginDelta),
        LidoGetPooledEthBySharesReturnedZero(LidoGetPooledEthBySharesReturnedZero),
        LiquidityDeltaMustBePositiveInBurn(LiquidityDeltaMustBePositiveInBurn),
        LiquidityDeltaMustBePositiveInMint(LiquidityDeltaMustBePositiveInMint),
        MarginLessThanMinimum(MarginLessThanMinimum),
        MarginRequirementNotMet(MarginRequirementNotMet),
        MarginRequirementNotMetFCM(MarginRequirementNotMetFCM),
        NotEnoughFunds(NotEnoughFunds),
        OOO(OOO),
        OnlyFCM(OnlyFCM),
        OnlyMarginEngine(OnlyMarginEngine),
        OnlyOwnerCanUpdatePosition(OnlyOwnerCanUpdatePosition),
        OnlyVAMM(OnlyVAMM),
        PRBMathUD60x18__Exp2InputTooBig(PRBMathUD60x18__Exp2InputTooBig),
        PRBMathUD60x18__FromUintOverflow(PRBMathUD60x18__FromUintOverflow),
        PRBMathUD60x18__LogInputTooSmall(PRBMathUD60x18__LogInputTooSmall),
        PRBMath__MulDivFixedPointOverflow(PRBMath__MulDivFixedPointOverflow),
        PRBMath__MulDivOverflow(PRBMath__MulDivOverflow),
        PositionNetZero(PositionNetZero),
        PositionNotSettled(PositionNotSettled),
        RocketPoolGetEthValueReturnedZero(RocketPoolGetEthValueReturnedZero),
        WithdrawalExceedsCurrentMargin(WithdrawalExceedsCurrentMargin),
        closeToOrBeyondMaturity(closeToOrBeyondMaturity),
    }
    impl ethers::core::abi::AbiDecode for CompoundRateOracleErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok (decoded) = < AavePoolGetReserveNormalizedIncomeReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (CompoundRateOracleErrors :: AavePoolGetReserveNormalizedIncomeReturnedZero (decoded)) }
            if let Ok (decoded) = < AavePoolGetReserveNormalizedVariableDebtReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (CompoundRateOracleErrors :: AavePoolGetReserveNormalizedVariableDebtReturnedZero (decoded)) }
            if let Ok(decoded) =
                <CTokenExchangeRateReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::CTokenExchangeRateReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <CanOnlyTradeIfUnlocked as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::CanOnlyTradeIfUnlocked(decoded));
            }
            if let Ok(decoded) =
                <CannotLiquidate as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::CannotLiquidate(decoded));
            }
            if let Ok(decoded) =
                <CannotSettleBeforeMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::CannotSettleBeforeMaturity(
                    decoded,
                ));
            }
            if let Ok(decoded) = <DebugError as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::DebugError(decoded));
            }
            if let Ok(decoded) =
                <ExpectedOppositeSigns as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::ExpectedOppositeSigns(decoded));
            }
            if let Ok(decoded) =
                <ExpectedSqrtPriceZeroBeforeInit as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <IRSNotionalAmountSpecifiedMustBeNonZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    CompoundRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(decoded),
                );
            }
            if let Ok(decoded) =
                <InvalidMarginDelta as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::InvalidMarginDelta(decoded));
            }
            if let Ok(decoded) =
                <LidoGetPooledEthBySharesReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(decoded));
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInBurn as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(decoded));
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInMint as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::LiquidityDeltaMustBePositiveInMint(decoded));
            }
            if let Ok(decoded) =
                <MarginLessThanMinimum as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::MarginLessThanMinimum(decoded));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMet as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::MarginRequirementNotMet(decoded));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMetFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::MarginRequirementNotMetFCM(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <NotEnoughFunds as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::NotEnoughFunds(decoded));
            }
            if let Ok(decoded) = <OOO as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundRateOracleErrors::OOO(decoded));
            }
            if let Ok(decoded) = <OnlyFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundRateOracleErrors::OnlyFCM(decoded));
            }
            if let Ok(decoded) =
                <OnlyMarginEngine as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::OnlyMarginEngine(decoded));
            }
            if let Ok(decoded) =
                <OnlyOwnerCanUpdatePosition as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::OnlyOwnerCanUpdatePosition(
                    decoded,
                ));
            }
            if let Ok(decoded) = <OnlyVAMM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(CompoundRateOracleErrors::OnlyVAMM(decoded));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__Exp2InputTooBig as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__FromUintOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::PRBMathUD60x18__FromUintOverflow(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__LogInputTooSmall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMath__MulDivFixedPointOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::PRBMath__MulDivFixedPointOverflow(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMath__MulDivOverflow as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::PRBMath__MulDivOverflow(decoded));
            }
            if let Ok(decoded) =
                <PositionNetZero as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::PositionNetZero(decoded));
            }
            if let Ok(decoded) =
                <PositionNotSettled as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::PositionNotSettled(decoded));
            }
            if let Ok(decoded) =
                <RocketPoolGetEthValueReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::RocketPoolGetEthValueReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <WithdrawalExceedsCurrentMargin as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleErrors::WithdrawalExceedsCurrentMargin(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <closeToOrBeyondMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleErrors::closeToOrBeyondMaturity(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CompoundRateOracleErrors {
        fn encode(self) -> Vec<u8> {
            match self {
                CompoundRateOracleErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(
                    element,
                ) => element.encode(),
                CompoundRateOracleErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                    element,
                ) => element.encode(),
                CompoundRateOracleErrors::CTokenExchangeRateReturnedZero(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::CanOnlyTradeIfUnlocked(element) => element.encode(),
                CompoundRateOracleErrors::CannotLiquidate(element) => element.encode(),
                CompoundRateOracleErrors::CannotSettleBeforeMaturity(element) => element.encode(),
                CompoundRateOracleErrors::DebugError(element) => element.encode(),
                CompoundRateOracleErrors::ExpectedOppositeSigns(element) => element.encode(),
                CompoundRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::InvalidMarginDelta(element) => element.encode(),
                CompoundRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::LiquidityDeltaMustBePositiveInMint(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::MarginLessThanMinimum(element) => element.encode(),
                CompoundRateOracleErrors::MarginRequirementNotMet(element) => element.encode(),
                CompoundRateOracleErrors::MarginRequirementNotMetFCM(element) => element.encode(),
                CompoundRateOracleErrors::NotEnoughFunds(element) => element.encode(),
                CompoundRateOracleErrors::OOO(element) => element.encode(),
                CompoundRateOracleErrors::OnlyFCM(element) => element.encode(),
                CompoundRateOracleErrors::OnlyMarginEngine(element) => element.encode(),
                CompoundRateOracleErrors::OnlyOwnerCanUpdatePosition(element) => element.encode(),
                CompoundRateOracleErrors::OnlyVAMM(element) => element.encode(),
                CompoundRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::PRBMathUD60x18__FromUintOverflow(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::PRBMath__MulDivFixedPointOverflow(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::PRBMath__MulDivOverflow(element) => element.encode(),
                CompoundRateOracleErrors::PositionNetZero(element) => element.encode(),
                CompoundRateOracleErrors::PositionNotSettled(element) => element.encode(),
                CompoundRateOracleErrors::RocketPoolGetEthValueReturnedZero(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::WithdrawalExceedsCurrentMargin(element) => {
                    element.encode()
                }
                CompoundRateOracleErrors::closeToOrBeyondMaturity(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CompoundRateOracleErrors {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundRateOracleErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(
                    element,
                ) => element.fmt(f),
                CompoundRateOracleErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                    element,
                ) => element.fmt(f),
                CompoundRateOracleErrors::CTokenExchangeRateReturnedZero(element) => element.fmt(f),
                CompoundRateOracleErrors::CanOnlyTradeIfUnlocked(element) => element.fmt(f),
                CompoundRateOracleErrors::CannotLiquidate(element) => element.fmt(f),
                CompoundRateOracleErrors::CannotSettleBeforeMaturity(element) => element.fmt(f),
                CompoundRateOracleErrors::DebugError(element) => element.fmt(f),
                CompoundRateOracleErrors::ExpectedOppositeSigns(element) => element.fmt(f),
                CompoundRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::InvalidMarginDelta(element) => element.fmt(f),
                CompoundRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::LiquidityDeltaMustBePositiveInMint(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::MarginLessThanMinimum(element) => element.fmt(f),
                CompoundRateOracleErrors::MarginRequirementNotMet(element) => element.fmt(f),
                CompoundRateOracleErrors::MarginRequirementNotMetFCM(element) => element.fmt(f),
                CompoundRateOracleErrors::NotEnoughFunds(element) => element.fmt(f),
                CompoundRateOracleErrors::OOO(element) => element.fmt(f),
                CompoundRateOracleErrors::OnlyFCM(element) => element.fmt(f),
                CompoundRateOracleErrors::OnlyMarginEngine(element) => element.fmt(f),
                CompoundRateOracleErrors::OnlyOwnerCanUpdatePosition(element) => element.fmt(f),
                CompoundRateOracleErrors::OnlyVAMM(element) => element.fmt(f),
                CompoundRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::PRBMathUD60x18__FromUintOverflow(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::PRBMath__MulDivFixedPointOverflow(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::PRBMath__MulDivOverflow(element) => element.fmt(f),
                CompoundRateOracleErrors::PositionNetZero(element) => element.fmt(f),
                CompoundRateOracleErrors::PositionNotSettled(element) => element.fmt(f),
                CompoundRateOracleErrors::RocketPoolGetEthValueReturnedZero(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleErrors::WithdrawalExceedsCurrentMargin(element) => element.fmt(f),
                CompoundRateOracleErrors::closeToOrBeyondMaturity(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedIncomeReturnedZero>
        for CompoundRateOracleErrors
    {
        fn from(var: AavePoolGetReserveNormalizedIncomeReturnedZero) -> Self {
            CompoundRateOracleErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(var)
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedVariableDebtReturnedZero>
        for CompoundRateOracleErrors
    {
        fn from(var: AavePoolGetReserveNormalizedVariableDebtReturnedZero) -> Self {
            CompoundRateOracleErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(var)
        }
    }
    impl ::std::convert::From<CTokenExchangeRateReturnedZero> for CompoundRateOracleErrors {
        fn from(var: CTokenExchangeRateReturnedZero) -> Self {
            CompoundRateOracleErrors::CTokenExchangeRateReturnedZero(var)
        }
    }
    impl ::std::convert::From<CanOnlyTradeIfUnlocked> for CompoundRateOracleErrors {
        fn from(var: CanOnlyTradeIfUnlocked) -> Self {
            CompoundRateOracleErrors::CanOnlyTradeIfUnlocked(var)
        }
    }
    impl ::std::convert::From<CannotLiquidate> for CompoundRateOracleErrors {
        fn from(var: CannotLiquidate) -> Self {
            CompoundRateOracleErrors::CannotLiquidate(var)
        }
    }
    impl ::std::convert::From<CannotSettleBeforeMaturity> for CompoundRateOracleErrors {
        fn from(var: CannotSettleBeforeMaturity) -> Self {
            CompoundRateOracleErrors::CannotSettleBeforeMaturity(var)
        }
    }
    impl ::std::convert::From<DebugError> for CompoundRateOracleErrors {
        fn from(var: DebugError) -> Self {
            CompoundRateOracleErrors::DebugError(var)
        }
    }
    impl ::std::convert::From<ExpectedOppositeSigns> for CompoundRateOracleErrors {
        fn from(var: ExpectedOppositeSigns) -> Self {
            CompoundRateOracleErrors::ExpectedOppositeSigns(var)
        }
    }
    impl ::std::convert::From<ExpectedSqrtPriceZeroBeforeInit> for CompoundRateOracleErrors {
        fn from(var: ExpectedSqrtPriceZeroBeforeInit) -> Self {
            CompoundRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(var)
        }
    }
    impl ::std::convert::From<IRSNotionalAmountSpecifiedMustBeNonZero> for CompoundRateOracleErrors {
        fn from(var: IRSNotionalAmountSpecifiedMustBeNonZero) -> Self {
            CompoundRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(var)
        }
    }
    impl ::std::convert::From<InvalidMarginDelta> for CompoundRateOracleErrors {
        fn from(var: InvalidMarginDelta) -> Self {
            CompoundRateOracleErrors::InvalidMarginDelta(var)
        }
    }
    impl ::std::convert::From<LidoGetPooledEthBySharesReturnedZero> for CompoundRateOracleErrors {
        fn from(var: LidoGetPooledEthBySharesReturnedZero) -> Self {
            CompoundRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInBurn> for CompoundRateOracleErrors {
        fn from(var: LiquidityDeltaMustBePositiveInBurn) -> Self {
            CompoundRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInMint> for CompoundRateOracleErrors {
        fn from(var: LiquidityDeltaMustBePositiveInMint) -> Self {
            CompoundRateOracleErrors::LiquidityDeltaMustBePositiveInMint(var)
        }
    }
    impl ::std::convert::From<MarginLessThanMinimum> for CompoundRateOracleErrors {
        fn from(var: MarginLessThanMinimum) -> Self {
            CompoundRateOracleErrors::MarginLessThanMinimum(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMet> for CompoundRateOracleErrors {
        fn from(var: MarginRequirementNotMet) -> Self {
            CompoundRateOracleErrors::MarginRequirementNotMet(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMetFCM> for CompoundRateOracleErrors {
        fn from(var: MarginRequirementNotMetFCM) -> Self {
            CompoundRateOracleErrors::MarginRequirementNotMetFCM(var)
        }
    }
    impl ::std::convert::From<NotEnoughFunds> for CompoundRateOracleErrors {
        fn from(var: NotEnoughFunds) -> Self {
            CompoundRateOracleErrors::NotEnoughFunds(var)
        }
    }
    impl ::std::convert::From<OOO> for CompoundRateOracleErrors {
        fn from(var: OOO) -> Self {
            CompoundRateOracleErrors::OOO(var)
        }
    }
    impl ::std::convert::From<OnlyFCM> for CompoundRateOracleErrors {
        fn from(var: OnlyFCM) -> Self {
            CompoundRateOracleErrors::OnlyFCM(var)
        }
    }
    impl ::std::convert::From<OnlyMarginEngine> for CompoundRateOracleErrors {
        fn from(var: OnlyMarginEngine) -> Self {
            CompoundRateOracleErrors::OnlyMarginEngine(var)
        }
    }
    impl ::std::convert::From<OnlyOwnerCanUpdatePosition> for CompoundRateOracleErrors {
        fn from(var: OnlyOwnerCanUpdatePosition) -> Self {
            CompoundRateOracleErrors::OnlyOwnerCanUpdatePosition(var)
        }
    }
    impl ::std::convert::From<OnlyVAMM> for CompoundRateOracleErrors {
        fn from(var: OnlyVAMM) -> Self {
            CompoundRateOracleErrors::OnlyVAMM(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__Exp2InputTooBig> for CompoundRateOracleErrors {
        fn from(var: PRBMathUD60x18__Exp2InputTooBig) -> Self {
            CompoundRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__FromUintOverflow> for CompoundRateOracleErrors {
        fn from(var: PRBMathUD60x18__FromUintOverflow) -> Self {
            CompoundRateOracleErrors::PRBMathUD60x18__FromUintOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__LogInputTooSmall> for CompoundRateOracleErrors {
        fn from(var: PRBMathUD60x18__LogInputTooSmall) -> Self {
            CompoundRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(var)
        }
    }
    impl ::std::convert::From<PRBMath__MulDivFixedPointOverflow> for CompoundRateOracleErrors {
        fn from(var: PRBMath__MulDivFixedPointOverflow) -> Self {
            CompoundRateOracleErrors::PRBMath__MulDivFixedPointOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMath__MulDivOverflow> for CompoundRateOracleErrors {
        fn from(var: PRBMath__MulDivOverflow) -> Self {
            CompoundRateOracleErrors::PRBMath__MulDivOverflow(var)
        }
    }
    impl ::std::convert::From<PositionNetZero> for CompoundRateOracleErrors {
        fn from(var: PositionNetZero) -> Self {
            CompoundRateOracleErrors::PositionNetZero(var)
        }
    }
    impl ::std::convert::From<PositionNotSettled> for CompoundRateOracleErrors {
        fn from(var: PositionNotSettled) -> Self {
            CompoundRateOracleErrors::PositionNotSettled(var)
        }
    }
    impl ::std::convert::From<RocketPoolGetEthValueReturnedZero> for CompoundRateOracleErrors {
        fn from(var: RocketPoolGetEthValueReturnedZero) -> Self {
            CompoundRateOracleErrors::RocketPoolGetEthValueReturnedZero(var)
        }
    }
    impl ::std::convert::From<WithdrawalExceedsCurrentMargin> for CompoundRateOracleErrors {
        fn from(var: WithdrawalExceedsCurrentMargin) -> Self {
            CompoundRateOracleErrors::WithdrawalExceedsCurrentMargin(var)
        }
    }
    impl ::std::convert::From<closeToOrBeyondMaturity> for CompoundRateOracleErrors {
        fn from(var: closeToOrBeyondMaturity) -> Self {
            CompoundRateOracleErrors::closeToOrBeyondMaturity(var)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "MinSecondsSinceLastUpdate",
        abi = "MinSecondsSinceLastUpdate(uint256)"
    )]
    pub struct MinSecondsSinceLastUpdateFilter {
        pub min_seconds_since_last_update: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OracleBufferUpdate",
        abi = "OracleBufferUpdate(uint256,address,uint16,uint32,uint256,uint16,uint16)"
    )]
    pub struct OracleBufferUpdateFilter {
        pub block_timestamp_scaled: ethers::core::types::U256,
        pub source: ethers::core::types::Address,
        pub index: u16,
        pub block_timestamp: u32,
        pub observed_value: ethers::core::types::U256,
        pub cardinality: u16,
        pub cardinality_next: u16,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "RateCardinalityNext", abi = "RateCardinalityNext(uint16)")]
    pub struct RateCardinalityNextFilter {
        pub observation_cardinality_next_new: u16,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundRateOracleEvents {
        MinSecondsSinceLastUpdateFilter(MinSecondsSinceLastUpdateFilter),
        OracleBufferUpdateFilter(OracleBufferUpdateFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        RateCardinalityNextFilter(RateCardinalityNextFilter),
    }
    impl ethers::contract::EthLogDecode for CompoundRateOracleEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MinSecondsSinceLastUpdateFilter::decode_log(log) {
                return Ok(CompoundRateOracleEvents::MinSecondsSinceLastUpdateFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = OracleBufferUpdateFilter::decode_log(log) {
                return Ok(CompoundRateOracleEvents::OracleBufferUpdateFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(CompoundRateOracleEvents::OwnershipTransferredFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = RateCardinalityNextFilter::decode_log(log) {
                return Ok(CompoundRateOracleEvents::RateCardinalityNextFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for CompoundRateOracleEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundRateOracleEvents::MinSecondsSinceLastUpdateFilter(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleEvents::OracleBufferUpdateFilter(element) => element.fmt(f),
                CompoundRateOracleEvents::OwnershipTransferredFilter(element) => element.fmt(f),
                CompoundRateOracleEvents::RateCardinalityNextFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `ONE_IN_WAD` function with signature `ONE_IN_WAD()` and selector `[195, 48, 201, 141]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "ONE_IN_WAD", abi = "ONE_IN_WAD()")]
    pub struct OneInWadCall;
    #[doc = "Container type for all input parameters for the `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` function with signature `UNDERLYING_YIELD_BEARING_PROTOCOL_ID()` and selector `[34, 255, 101, 104]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "UNDERLYING_YIELD_BEARING_PROTOCOL_ID",
        abi = "UNDERLYING_YIELD_BEARING_PROTOCOL_ID()"
    )]
    pub struct UnderlyingYieldBearingProtocolIdCall;
    #[doc = "Container type for all input parameters for the `ctoken` function with signature `ctoken()` and selector `[204, 243, 235, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "ctoken", abi = "ctoken()")]
    pub struct CtokenCall;
    #[doc = "Container type for all input parameters for the `currentBlockSlope` function with signature `currentBlockSlope()` and selector `[36, 177, 139, 23]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "currentBlockSlope", abi = "currentBlockSlope()")]
    pub struct CurrentBlockSlopeCall;
    #[doc = "Container type for all input parameters for the `decimals` function with signature `decimals()` and selector `[49, 60, 229, 103]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "decimals", abi = "decimals()")]
    pub struct DecimalsCall;
    #[doc = "Container type for all input parameters for the `getApyFrom` function with signature `getApyFrom(uint256)` and selector `[23, 34, 30, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getApyFrom", abi = "getApyFrom(uint256)")]
    pub struct GetApyFromCall {
        pub from: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getApyFromTo` function with signature `getApyFromTo(uint256,uint256)` and selector `[147, 85, 109, 189]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getApyFromTo", abi = "getApyFromTo(uint256,uint256)")]
    pub struct GetApyFromToCall {
        pub from: ethers::core::types::U256,
        pub to: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getBlockSlope` function with signature `getBlockSlope()` and selector `[145, 170, 55, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getBlockSlope", abi = "getBlockSlope()")]
    pub struct GetBlockSlopeCall;
    #[doc = "Container type for all input parameters for the `getCurrentRateInRay` function with signature `getCurrentRateInRay()` and selector `[239, 223, 93, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getCurrentRateInRay", abi = "getCurrentRateInRay()")]
    pub struct GetCurrentRateInRayCall;
    #[doc = "Container type for all input parameters for the `getLastRateSlope` function with signature `getLastRateSlope()` and selector `[254, 17, 95, 190]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getLastRateSlope", abi = "getLastRateSlope()")]
    pub struct GetLastRateSlopeCall;
    #[doc = "Container type for all input parameters for the `getLastUpdatedRate` function with signature `getLastUpdatedRate()` and selector `[138, 107, 140, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getLastUpdatedRate", abi = "getLastUpdatedRate()")]
    pub struct GetLastUpdatedRateCall;
    #[doc = "Container type for all input parameters for the `getRateFrom` function with signature `getRateFrom(uint256)` and selector `[22, 62, 156, 79]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getRateFrom", abi = "getRateFrom(uint256)")]
    pub struct GetRateFromCall {
        pub from: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getRateFromTo` function with signature `getRateFromTo(uint256,uint256)` and selector `[247, 57, 103, 12]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getRateFromTo", abi = "getRateFromTo(uint256,uint256)")]
    pub struct GetRateFromToCall {
        pub from: ethers::core::types::U256,
        pub to: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `increaseObservationCardinalityNext` function with signature `increaseObservationCardinalityNext(uint16)` and selector `[50, 20, 143, 103]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "increaseObservationCardinalityNext",
        abi = "increaseObservationCardinalityNext(uint16)"
    )]
    pub struct IncreaseObservationCardinalityNextCall {
        pub rate_cardinality_next: u16,
    }
    #[doc = "Container type for all input parameters for the `interpolateRateValue` function with signature `interpolateRateValue(uint256,uint256,uint256)` and selector `[84, 18, 76, 100]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "interpolateRateValue",
        abi = "interpolateRateValue(uint256,uint256,uint256)"
    )]
    pub struct InterpolateRateValueCall {
        pub before_or_at_rate_value_ray: ethers::core::types::U256,
        pub apy_from_before_or_at_to_at_or_after_wad: ethers::core::types::U256,
        pub time_delta_before_or_at_to_queried_time_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `lastUpdatedBlock` function with signature `lastUpdatedBlock()` and selector `[249, 12, 229, 186]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastUpdatedBlock", abi = "lastUpdatedBlock()")]
    pub struct LastUpdatedBlockCall;
    #[doc = "Container type for all input parameters for the `minSecondsSinceLastUpdate` function with signature `minSecondsSinceLastUpdate()` and selector `[124, 242, 204, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "minSecondsSinceLastUpdate",
        abi = "minSecondsSinceLastUpdate()"
    )]
    pub struct MinSecondsSinceLastUpdateCall;
    #[doc = "Container type for all input parameters for the `observations` function with signature `observations(uint256)` and selector `[37, 44, 9, 215]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "observations", abi = "observations(uint256)")]
    pub struct ObservationsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `oracleVars` function with signature `oracleVars()` and selector `[199, 219, 53, 155]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "oracleVars", abi = "oracleVars()")]
    pub struct OracleVarsCall;
    #[doc = "Container type for all input parameters for the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    #[doc = "Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `[113, 80, 24, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    #[doc = "Container type for all input parameters for the `setMinSecondsSinceLastUpdate` function with signature `setMinSecondsSinceLastUpdate(uint256)` and selector `[189, 176, 80, 146]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "setMinSecondsSinceLastUpdate",
        abi = "setMinSecondsSinceLastUpdate(uint256)"
    )]
    pub struct SetMinSecondsSinceLastUpdateCall {
        pub min_seconds_since_last_update: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `settlementRateCache` function with signature `settlementRateCache(uint32,uint32)` and selector `[17, 149, 8, 46]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "settlementRateCache",
        abi = "settlementRateCache(uint32,uint32)"
    )]
    pub struct SettlementRateCacheCall(pub u32, pub u32);
    #[doc = "Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `[242, 253, 227, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `underlying` function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "underlying", abi = "underlying()")]
    pub struct UnderlyingCall;
    #[doc = "Container type for all input parameters for the `variableFactor` function with signature `variableFactor(uint256,uint256)` and selector `[37, 242, 88, 221]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "variableFactor", abi = "variableFactor(uint256,uint256)")]
    pub struct VariableFactorCall {
        pub term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
        pub term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `variableFactorNoCache` function with signature `variableFactorNoCache(uint256,uint256)` and selector `[65, 69, 53, 40]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "variableFactorNoCache",
        abi = "variableFactorNoCache(uint256,uint256)"
    )]
    pub struct VariableFactorNoCacheCall {
        pub term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
        pub term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `writeOracleEntry` function with signature `writeOracleEntry()` and selector `[122, 164, 219, 19]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "writeOracleEntry", abi = "writeOracleEntry()")]
    pub struct WriteOracleEntryCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CompoundRateOracleCalls {
        OneInWad(OneInWadCall),
        UnderlyingYieldBearingProtocolId(UnderlyingYieldBearingProtocolIdCall),
        Ctoken(CtokenCall),
        CurrentBlockSlope(CurrentBlockSlopeCall),
        Decimals(DecimalsCall),
        GetApyFrom(GetApyFromCall),
        GetApyFromTo(GetApyFromToCall),
        GetBlockSlope(GetBlockSlopeCall),
        GetCurrentRateInRay(GetCurrentRateInRayCall),
        GetLastRateSlope(GetLastRateSlopeCall),
        GetLastUpdatedRate(GetLastUpdatedRateCall),
        GetRateFrom(GetRateFromCall),
        GetRateFromTo(GetRateFromToCall),
        IncreaseObservationCardinalityNext(IncreaseObservationCardinalityNextCall),
        InterpolateRateValue(InterpolateRateValueCall),
        LastUpdatedBlock(LastUpdatedBlockCall),
        MinSecondsSinceLastUpdate(MinSecondsSinceLastUpdateCall),
        Observations(ObservationsCall),
        OracleVars(OracleVarsCall),
        Owner(OwnerCall),
        RenounceOwnership(RenounceOwnershipCall),
        SetMinSecondsSinceLastUpdate(SetMinSecondsSinceLastUpdateCall),
        SettlementRateCache(SettlementRateCacheCall),
        TransferOwnership(TransferOwnershipCall),
        Underlying(UnderlyingCall),
        VariableFactor(VariableFactorCall),
        VariableFactorNoCache(VariableFactorNoCacheCall),
        WriteOracleEntry(WriteOracleEntryCall),
    }
    impl ethers::core::abi::AbiDecode for CompoundRateOracleCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <OneInWadCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::OneInWad(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingYieldBearingProtocolIdCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleCalls::UnderlyingYieldBearingProtocolId(
                    decoded,
                ));
            }
            if let Ok(decoded) = <CtokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::Ctoken(decoded));
            }
            if let Ok(decoded) =
                <CurrentBlockSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::CurrentBlockSlope(decoded));
            }
            if let Ok(decoded) =
                <DecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::Decimals(decoded));
            }
            if let Ok(decoded) =
                <GetApyFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::GetApyFrom(decoded));
            }
            if let Ok(decoded) =
                <GetApyFromToCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::GetApyFromTo(decoded));
            }
            if let Ok(decoded) =
                <GetBlockSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::GetBlockSlope(decoded));
            }
            if let Ok(decoded) =
                <GetCurrentRateInRayCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::GetCurrentRateInRay(decoded));
            }
            if let Ok(decoded) =
                <GetLastRateSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::GetLastRateSlope(decoded));
            }
            if let Ok(decoded) =
                <GetLastUpdatedRateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::GetLastUpdatedRate(decoded));
            }
            if let Ok(decoded) =
                <GetRateFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::GetRateFrom(decoded));
            }
            if let Ok(decoded) =
                <GetRateFromToCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::GetRateFromTo(decoded));
            }
            if let Ok(decoded) =
                <IncreaseObservationCardinalityNextCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleCalls::IncreaseObservationCardinalityNext(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <InterpolateRateValueCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::InterpolateRateValue(decoded));
            }
            if let Ok(decoded) =
                <LastUpdatedBlockCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::LastUpdatedBlock(decoded));
            }
            if let Ok(decoded) =
                <MinSecondsSinceLastUpdateCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleCalls::MinSecondsSinceLastUpdate(decoded));
            }
            if let Ok(decoded) =
                <ObservationsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::Observations(decoded));
            }
            if let Ok(decoded) =
                <OracleVarsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::OracleVars(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::Owner(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <SetMinSecondsSinceLastUpdateCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CompoundRateOracleCalls::SetMinSecondsSinceLastUpdate(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <SettlementRateCacheCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::SettlementRateCache(decoded));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::Underlying(decoded));
            }
            if let Ok(decoded) =
                <VariableFactorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::VariableFactor(decoded));
            }
            if let Ok(decoded) =
                <VariableFactorNoCacheCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::VariableFactorNoCache(decoded));
            }
            if let Ok(decoded) =
                <WriteOracleEntryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CompoundRateOracleCalls::WriteOracleEntry(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CompoundRateOracleCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CompoundRateOracleCalls::OneInWad(element) => element.encode(),
                CompoundRateOracleCalls::UnderlyingYieldBearingProtocolId(element) => {
                    element.encode()
                }
                CompoundRateOracleCalls::Ctoken(element) => element.encode(),
                CompoundRateOracleCalls::CurrentBlockSlope(element) => element.encode(),
                CompoundRateOracleCalls::Decimals(element) => element.encode(),
                CompoundRateOracleCalls::GetApyFrom(element) => element.encode(),
                CompoundRateOracleCalls::GetApyFromTo(element) => element.encode(),
                CompoundRateOracleCalls::GetBlockSlope(element) => element.encode(),
                CompoundRateOracleCalls::GetCurrentRateInRay(element) => element.encode(),
                CompoundRateOracleCalls::GetLastRateSlope(element) => element.encode(),
                CompoundRateOracleCalls::GetLastUpdatedRate(element) => element.encode(),
                CompoundRateOracleCalls::GetRateFrom(element) => element.encode(),
                CompoundRateOracleCalls::GetRateFromTo(element) => element.encode(),
                CompoundRateOracleCalls::IncreaseObservationCardinalityNext(element) => {
                    element.encode()
                }
                CompoundRateOracleCalls::InterpolateRateValue(element) => element.encode(),
                CompoundRateOracleCalls::LastUpdatedBlock(element) => element.encode(),
                CompoundRateOracleCalls::MinSecondsSinceLastUpdate(element) => element.encode(),
                CompoundRateOracleCalls::Observations(element) => element.encode(),
                CompoundRateOracleCalls::OracleVars(element) => element.encode(),
                CompoundRateOracleCalls::Owner(element) => element.encode(),
                CompoundRateOracleCalls::RenounceOwnership(element) => element.encode(),
                CompoundRateOracleCalls::SetMinSecondsSinceLastUpdate(element) => element.encode(),
                CompoundRateOracleCalls::SettlementRateCache(element) => element.encode(),
                CompoundRateOracleCalls::TransferOwnership(element) => element.encode(),
                CompoundRateOracleCalls::Underlying(element) => element.encode(),
                CompoundRateOracleCalls::VariableFactor(element) => element.encode(),
                CompoundRateOracleCalls::VariableFactorNoCache(element) => element.encode(),
                CompoundRateOracleCalls::WriteOracleEntry(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CompoundRateOracleCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CompoundRateOracleCalls::OneInWad(element) => element.fmt(f),
                CompoundRateOracleCalls::UnderlyingYieldBearingProtocolId(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleCalls::Ctoken(element) => element.fmt(f),
                CompoundRateOracleCalls::CurrentBlockSlope(element) => element.fmt(f),
                CompoundRateOracleCalls::Decimals(element) => element.fmt(f),
                CompoundRateOracleCalls::GetApyFrom(element) => element.fmt(f),
                CompoundRateOracleCalls::GetApyFromTo(element) => element.fmt(f),
                CompoundRateOracleCalls::GetBlockSlope(element) => element.fmt(f),
                CompoundRateOracleCalls::GetCurrentRateInRay(element) => element.fmt(f),
                CompoundRateOracleCalls::GetLastRateSlope(element) => element.fmt(f),
                CompoundRateOracleCalls::GetLastUpdatedRate(element) => element.fmt(f),
                CompoundRateOracleCalls::GetRateFrom(element) => element.fmt(f),
                CompoundRateOracleCalls::GetRateFromTo(element) => element.fmt(f),
                CompoundRateOracleCalls::IncreaseObservationCardinalityNext(element) => {
                    element.fmt(f)
                }
                CompoundRateOracleCalls::InterpolateRateValue(element) => element.fmt(f),
                CompoundRateOracleCalls::LastUpdatedBlock(element) => element.fmt(f),
                CompoundRateOracleCalls::MinSecondsSinceLastUpdate(element) => element.fmt(f),
                CompoundRateOracleCalls::Observations(element) => element.fmt(f),
                CompoundRateOracleCalls::OracleVars(element) => element.fmt(f),
                CompoundRateOracleCalls::Owner(element) => element.fmt(f),
                CompoundRateOracleCalls::RenounceOwnership(element) => element.fmt(f),
                CompoundRateOracleCalls::SetMinSecondsSinceLastUpdate(element) => element.fmt(f),
                CompoundRateOracleCalls::SettlementRateCache(element) => element.fmt(f),
                CompoundRateOracleCalls::TransferOwnership(element) => element.fmt(f),
                CompoundRateOracleCalls::Underlying(element) => element.fmt(f),
                CompoundRateOracleCalls::VariableFactor(element) => element.fmt(f),
                CompoundRateOracleCalls::VariableFactorNoCache(element) => element.fmt(f),
                CompoundRateOracleCalls::WriteOracleEntry(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<OneInWadCall> for CompoundRateOracleCalls {
        fn from(var: OneInWadCall) -> Self {
            CompoundRateOracleCalls::OneInWad(var)
        }
    }
    impl ::std::convert::From<UnderlyingYieldBearingProtocolIdCall> for CompoundRateOracleCalls {
        fn from(var: UnderlyingYieldBearingProtocolIdCall) -> Self {
            CompoundRateOracleCalls::UnderlyingYieldBearingProtocolId(var)
        }
    }
    impl ::std::convert::From<CtokenCall> for CompoundRateOracleCalls {
        fn from(var: CtokenCall) -> Self {
            CompoundRateOracleCalls::Ctoken(var)
        }
    }
    impl ::std::convert::From<CurrentBlockSlopeCall> for CompoundRateOracleCalls {
        fn from(var: CurrentBlockSlopeCall) -> Self {
            CompoundRateOracleCalls::CurrentBlockSlope(var)
        }
    }
    impl ::std::convert::From<DecimalsCall> for CompoundRateOracleCalls {
        fn from(var: DecimalsCall) -> Self {
            CompoundRateOracleCalls::Decimals(var)
        }
    }
    impl ::std::convert::From<GetApyFromCall> for CompoundRateOracleCalls {
        fn from(var: GetApyFromCall) -> Self {
            CompoundRateOracleCalls::GetApyFrom(var)
        }
    }
    impl ::std::convert::From<GetApyFromToCall> for CompoundRateOracleCalls {
        fn from(var: GetApyFromToCall) -> Self {
            CompoundRateOracleCalls::GetApyFromTo(var)
        }
    }
    impl ::std::convert::From<GetBlockSlopeCall> for CompoundRateOracleCalls {
        fn from(var: GetBlockSlopeCall) -> Self {
            CompoundRateOracleCalls::GetBlockSlope(var)
        }
    }
    impl ::std::convert::From<GetCurrentRateInRayCall> for CompoundRateOracleCalls {
        fn from(var: GetCurrentRateInRayCall) -> Self {
            CompoundRateOracleCalls::GetCurrentRateInRay(var)
        }
    }
    impl ::std::convert::From<GetLastRateSlopeCall> for CompoundRateOracleCalls {
        fn from(var: GetLastRateSlopeCall) -> Self {
            CompoundRateOracleCalls::GetLastRateSlope(var)
        }
    }
    impl ::std::convert::From<GetLastUpdatedRateCall> for CompoundRateOracleCalls {
        fn from(var: GetLastUpdatedRateCall) -> Self {
            CompoundRateOracleCalls::GetLastUpdatedRate(var)
        }
    }
    impl ::std::convert::From<GetRateFromCall> for CompoundRateOracleCalls {
        fn from(var: GetRateFromCall) -> Self {
            CompoundRateOracleCalls::GetRateFrom(var)
        }
    }
    impl ::std::convert::From<GetRateFromToCall> for CompoundRateOracleCalls {
        fn from(var: GetRateFromToCall) -> Self {
            CompoundRateOracleCalls::GetRateFromTo(var)
        }
    }
    impl ::std::convert::From<IncreaseObservationCardinalityNextCall> for CompoundRateOracleCalls {
        fn from(var: IncreaseObservationCardinalityNextCall) -> Self {
            CompoundRateOracleCalls::IncreaseObservationCardinalityNext(var)
        }
    }
    impl ::std::convert::From<InterpolateRateValueCall> for CompoundRateOracleCalls {
        fn from(var: InterpolateRateValueCall) -> Self {
            CompoundRateOracleCalls::InterpolateRateValue(var)
        }
    }
    impl ::std::convert::From<LastUpdatedBlockCall> for CompoundRateOracleCalls {
        fn from(var: LastUpdatedBlockCall) -> Self {
            CompoundRateOracleCalls::LastUpdatedBlock(var)
        }
    }
    impl ::std::convert::From<MinSecondsSinceLastUpdateCall> for CompoundRateOracleCalls {
        fn from(var: MinSecondsSinceLastUpdateCall) -> Self {
            CompoundRateOracleCalls::MinSecondsSinceLastUpdate(var)
        }
    }
    impl ::std::convert::From<ObservationsCall> for CompoundRateOracleCalls {
        fn from(var: ObservationsCall) -> Self {
            CompoundRateOracleCalls::Observations(var)
        }
    }
    impl ::std::convert::From<OracleVarsCall> for CompoundRateOracleCalls {
        fn from(var: OracleVarsCall) -> Self {
            CompoundRateOracleCalls::OracleVars(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for CompoundRateOracleCalls {
        fn from(var: OwnerCall) -> Self {
            CompoundRateOracleCalls::Owner(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for CompoundRateOracleCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            CompoundRateOracleCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<SetMinSecondsSinceLastUpdateCall> for CompoundRateOracleCalls {
        fn from(var: SetMinSecondsSinceLastUpdateCall) -> Self {
            CompoundRateOracleCalls::SetMinSecondsSinceLastUpdate(var)
        }
    }
    impl ::std::convert::From<SettlementRateCacheCall> for CompoundRateOracleCalls {
        fn from(var: SettlementRateCacheCall) -> Self {
            CompoundRateOracleCalls::SettlementRateCache(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for CompoundRateOracleCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            CompoundRateOracleCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UnderlyingCall> for CompoundRateOracleCalls {
        fn from(var: UnderlyingCall) -> Self {
            CompoundRateOracleCalls::Underlying(var)
        }
    }
    impl ::std::convert::From<VariableFactorCall> for CompoundRateOracleCalls {
        fn from(var: VariableFactorCall) -> Self {
            CompoundRateOracleCalls::VariableFactor(var)
        }
    }
    impl ::std::convert::From<VariableFactorNoCacheCall> for CompoundRateOracleCalls {
        fn from(var: VariableFactorNoCacheCall) -> Self {
            CompoundRateOracleCalls::VariableFactorNoCache(var)
        }
    }
    impl ::std::convert::From<WriteOracleEntryCall> for CompoundRateOracleCalls {
        fn from(var: WriteOracleEntryCall) -> Self {
            CompoundRateOracleCalls::WriteOracleEntry(var)
        }
    }
    #[doc = "Container type for all return fields from the `ONE_IN_WAD` function with signature `ONE_IN_WAD()` and selector `[195, 48, 201, 141]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OneInWadReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` function with signature `UNDERLYING_YIELD_BEARING_PROTOCOL_ID()` and selector `[34, 255, 101, 104]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct UnderlyingYieldBearingProtocolIdReturn(pub u8);
    #[doc = "Container type for all return fields from the `ctoken` function with signature `ctoken()` and selector `[204, 243, 235, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct CtokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `currentBlockSlope` function with signature `currentBlockSlope()` and selector `[36, 177, 139, 23]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct CurrentBlockSlopeReturn {
        pub time_change: u32,
        pub block_change: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `decimals` function with signature `decimals()` and selector `[49, 60, 229, 103]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct DecimalsReturn(pub u8);
    #[doc = "Container type for all return fields from the `getApyFrom` function with signature `getApyFrom(uint256)` and selector `[23, 34, 30, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetApyFromReturn {
        pub apy_from_to_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getApyFromTo` function with signature `getApyFromTo(uint256,uint256)` and selector `[147, 85, 109, 189]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetApyFromToReturn {
        pub apy_from_to_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getBlockSlope` function with signature `getBlockSlope()` and selector `[145, 170, 55, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetBlockSlopeReturn {
        pub block_change: ethers::core::types::U256,
        pub time_change: u32,
    }
    #[doc = "Container type for all return fields from the `getCurrentRateInRay` function with signature `getCurrentRateInRay()` and selector `[239, 223, 93, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetCurrentRateInRayReturn {
        pub current_rate: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getLastRateSlope` function with signature `getLastRateSlope()` and selector `[254, 17, 95, 190]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetLastRateSlopeReturn {
        pub rate_change: ethers::core::types::U256,
        pub time_change: u32,
    }
    #[doc = "Container type for all return fields from the `getLastUpdatedRate` function with signature `getLastUpdatedRate()` and selector `[138, 107, 140, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetLastUpdatedRateReturn {
        pub timestamp: u32,
        pub result_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getRateFrom` function with signature `getRateFrom(uint256)` and selector `[22, 62, 156, 79]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetRateFromReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `getRateFromTo` function with signature `getRateFromTo(uint256,uint256)` and selector `[247, 57, 103, 12]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetRateFromToReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `interpolateRateValue` function with signature `interpolateRateValue(uint256,uint256,uint256)` and selector `[84, 18, 76, 100]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct InterpolateRateValueReturn {
        pub rate_value_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `lastUpdatedBlock` function with signature `lastUpdatedBlock()` and selector `[249, 12, 229, 186]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct LastUpdatedBlockReturn {
        pub timestamp: u32,
        pub number: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `minSecondsSinceLastUpdate` function with signature `minSecondsSinceLastUpdate()` and selector `[124, 242, 204, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct MinSecondsSinceLastUpdateReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `observations` function with signature `observations(uint256)` and selector `[37, 44, 9, 215]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct ObservationsReturn {
        pub block_timestamp: u32,
        pub observed_value: ethers::core::types::U256,
        pub initialized: bool,
    }
    #[doc = "Container type for all return fields from the `oracleVars` function with signature `oracleVars()` and selector `[199, 219, 53, 155]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OracleVarsReturn {
        pub rate_index: u16,
        pub rate_cardinality: u16,
        pub rate_cardinality_next: u16,
    }
    #[doc = "Container type for all return fields from the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `settlementRateCache` function with signature `settlementRateCache(uint32,uint32)` and selector `[17, 149, 8, 46]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct SettlementRateCacheReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `underlying` function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct UnderlyingReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `variableFactor` function with signature `variableFactor(uint256,uint256)` and selector `[37, 242, 88, 221]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VariableFactorReturn {
        pub result_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `variableFactorNoCache` function with signature `variableFactorNoCache(uint256,uint256)` and selector `[65, 69, 53, 40]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VariableFactorNoCacheReturn {
        pub result_wad: ethers::core::types::U256,
    }
}
