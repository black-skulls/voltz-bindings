pub use lido_rate_oracle::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod lido_rate_oracle {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "LidoRateOracle was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static LIDORATEORACLE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"contract IStETH\",\"name\":\"_stEth\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract ILidoOracle\",\"name\":\"_lidoOracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32[]\",\"name\":\"_times\",\"type\":\"uint32[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"_results\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedIncomeReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AavePoolGetReserveNormalizedVariableDebtReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CTokenExchangeRateReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\",\"components\":[]}],\"type\":\"error\",\"name\":\"CanOnlyTradeIfUnlocked\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotLiquidate\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotSettleBeforeMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"DebugError\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedOppositeSigns\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\",\"components\":[]}],\"type\":\"error\",\"name\":\"ExpectedSqrtPriceZeroBeforeInit\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IRSNotionalAmountSpecifiedMustBeNonZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidMarginDelta\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"LidoGetPooledEthBySharesReturnedZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInBurn\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\",\"components\":[]}],\"type\":\"error\",\"name\":\"LiquidityDeltaMustBePositiveInMint\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginLessThanMinimum\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMet\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\",\"components\":[]}],\"type\":\"error\",\"name\":\"MarginRequirementNotMetFCM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"NotEnoughFunds\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OOO\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyFCM\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyMarginEngine\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyOwnerCanUpdatePosition\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyVAMM\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__Exp2InputTooBig\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__FromUintOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMathUD60x18__LogInputTooSmall\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"PRBMath__MulDivOverflow\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNetZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"PositionNotSettled\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"RocketPoolGetEthValueReturnedZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"WithdrawalExceedsCurrentMargin\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"closeToOrBeyondMaturity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSecondsSinceLastUpdate\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MinSecondsSinceLastUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestampScaled\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"observedValue\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint16\",\"name\":\"cardinalityNext\",\"type\":\"uint16\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OracleBufferUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RateCardinalityNext\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ONE_IN_WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"UNDERLYING_YIELD_BEARING_PROTOCOL_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentBlockSlope\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"blockChange\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getApyFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apyFromToWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getApyFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apyFromToWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getBlockSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockChange\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCurrentRateInRay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRate\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastRateSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateChange\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastUpdatedRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"resultRay\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRateFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRateFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rateCardinalityNext\",\"type\":\"uint16\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beforeOrAtRateValueRay\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"apyFromBeforeOrAtToAtOrAfterWad\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"timeDeltaBeforeOrAtToQueriedTimeWad\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"interpolateRateValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateValueRay\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lidoOracle\",\"outputs\":[{\"internalType\":\"contract ILidoOracle\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minSecondsSinceLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint216\",\"name\":\"observedValue\",\"type\":\"uint216\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"oracleVars\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rateIndex\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"rateCardinality\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"rateCardinalityNext\",\"type\":\"uint16\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"refreshBeaconSpec\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSecondsSinceLastUpdate\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMinSecondsSinceLastUpdate\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"settlementRateCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stEth\",\"outputs\":[{\"internalType\":\"contract IStETH\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termStartTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"termEndTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"variableFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termStartTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"termEndTimestampInWeiSeconds\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"variableFactorNoCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultWad\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"writeOracleEntry\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static LIDORATEORACLE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60a06040523480156200001157600080fd5b5060405162003ce338038062003ce3833981016040819052620000349162000ba0565b82620000403362000197565b6001600160a01b03811660805243620100045562000069620001e7602090811b62000df717901c565b62010003805463ffffffff9290921663ffffffff199283161790556201000580549091166105dc17905550606462010006556001600160a01b038516620000ea5760405162461bcd60e51b815260206004820152601060248201526f1cdd115512081b5d5cdd08195e1a5cdd60821b60448201526064015b60405180910390fd5b6001600160a01b038416620001425760405162461bcd60e51b815260206004820152601560248201527f6c69646f4f7261636c65206d75737420657869737400000000000000000000006044820152606401620000e1565b6201000780546001600160a01b038088166001600160a01b0319928316179092556201000880549287169290911691909117905562000180620001f9565b6200018c8282620002ec565b505050505062000e9c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620001f442620005b3565b905090565b60008060006201000860009054906101000a90046001600160a01b03166001600160a01b031663e547c77c6040518163ffffffff1660e01b815260040160806040518083038186803b1580156200024f57600080fd5b505afa15801562000264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028a919062000cd5565b620100088054600160a01b600160e01b031916600160a01b6001600160401b0384160217905591955093509150620002c59050828462000d48565b6201000980546001600160401b0319166001600160401b0392909216919091179055505050565b620002fb600261ffff62000d7a565b825110620003355760405162461bcd60e51b8152600401620000e1906020808252600490820152631350561560e21b604082015260600190565b8151815161ffff821614620003825760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b6044820152606401620000e1565b60006200039182600162000d9d565b61ffff166001600160401b03811115620003af57620003af62000abe565b604051908082528060200260200182016040528015620003d9578160200160208202803683370190505b5090506000620003eb83600162000d9d565b61ffff166001600160401b0381111562000409576200040962000abe565b60405190808252806020026020018201604052801562000433578160200160208202803683370190505b50905060005b8361ffff16811015620004e4578581815181106200045b576200045b62000dc6565b602002602001015183828151811062000478576200047862000dc6565b602002602001019063ffffffff16908163ffffffff1681525050848181518110620004a757620004a762000dc6565b6020026020010151828281518110620004c457620004c462000dc6565b602090810291909101015280620004db8162000ddc565b91505062000439565b50600080620004f2620005fa565b9150915081848661ffff168151811062000510576200051062000dc6565b602002602001019063ffffffff16908163ffffffff168152505080838661ffff168151811062000544576200054462000dc6565b6020026020010181815250506200056d848460046200079560201b62000e07179092919060201c565b6003805461ffff948516620100000263ffff0000199486166401000000000265ffff0000ffff199092169590931694909417939093179190911617905550505050505050565b8063ffffffff81168114620005f55760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b6044820152606401620000e1565b919050565b6201000754604051630f451f7160e31b81526b033b2e3c9fd0803ce80000006004820152600091829182916001600160a01b031690637a28fb889060240160206040518083038186803b1580156200065157600080fd5b505afa15801562000666573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200068c919062000dfa565b905080620006b0576040516001620723a560e01b0319815260040160405180910390fd5b6201000854604080516389896aef60e01b815290516000926001600160a01b0316916389896aef916004808301926020929190829003018186803b158015620006f857600080fd5b505afa1580156200070d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000733919062000dfa565b62010009549091506000906200078a9062000758906001600160401b03168462000e14565b6201000854620007799190600160a01b90046001600160401b031662000e36565b620005b360201b6200104a1760201c565b959294509192505050565b600080600061ffff855110620007d75760405162461bcd60e51b8152600401620000e1906020808252600490820152631350561560e21b604082015260600190565b8451845161ffff821614620008245760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b6044820152606401620000e1565b60008161ffff16116200085f5760405162461bcd60e51b81526020600482015260026024820152610c1560f21b6044820152606401620000e1565b6000805b8261ffff168161ffff161015620009f557878161ffff16815181106200088d576200088d62000dc6565b602002602001015163ffffffff168263ffffffff1610620008e35760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b6044820152606401620000e1565b62000935888261ffff168151811062000900576200090062000dc6565b6020026020010151888361ffff168151811062000921576200092162000dc6565b602002602001015162000a1660201b60201c565b898261ffff1661ffff81106200094f576200094f62000dc6565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516640100000000027fff0000000000000000000000000000000000000000000000000000000000000090921663ffffffff9094169390931717929092161790558751889061ffff8316908110620009d557620009d562000dc6565b602002602001015191508080620009ec9062000e51565b91505062000863565b50818062000a0560018262000e76565b945094509450505093509350939050565b60408051606081018252600080825260208201819052918101919091526001600160d81b0382111562000a755760405162461bcd60e51b8152600401620000e1906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff9390931683526001600160d81b0391909116602083015260019082015290565b6001600160a01b038116811462000abb57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000aff5762000aff62000abe565b604052919050565b60006001600160401b0382111562000b235762000b2362000abe565b5060051b60200190565b600082601f83011262000b3f57600080fd5b8151602062000b5862000b528362000b07565b62000ad4565b82815260059290921b8401810191818101908684111562000b7857600080fd5b8286015b8481101562000b95578051835291830191830162000b7c565b509695505050505050565b600080600080600060a0868803121562000bb957600080fd5b855162000bc68162000aa5565b8095505060208087015162000bdb8162000aa5565b604088015190955062000bee8162000aa5565b60608801519094506001600160401b038082111562000c0c57600080fd5b818901915089601f83011262000c2157600080fd5b815162000c3262000b528262000b07565b81815260059190911b8301840190848101908c83111562000c5257600080fd5b938501935b8285101562000c8657845163ffffffff8116811462000c765760008081fd5b8252938501939085019062000c57565b60808c0151909750945050508083111562000ca057600080fd5b505062000cb08882890162000b2d565b9150509295509295909350565b80516001600160401b0381168114620005f557600080fd5b6000806000806080858703121562000cec57600080fd5b62000cf78562000cbd565b935062000d076020860162000cbd565b925062000d176040860162000cbd565b915062000d276060860162000cbd565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b038281168482168115158284048211161562000d715762000d7162000d32565b02949350505050565b60008262000d9857634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff80831681851680830382111562000dbd5762000dbd62000d32565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000df35762000df362000d32565b5060010190565b60006020828403121562000e0d57600080fd5b5051919050565b600081600019048311821515161562000e315762000e3162000d32565b500290565b6000821982111562000e4c5762000e4c62000d32565b500190565b600061ffff8083168181141562000e6c5762000e6c62000d32565b6001019392505050565b600061ffff8381169083168181101562000e945762000e9462000d32565b039392505050565b608051612e2b62000eb860003960006103450152612e2b6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637cf2cc9f11610104578063c330c98d116100a2578063f2fde38b11610071578063f2fde38b14610466578063f739670c14610479578063f90ce5ba1461048c578063fe115fbe146104a457600080fd5b8063c330c98d146103ff578063c7db359b1461040e578063ddc7a5aa14610456578063efdf5d8b1461045e57600080fd5b806391aa375d116100de57806391aa375d1461039957806393556dbd146103c457806399940ece146103d7578063bdb05092146103ec57600080fd5b80637cf2cc9f146103775780638a6b8c5d146103805780638da5cb5b1461038857600080fd5b806332148f671161017157806354124c641161014b57806354124c641461032d5780636f307dc314610340578063715018a6146103675780637aa4db131461036f57600080fd5b806332148f67146102d8578063357d7b5c146102ed578063414535281461031a57600080fd5b806322ff6568116101ad57806322ff65681461023857806324b18b1714610252578063252c09d71461028657806325f258dd146102c557600080fd5b80631195082e146101d4578063163e9c4f1461021257806317221ef114610225575b600080fd5b6101ff6101e2366004612ac2565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101ff610220366004612af5565b6104ac565b6101ff610233366004612af5565b6104be565b610240600381565b60405160ff9091168152602001610209565b6201000554620100065461026a9163ffffffff169082565b6040805163ffffffff9093168352602083019190915201610209565b610299610294366004612af5565b6104ca565b6040805163ffffffff90941684526001600160d81b039092166020840152151590820152606001610209565b6101ff6102d3366004612b0e565b610504565b6102eb6102e6366004612b30565b61057f565b005b6201000854610302906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b6101ff610328366004612b0e565b610605565b6101ff61033b366004612b54565b610619565b6103027f000000000000000000000000000000000000000000000000000000000000000081565b6102eb61066e565b6102eb610682565b6101ff60025481565b61026a6106cf565b6000546001600160a01b0316610302565b6201000654620100055463ffffffff165b6040805192835263ffffffff909116602083015201610209565b6101ff6103d2366004612b0e565b61084c565b6201000754610302906001600160a01b031681565b6102eb6103fa366004612af5565b6108e1565b6101ff670de0b6b3a764000081565b6003546104319061ffff80821691620100008104821691600160201b9091041683565b6040805161ffff94851681529284166020840152921691810191909152606001610209565b6102eb61092e565b6101ff610a1f565b6102eb610474366004612b80565b610aa7565b6101ff610487366004612b0e565b610b1d565b6201000354620100045461026a9163ffffffff169082565b6103aa610c27565b60006104b88242610b1d565b92915050565b60006104b8824261084c565b60048161ffff81106104db57600080fd5b015463ffffffff81169150600160201b81046001600160d81b031690600160f81b900460ff1683565b600080610511848461108f565b90925090508015610578576000610536670de0b6b3a7640000860461104a565b61104a565b9050600061054d670de0b6b3a7640000860461104a565b63ffffffff928316600090815260016020908152604080832095909316825293909352909120839055505b5092915050565b600354600160201b900461ffff16600061059b600483856111cd565b6003805461ffff808416600160201b810265ffff0000000019909316929092179092559192508316146106005760405161ffff821681527f8a96a9c4bca0fb28be0fc5c84e95aff121a64e2533021e9d638bdc1f03b14ece9060200160405180910390a15b505050565b6000610611838361108f565b509392505050565b600080610625836112c2565b9050600061063b670de0b6b3a764000086612bbf565b9050600061064982846112d9565b9050600061065682611318565b90506106628882611342565b98975050505050505050565b610676611350565b61068060006113aa565b565b6003546106a79061ffff80821691620100008104821691600160201b909104166113fa565b6003805463ffffffff19166201000061ffff9384160261ffff19161792909116919091179055565b6201000754604051630f451f7160e31b8152676765c793fa10079d601b1b6004820152600091829182916001600160a01b031690637a28fb889060240160206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190612bd7565b90508061077f576040516001620723a560e01b0319815260040160405180910390fd5b6201000854604080516389896aef60e01b815290516000926001600160a01b0316916389896aef916004808301926020929190829003018186803b1580156107c657600080fd5b505afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190612bd7565b6201000954909150600090610841906108219067ffffffffffffffff1684612bf0565b62010008546105319190600160a01b900467ffffffffffffffff16612bbf565b959294509192505050565b6000818311156108965760405162461bcd60e51b815260206004820152601060248201526f4d69736f72646572656420646174657360801b60448201526064015b60405180910390fd5b60006108a28484610b1d565b905060006108b08585612c0f565b905060006108bd8261159d565b905060006108ca826112c2565b90506108d684826115ea565b979650505050505050565b6108e9611350565b806002541461092b5760028190556040518181527f88bd1242a1ad7dbba4967e0120324f17c382e4e3006e01dc3ffc0bf43e4b2a399060200160405180910390a15b50565b60008060006201000860009054906101000a90046001600160a01b03166001600160a01b031663e547c77c6040518163ffffffff1660e01b815260040160806040518083038186803b15801561098357600080fd5b505afa158015610997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bb9190612c3e565b62010008805467ffffffffffffffff60a01b1916600160a01b67ffffffffffffffff841602179055919550935091506109f690508284612c92565b62010009805467ffffffffffffffff191667ffffffffffffffff92909216919091179055505050565b6000806000610a2c6106cf565b91509150610a38610df7565b63ffffffff168263ffffffff1610610a505792915050565b600080610a5b610c27565b915091508063ffffffff168285610a70610df7565b610a7a9190612cc2565b63ffffffff16610a8a9190612bf0565b610a949190612cfd565b610a9e9084612bbf565b94505050505090565b610aaf611350565b6001600160a01b038116610b145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161088d565b61092b816113aa565b600081831115610b5b5760405162461bcd60e51b815260206004820152600960248201526866726f6d203e20746f60b81b604482015260640161088d565b81831415610b6b575060006104b8565b6000610b75610df7565b90506000610b828561104a565b90506000610b8f8561104a565b600354909150600090610bb3908590859061ffff808216916201000090041661164f565b600354909150600090610bd7908690859061ffff808216916201000090041661164f565b905081811115610c19576000610c0b676765c793fa10079d601b1b610bfc84866118b0565b610c069190612c0f565b6118be565b96506104b895505050505050565b6000955050505050506104b8565b600354600090819061ffff16816001821015610c5b57600354610c569060019062010000900461ffff16612d11565b610c6e565b600354610c6e9060019061ffff16612d11565b60035490915060026201000090910461ffff1610801590610caf575060048161ffff1661ffff8110610ca257610ca2612d2c565b0154600160f81b900460ff165b8015610d0c575060048261ffff1661ffff8110610cce57610cce612d2c565b0154600160201b90046001600160d81b0316600461ffff838116908110610cf757610cf7612d2c565b0154600160201b90046001600160d81b031611155b610d3e5760405162461bcd60e51b815260206004820152600360248201526204e45560ec1b604482015260640161088d565b60048161ffff1661ffff8110610d5657610d56612d2c565b0154600160201b90046001600160d81b0316600461ffff848116908110610d7f57610d7f612d2c565b0154610d9b9190600160201b90046001600160d81b0316612d42565b6001600160d81b0316935060048161ffff1661ffff8110610dbe57610dbe612d2c565b015463ffffffff16600461ffff808516908110610ddd57610ddd612d2c565b0154610def919063ffffffff16612cc2565b925050509091565b6000610e024261104a565b905090565b600080600061ffff855110610e475760405162461bcd60e51b815260040161088d906020808252600490820152631350561560e21b604082015260600190565b8451845161ffff821614610e925760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b604482015260640161088d565b60008161ffff1611610ecb5760405162461bcd60e51b81526020600482015260026024820152610c1560f21b604482015260640161088d565b6000805b8261ffff168161ffff16101561102b57878161ffff1681518110610ef557610ef5612d2c565b602002602001015163ffffffff168263ffffffff1610610f495760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b604482015260640161088d565b610f8d888261ffff1681518110610f6257610f62612d2c565b6020026020010151888361ffff1681518110610f8057610f80612d2c565b602002602001015161194a565b898261ffff1661ffff8110610fa457610fa4612d2c565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff9094169390931717929092161790558751889061ffff831690811061100e5761100e612d2c565b60200260200101519150808061102390612d62565b915050610ecf565b508180611039600182612d11565b945094509450505093509350939050565b8063ffffffff8116811461108a5760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b604482015260640161088d565b919050565b600080806110a6670de0b6b3a7640000860461104a565b905060006110bd670de0b6b3a7640000860461104a565b905060008263ffffffff161180156110db575060008163ffffffff16115b61110f5760405162461bcd60e51b8152602060048201526005602482015264554e49545360d81b604482015260640161088d565b63ffffffff808316600090815260016020908152604080832093851683529290522054156111655763ffffffff8083166000908152600160209081526040808320938516835292905290812054945092506111c4565b8063ffffffff16611174610df7565b63ffffffff16106111a0576111958263ffffffff168263ffffffff16610b1d565b9350600192506111c4565b6111bd8263ffffffff166111b2610df7565b63ffffffff16610b1d565b9350600092505b50509250929050565b6000808361ffff16116112065760405162461bcd60e51b81526020600482015260016024820152604960f81b604482015260640161088d565b61ffff8261ffff161061124a5760405162461bcd60e51b815260206004820152600c60248201526b189d5999995c881b1a5b5a5d60a21b604482015260640161088d565b8261ffff168261ffff16116112605750816112bb565b825b8261ffff168161ffff1610156112b6576001858261ffff1661ffff811061128b5761128b612d2c565b01805463ffffffff191663ffffffff92909216919091179055806112ae81612d62565b915050611262565b508190505b9392505050565b60006104b8826a1a1601fc4ea7109e0000006119d7565b6000826112fe5781156112ed5760006112f7565b670de0b6b3a76400005b90506104b8565b6112bb61131361130d856119ec565b84611a9c565b611aa8565b600080611338670de0b6b3a7640000676765c793fa10079d601b1b612cfd565b6112bb9084612bf0565b60006112bb83836001611aee565b6000546001600160a01b031633146106805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060048661ffff1661ffff811061141757611417612d2c565b60408051606081018252929091015463ffffffff811683526001600160d81b03600160201b820416602084015260ff600160f81b9091041615159082015290506000806114626106cf565b600254855192945090925061147c9163ffffffff16612bbf565b8263ffffffff16101561149757878794509450505050611595565b7f5aec68e6980e788266f2f59f6fddb85f3e256ce6da46fdfab920b9b06aaa73756114c0611ba1565b6040805191825230602083015261ffff8b81168383015263ffffffff86166060840152608083018590528a811660a0840152891660c0830152519081900360e00190a162010004546115129043612c0f565b6201000655620100035463ffffffff1661152a610df7565b6115349190612cc2565b62010005805463ffffffff191663ffffffff9290921691909117905543620100045561155e610df7565b62010003805463ffffffff191663ffffffff92831617905561158d906004908a90859085908c908c90611bac16565b945094505050505b935093915050565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218211156115dc57604051633492ffd960e01b81526004810183905260240161088d565b50670de0b6b3a76400000290565b6000826115f9575060006104b8565b600061160e611608600161159d565b846119d7565b9050600061163085611620600161159d565b61162a9190612bbf565b836112d9565b905061163c600161159d565b6116469082612c0f565b95945050505050565b60008363ffffffff168563ffffffff16101561167e57604051632ff198e560e21b815260040160405180910390fd5b8363ffffffff168563ffffffff16141561173b57604080516060810182526000808252602082018190529181019190915260048461ffff1661ffff81106116c7576116c7612d2c565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff16151593830193909352909250908716146117245761171d610a1f565b9150611735565b80602001516001600160d81b031691505b506118a8565b6000611745610a1f565b90506000806117596004888a868a8a611cf4565b91509150816000015163ffffffff168763ffffffff16141561178a5781602001516001600160d81b031693506118a4565b805163ffffffff888116911614156117b15780602001516001600160d81b031693506118a4565b600082602001516001600160d81b031682602001516001600160d81b03161115611820576000676765c793fa10079d601b1b61180784602001516001600160d81b031686602001516001600160d81b03166118b0565b6118119190612c0f565b905061181c816118be565b9150505b8251825160009161185391670de0b6b3a76400009161183e91612cc2565b63ffffffff1661184e9190612bf0565b6112c2565b9050600061186183836115ea565b905061189e85602001516001600160d81b031682670de0b6b3a764000088600001518e61188e9190612cc2565b63ffffffff1661033b9190612bf0565b96505050505b5050505b949350505050565b60006112bb83836001611ed0565b6000806118de670de0b6b3a7640000676765c793fa10079d601b1b612cfd565b6118e89084612cfd565b90506002611909670de0b6b3a7640000676765c793fa10079d601b1b612cfd565b6119139190612cfd565b611930670de0b6b3a7640000676765c793fa10079d601b1b612cfd565b61193a9085612d84565b106104b8576112bb600182612bbf565b60408051606081018252600080825260208201819052918101919091526001600160d81b038211156119a75760405162461bcd60e51b815260040161088d906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff9390931683526001600160d81b0391909116602083015260019082015290565b60006112bb83670de0b6b3a764000084611f6b565b6000670de0b6b3a7640000821015611a1a57604051633621413760e21b81526004810183905260240161088d565b6000611a2f670de0b6b3a76400008404612039565b670de0b6b3a7640000808202935090915083821c90811415611a52575050919050565b6706f05b59d3b200005b8015611a9457670de0b6b3a7640000828002049150671bc16d674ec800008210611a8c579283019260019190911c905b60011c611a5c565b505050919050565b60006112bb838361211c565b6000680a688906bd8b0000008210611ad657604051634a4f26f160e01b81526004810183905260240161088d565b670de0b6b3a7640000604083901b046112bb816121de565b6000831580611afb575082155b15611b08575060006112bb565b6001826001811115611b1c57611b1c612d98565b14611b2f57670de0b6b3a7640000611b3c565b676765c793fa10079d601b1b5b6001836001811115611b5057611b50612d98565b14611b6d57611b686002670de0b6b3a7640000612cfd565b611b83565b611b836002676765c793fa10079d601b1b612cfd565b611b8d8587612bf0565b611b979190612bbf565b6118a89190612cfd565b6000610e024261159d565b6000806000888861ffff1661ffff8110611bc857611bc8612d2c565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff161515938301939093529092509088161415611c235787859250925050611ce9565b8461ffff168461ffff16118015611c4b5750611c40600186612d11565b61ffff168861ffff16145b15611c5857839150611c5c565b8491505b81611c68896001612dae565b611c729190612dd4565b9250611c7e878761194a565b898461ffff1661ffff8110611c9557611c95612d2c565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff909416939093171792909216179055505b965096945050505050565b60408051606081018252600080825260208201819052918101919091526040805160608101825260008082526020820181905291810191909152878461ffff1661ffff8110611d4557611d45612d2c565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff1615159383019390935290935090881610611dc4578663ffffffff16826000015163ffffffff161415611db057611ce9565b81611dbb878761194a565b91509150611ce9565b8783611dd1866001612dae565b611ddb9190612dd4565b61ffff1661ffff8110611df057611df0612d2c565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181018290529250611e755760408051606081018252895463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181019190915291505b815163ffffffff80891691161115611eb55760405162461bcd60e51b815260206004820152600360248201526213d31160ea1b604482015260640161088d565b611ec1888886866128d9565b91509150965096945050505050565b600082611f085760405162461bcd60e51b815260040161088d906020808252600490820152630444956360e41b604082015260600190565b6000611f15600285612cfd565b905083816001856001811115611f2d57611f2d612d98565b14611f4057670de0b6b3a7640000611f4d565b676765c793fa10079d601b1b5b611f579088612bf0565b611f619190612bbf565b6116469190612cfd565b600080806000198587098587029250828110838203039150508060001415611fa657838281611f9c57611f9c612ce7565b04925050506112bb565b838110611fd057604051631dcf306360e21b8152600481018290526024810185905260440161088d565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000600160801b821061205957608091821c916120569082612bbf565b90505b68010000000000000000821061207c57604091821c916120799082612bbf565b90505b600160201b821061209a57602091821c916120979082612bbf565b90505b6201000082106120b757601091821c916120b49082612bbf565b90505b61010082106120d357600891821c916120d09082612bbf565b90505b601082106120ee57600491821c916120eb9082612bbf565b90505b6004821061210957600291821c916121069082612bbf565b90505b6002821061108a576104b8600182612bbf565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106121605760405163698d9a0160e11b81526004810182905260240161088d565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff81118261219a5780670de0b6b3a76400008504019450505050506104b8565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6780000000000000008216156122025768016a09e667f3bcc9090260401c5b674000000000000000821615612221576801306fe0a31b7152df0260401c5b672000000000000000821615612240576801172b83c7d517adce0260401c5b67100000000000000082161561225f5768010b5586cf9890f62a0260401c5b67080000000000000082161561227e576801059b0d31585743ae0260401c5b67040000000000000082161561229d57680102c9a3e778060ee70260401c5b6702000000000000008216156122bc5768010163da9fb33356d80260401c5b6701000000000000008216156122db57680100b1afa5abcbed610260401c5b66800000000000008216156122f95768010058c86da1c09ea20260401c5b6640000000000000821615612317576801002c605e2e8cec500260401c5b662000000000000082161561233557680100162f3904051fa10260401c5b6610000000000000821615612353576801000b175effdc76ba0260401c5b660800000000000082161561237157680100058ba01fb9f96d0260401c5b660400000000000082161561238f5768010002c5cc37da94920260401c5b66020000000000008216156123ad576801000162e525ee05470260401c5b66010000000000008216156123cb5768010000b17255775c040260401c5b658000000000008216156123e8576801000058b91b5bc9ae0260401c5b6540000000000082161561240557680100002c5c89d5ec6d0260401c5b652000000000008216156124225768010000162e43f4f8310260401c5b6510000000000082161561243f57680100000b1721bcfc9a0260401c5b6508000000000082161561245c5768010000058b90cf1e6e0260401c5b65040000000000821615612479576801000002c5c863b73f0260401c5b6502000000000082161561249657680100000162e430e5a20260401c5b650100000000008216156124b3576801000000b1721835510260401c5b6480000000008216156124cf57680100000058b90c0b490260401c5b6440000000008216156124eb5768010000002c5c8601cc0260401c5b642000000000821615612507576801000000162e42fff00260401c5b6410000000008216156125235768010000000b17217fbb0260401c5b64080000000082161561253f576801000000058b90bfce0260401c5b64040000000082161561255b57680100000002c5c85fe30260401c5b6402000000008216156125775768010000000162e42ff10260401c5b600160201b82161561259257680100000000b17217f80260401c5b63800000008216156125ad5768010000000058b90bfc0260401c5b63400000008216156125c8576801000000002c5c85fe0260401c5b63200000008216156125e357680100000000162e42ff0260401c5b63100000008216156125fe576801000000000b17217f0260401c5b630800000082161561261957680100000000058b90c00260401c5b63040000008216156126345768010000000002c5c8600260401c5b630200000082161561264f576801000000000162e4300260401c5b630100000082161561266a5768010000000000b172180260401c5b62800000821615612684576801000000000058b90c0260401c5b6240000082161561269e57680100000000002c5c860260401c5b622000008216156126b85768010000000000162e430260401c5b621000008216156126d257680100000000000b17210260401c5b620800008216156126ec5768010000000000058b910260401c5b62040000821615612706576801000000000002c5c80260401c5b6202000082161561272057680100000000000162e40260401c5b6201000082161561273a576801000000000000b1720260401c5b61800082161561275357680100000000000058b90260401c5b61400082161561276c5768010000000000002c5d0260401c5b612000821615612785576801000000000000162e0260401c5b61100082161561279e5768010000000000000b170260401c5b6108008216156127b7576801000000000000058c0260401c5b6104008216156127d057680100000000000002c60260401c5b6102008216156127e957680100000000000001630260401c5b61010082161561280257680100000000000000b10260401c5b608082161561281a57680100000000000000590260401c5b6040821615612832576801000000000000002c0260401c5b602082161561284a57680100000000000000160260401c5b6010821615612862576801000000000000000b0260401c5b600882161561287a57680100000000000000060260401c5b600482161561289257680100000000000000030260401c5b60028216156128aa57680100000000000000010260401c5b60018216156128c257680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b60408051606080820183526000808352602080840182905283850182905284519283018552818352820181905292810183905290918361291a866001612dae565b6129249190612dd4565b61ffff169050600060018561ffff168361293e9190612bbf565b6129489190612c0f565b905060005b60016129598385612bbf565b901c90508861296c61ffff881683612d84565b61ffff811061297d5761297d612d2c565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff16151591810182905295506129d4576129cd816001612bbf565b925061294d565b8861ffff87166129e5836001612bbf565b6129ef9190612d84565b61ffff8110612a0057612a00612d2c565b60408051606081018252919092015463ffffffff8082168352600160201b82046001600160d81b03166020840152600160f81b90910460ff1615159282019290925286519095508982169116118015908190612a6c5750846000015163ffffffff168963ffffffff1611155b15612a775750612aa2565b80612a8e57612a87600183612c0f565b9250612a9c565b612a99826001612bbf565b93505b5061294d565b50505094509492505050565b803563ffffffff8116811461108a57600080fd5b60008060408385031215612ad557600080fd5b612ade83612aae565b9150612aec60208401612aae565b90509250929050565b600060208284031215612b0757600080fd5b5035919050565b60008060408385031215612b2157600080fd5b50508035926020909101359150565b600060208284031215612b4257600080fd5b813561ffff811681146112bb57600080fd5b600080600060608486031215612b6957600080fd5b505081359360208301359350604090920135919050565b600060208284031215612b9257600080fd5b81356001600160a01b03811681146112bb57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612bd257612bd2612ba9565b500190565b600060208284031215612be957600080fd5b5051919050565b6000816000190483118215151615612c0a57612c0a612ba9565b500290565b600082821015612c2157612c21612ba9565b500390565b805167ffffffffffffffff8116811461108a57600080fd5b60008060008060808587031215612c5457600080fd5b612c5d85612c26565b9350612c6b60208601612c26565b9250612c7960408601612c26565b9150612c8760608601612c26565b905092959194509250565b600067ffffffffffffffff80831681851681830481118215151615612cb957612cb9612ba9565b02949350505050565b600063ffffffff83811690831681811015612cdf57612cdf612ba9565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600082612d0c57612d0c612ce7565b500490565b600061ffff83811690831681811015612cdf57612cdf612ba9565b634e487b7160e01b600052603260045260246000fd5b60006001600160d81b0383811690831681811015612cdf57612cdf612ba9565b600061ffff80831681811415612d7a57612d7a612ba9565b6001019392505050565b600082612d9357612d93612ce7565b500690565b634e487b7160e01b600052602160045260246000fd5b600061ffff808316818516808303821115612dcb57612dcb612ba9565b01949350505050565b600061ffff80841680612de957612de9612ce7565b9216919091069291505056fea2646970667358221220ca6a1db09c5c875c97744343593493b3fd77a95bcecf87bba7925c910b56e7ee64736f6c63430008090033" . parse () . expect ("invalid bytecode")
        });
    pub struct LidoRateOracle<M>(ethers::contract::Contract<M>);
    impl<M> Clone for LidoRateOracle<M> {
        fn clone(&self) -> Self {
            LidoRateOracle(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for LidoRateOracle<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for LidoRateOracle<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(LidoRateOracle))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> LidoRateOracle<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), LIDORATEORACLE_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                LIDORATEORACLE_ABI.clone(),
                LIDORATEORACLE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `ONE_IN_WAD` (0xc330c98d) function"]
        pub fn one_in_wad(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([195, 48, 201, 141], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` (0x22ff6568) function"]
        pub fn underlying_yield_bearing_protocol_id(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([34, 255, 101, 104], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `currentBlockSlope` (0x24b18b17) function"]
        pub fn current_block_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([36, 177, 139, 23], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getApyFrom` (0x17221ef1) function"]
        pub fn get_apy_from(
            &self,
            from: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([23, 34, 30, 241], from)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getApyFromTo` (0x93556dbd) function"]
        pub fn get_apy_from_to(
            &self,
            from: ethers::core::types::U256,
            to: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([147, 85, 109, 189], (from, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getBlockSlope` (0x91aa375d) function"]
        pub fn get_block_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, u32)> {
            self.0
                .method_hash([145, 170, 55, 93], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCurrentRateInRay` (0xefdf5d8b) function"]
        pub fn get_current_rate_in_ray(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([239, 223, 93, 139], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLastRateSlope` (0xfe115fbe) function"]
        pub fn get_last_rate_slope(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, u32)> {
            self.0
                .method_hash([254, 17, 95, 190], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLastUpdatedRate` (0x8a6b8c5d) function"]
        pub fn get_last_updated_rate(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([138, 107, 140, 93], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getRateFrom` (0x163e9c4f) function"]
        pub fn get_rate_from(
            &self,
            from: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([22, 62, 156, 79], from)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getRateFromTo` (0xf739670c) function"]
        pub fn get_rate_from_to(
            &self,
            from: ethers::core::types::U256,
            to: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([247, 57, 103, 12], (from, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `increaseObservationCardinalityNext` (0x32148f67) function"]
        pub fn increase_observation_cardinality_next(
            &self,
            rate_cardinality_next: u16,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([50, 20, 143, 103], rate_cardinality_next)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `interpolateRateValue` (0x54124c64) function"]
        pub fn interpolate_rate_value(
            &self,
            before_or_at_rate_value_ray: ethers::core::types::U256,
            apy_from_before_or_at_to_at_or_after_wad: ethers::core::types::U256,
            time_delta_before_or_at_to_queried_time_wad: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [84, 18, 76, 100],
                    (
                        before_or_at_rate_value_ray,
                        apy_from_before_or_at_to_at_or_after_wad,
                        time_delta_before_or_at_to_queried_time_wad,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lastUpdatedBlock` (0xf90ce5ba) function"]
        pub fn last_updated_block(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256)> {
            self.0
                .method_hash([249, 12, 229, 186], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lidoOracle` (0x357d7b5c) function"]
        pub fn lido_oracle(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([53, 125, 123, 92], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `minSecondsSinceLastUpdate` (0x7cf2cc9f) function"]
        pub fn min_seconds_since_last_update(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([124, 242, 204, 159], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `observations` (0x252c09d7) function"]
        pub fn observations(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, (u32, ethers::core::types::U256, bool)>
        {
            self.0
                .method_hash([37, 44, 9, 215], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `oracleVars` (0xc7db359b) function"]
        pub fn oracle_vars(&self) -> ethers::contract::builders::ContractCall<M, (u16, u16, u16)> {
            self.0
                .method_hash([199, 219, 53, 155], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `owner` (0x8da5cb5b) function"]
        pub fn owner(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `refreshBeaconSpec` (0xddc7a5aa) function"]
        pub fn refresh_beacon_spec(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([221, 199, 165, 170], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `renounceOwnership` (0x715018a6) function"]
        pub fn renounce_ownership(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setMinSecondsSinceLastUpdate` (0xbdb05092) function"]
        pub fn set_min_seconds_since_last_update(
            &self,
            min_seconds_since_last_update: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([189, 176, 80, 146], min_seconds_since_last_update)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `settlementRateCache` (0x1195082e) function"]
        pub fn settlement_rate_cache(
            &self,
            p0: u32,
            p1: u32,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([17, 149, 8, 46], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `stEth` (0x99940ece) function"]
        pub fn st_eth(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([153, 148, 14, 206], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnership` (0xf2fde38b) function"]
        pub fn transfer_ownership(
            &self,
            new_owner: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `underlying` (0x6f307dc3) function"]
        pub fn underlying(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([111, 48, 125, 195], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `variableFactor` (0x25f258dd) function"]
        pub fn variable_factor(
            &self,
            term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
            term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [37, 242, 88, 221],
                    (
                        term_start_timestamp_in_wei_seconds,
                        term_end_timestamp_in_wei_seconds,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `variableFactorNoCache` (0x41453528) function"]
        pub fn variable_factor_no_cache(
            &self,
            term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
            term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [65, 69, 53, 40],
                    (
                        term_start_timestamp_in_wei_seconds,
                        term_end_timestamp_in_wei_seconds,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `writeOracleEntry` (0x7aa4db13) function"]
        pub fn write_oracle_entry(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([122, 164, 219, 19], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MinSecondsSinceLastUpdate` event"]
        pub fn min_seconds_since_last_update_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MinSecondsSinceLastUpdateFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OracleBufferUpdate` event"]
        pub fn oracle_buffer_update_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OracleBufferUpdateFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OwnershipTransferred` event"]
        pub fn ownership_transferred_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `RateCardinalityNext` event"]
        pub fn rate_cardinality_next_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, RateCardinalityNextFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, LidoRateOracleEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for LidoRateOracle<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedIncomeReturnedZero` with signature `AavePoolGetReserveNormalizedIncomeReturnedZero()` and selector `[189, 137, 197, 175]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedIncomeReturnedZero",
        abi = "AavePoolGetReserveNormalizedIncomeReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedIncomeReturnedZero;
    #[doc = "Custom Error type `AavePoolGetReserveNormalizedVariableDebtReturnedZero` with signature `AavePoolGetReserveNormalizedVariableDebtReturnedZero()` and selector `[195, 75, 105, 61]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "AavePoolGetReserveNormalizedVariableDebtReturnedZero",
        abi = "AavePoolGetReserveNormalizedVariableDebtReturnedZero()"
    )]
    pub struct AavePoolGetReserveNormalizedVariableDebtReturnedZero;
    #[doc = "Custom Error type `CTokenExchangeRateReturnedZero` with signature `CTokenExchangeRateReturnedZero()` and selector `[36, 152, 138, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CTokenExchangeRateReturnedZero",
        abi = "CTokenExchangeRateReturnedZero()"
    )]
    pub struct CTokenExchangeRateReturnedZero;
    #[doc = "Custom Error type `CanOnlyTradeIfUnlocked` with signature `CanOnlyTradeIfUnlocked(bool)` and selector `[121, 143, 4, 94]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CanOnlyTradeIfUnlocked", abi = "CanOnlyTradeIfUnlocked(bool)")]
    pub struct CanOnlyTradeIfUnlocked {
        pub unlocked: bool,
    }
    #[doc = "Custom Error type `CannotLiquidate` with signature `CannotLiquidate()` and selector `[191, 135, 199, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "CannotLiquidate", abi = "CannotLiquidate()")]
    pub struct CannotLiquidate;
    #[doc = "Custom Error type `CannotSettleBeforeMaturity` with signature `CannotSettleBeforeMaturity()` and selector `[2, 230, 23, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "CannotSettleBeforeMaturity",
        abi = "CannotSettleBeforeMaturity()"
    )]
    pub struct CannotSettleBeforeMaturity;
    #[doc = "Custom Error type `DebugError` with signature `DebugError(uint256,uint256)` and selector `[186, 113, 84, 234]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "DebugError", abi = "DebugError(uint256,uint256)")]
    pub struct DebugError {
        pub x: ethers::core::types::U256,
        pub y: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `ExpectedOppositeSigns` with signature `ExpectedOppositeSigns(int256,int256)` and selector `[35, 133, 254, 176]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedOppositeSigns",
        abi = "ExpectedOppositeSigns(int256,int256)"
    )]
    pub struct ExpectedOppositeSigns {
        pub amount_0: I256,
        pub amount_1: I256,
    }
    #[doc = "Custom Error type `ExpectedSqrtPriceZeroBeforeInit` with signature `ExpectedSqrtPriceZeroBeforeInit(uint160)` and selector `[162, 248, 112, 60]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "ExpectedSqrtPriceZeroBeforeInit",
        abi = "ExpectedSqrtPriceZeroBeforeInit(uint160)"
    )]
    pub struct ExpectedSqrtPriceZeroBeforeInit {
        pub sqrt_price_x96: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `IRSNotionalAmountSpecifiedMustBeNonZero` with signature `IRSNotionalAmountSpecifiedMustBeNonZero()` and selector `[63, 82, 15, 170]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "IRSNotionalAmountSpecifiedMustBeNonZero",
        abi = "IRSNotionalAmountSpecifiedMustBeNonZero()"
    )]
    pub struct IRSNotionalAmountSpecifiedMustBeNonZero;
    #[doc = "Custom Error type `InvalidMarginDelta` with signature `InvalidMarginDelta()` and selector `[138, 204, 109, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "InvalidMarginDelta", abi = "InvalidMarginDelta()")]
    pub struct InvalidMarginDelta;
    #[doc = "Custom Error type `LidoGetPooledEthBySharesReturnedZero` with signature `LidoGetPooledEthBySharesReturnedZero()` and selector `[255, 248, 220, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LidoGetPooledEthBySharesReturnedZero",
        abi = "LidoGetPooledEthBySharesReturnedZero()"
    )]
    pub struct LidoGetPooledEthBySharesReturnedZero;
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInBurn` with signature `LiquidityDeltaMustBePositiveInBurn(uint128)` and selector `[192, 157, 38, 9]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInBurn",
        abi = "LiquidityDeltaMustBePositiveInBurn(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInBurn {
        pub amount: u128,
    }
    #[doc = "Custom Error type `LiquidityDeltaMustBePositiveInMint` with signature `LiquidityDeltaMustBePositiveInMint(uint128)` and selector `[216, 69, 154, 52]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "LiquidityDeltaMustBePositiveInMint",
        abi = "LiquidityDeltaMustBePositiveInMint(uint128)"
    )]
    pub struct LiquidityDeltaMustBePositiveInMint {
        pub amount: u128,
    }
    #[doc = "Custom Error type `MarginLessThanMinimum` with signature `MarginLessThanMinimum(int256)` and selector `[107, 79, 255, 36]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "MarginLessThanMinimum", abi = "MarginLessThanMinimum(int256)")]
    pub struct MarginLessThanMinimum {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMet` with signature `MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)` and selector `[67, 242, 131, 33]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMet",
        abi = "MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)"
    )]
    pub struct MarginRequirementNotMet {
        pub margin_requirement: I256,
        pub tick: i32,
        pub fixed_token_delta: I256,
        pub variable_token_delta: I256,
        pub cumulative_fee_incurred: ethers::core::types::U256,
        pub fixed_token_delta_unbalanced: I256,
    }
    #[doc = "Custom Error type `MarginRequirementNotMetFCM` with signature `MarginRequirementNotMetFCM(int256)` and selector `[65, 213, 168, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarginRequirementNotMetFCM",
        abi = "MarginRequirementNotMetFCM(int256)"
    )]
    pub struct MarginRequirementNotMetFCM {
        pub margin_requirement: I256,
    }
    #[doc = "Custom Error type `NotEnoughFunds` with signature `NotEnoughFunds(uint256,uint256)` and selector `[140, 144, 83, 104]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "NotEnoughFunds", abi = "NotEnoughFunds(uint256,uint256)")]
    pub struct NotEnoughFunds {
        pub requested: ethers::core::types::U256,
        pub available: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `OOO` with signature `OOO()` and selector `[191, 198, 99, 148]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OOO", abi = "OOO()")]
    pub struct OOO;
    #[doc = "Custom Error type `OnlyFCM` with signature `OnlyFCM()` and selector `[93, 138, 54, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyFCM", abi = "OnlyFCM()")]
    pub struct OnlyFCM;
    #[doc = "Custom Error type `OnlyMarginEngine` with signature `OnlyMarginEngine()` and selector `[40, 52, 210, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyMarginEngine", abi = "OnlyMarginEngine()")]
    pub struct OnlyMarginEngine;
    #[doc = "Custom Error type `OnlyOwnerCanUpdatePosition` with signature `OnlyOwnerCanUpdatePosition()` and selector `[125, 164, 92, 231]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "OnlyOwnerCanUpdatePosition",
        abi = "OnlyOwnerCanUpdatePosition()"
    )]
    pub struct OnlyOwnerCanUpdatePosition;
    #[doc = "Custom Error type `OnlyVAMM` with signature `OnlyVAMM()` and selector `[123, 216, 216, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "OnlyVAMM", abi = "OnlyVAMM()")]
    pub struct OnlyVAMM;
    #[doc = "Custom Error type `PRBMathUD60x18__Exp2InputTooBig` with signature `PRBMathUD60x18__Exp2InputTooBig(uint256)` and selector `[74, 79, 38, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__Exp2InputTooBig",
        abi = "PRBMathUD60x18__Exp2InputTooBig(uint256)"
    )]
    pub struct PRBMathUD60x18__Exp2InputTooBig {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMathUD60x18__FromUintOverflow` with signature `PRBMathUD60x18__FromUintOverflow(uint256)` and selector `[52, 146, 255, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__FromUintOverflow",
        abi = "PRBMathUD60x18__FromUintOverflow(uint256)"
    )]
    pub struct PRBMathUD60x18__FromUintOverflow {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMathUD60x18__LogInputTooSmall` with signature `PRBMathUD60x18__LogInputTooSmall(uint256)` and selector `[216, 133, 4, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMathUD60x18__LogInputTooSmall",
        abi = "PRBMathUD60x18__LogInputTooSmall(uint256)"
    )]
    pub struct PRBMathUD60x18__LogInputTooSmall {
        pub x: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMath__MulDivFixedPointOverflow` with signature `PRBMath__MulDivFixedPointOverflow(uint256)` and selector `[211, 27, 52, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMath__MulDivFixedPointOverflow",
        abi = "PRBMath__MulDivFixedPointOverflow(uint256)"
    )]
    pub struct PRBMath__MulDivFixedPointOverflow {
        pub prod_1: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PRBMath__MulDivOverflow` with signature `PRBMath__MulDivOverflow(uint256,uint256)` and selector `[119, 60, 193, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "PRBMath__MulDivOverflow",
        abi = "PRBMath__MulDivOverflow(uint256,uint256)"
    )]
    pub struct PRBMath__MulDivOverflow {
        pub prod_1: ethers::core::types::U256,
        pub denominator: ethers::core::types::U256,
    }
    #[doc = "Custom Error type `PositionNetZero` with signature `PositionNetZero()` and selector `[89, 32, 46, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNetZero", abi = "PositionNetZero()")]
    pub struct PositionNetZero;
    #[doc = "Custom Error type `PositionNotSettled` with signature `PositionNotSettled()` and selector `[90, 108, 31, 220]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "PositionNotSettled", abi = "PositionNotSettled()")]
    pub struct PositionNotSettled;
    #[doc = "Custom Error type `RocketPoolGetEthValueReturnedZero` with signature `RocketPoolGetEthValueReturnedZero()` and selector `[18, 70, 158, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "RocketPoolGetEthValueReturnedZero",
        abi = "RocketPoolGetEthValueReturnedZero()"
    )]
    pub struct RocketPoolGetEthValueReturnedZero;
    #[doc = "Custom Error type `WithdrawalExceedsCurrentMargin` with signature `WithdrawalExceedsCurrentMargin()` and selector `[41, 126, 28, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "WithdrawalExceedsCurrentMargin",
        abi = "WithdrawalExceedsCurrentMargin()"
    )]
    pub struct WithdrawalExceedsCurrentMargin;
    #[doc = "Custom Error type `closeToOrBeyondMaturity` with signature `closeToOrBeyondMaturity()` and selector `[83, 173, 234, 156]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "closeToOrBeyondMaturity", abi = "closeToOrBeyondMaturity()")]
    pub struct closeToOrBeyondMaturity;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum LidoRateOracleErrors {
        AavePoolGetReserveNormalizedIncomeReturnedZero(
            AavePoolGetReserveNormalizedIncomeReturnedZero,
        ),
        AavePoolGetReserveNormalizedVariableDebtReturnedZero(
            AavePoolGetReserveNormalizedVariableDebtReturnedZero,
        ),
        CTokenExchangeRateReturnedZero(CTokenExchangeRateReturnedZero),
        CanOnlyTradeIfUnlocked(CanOnlyTradeIfUnlocked),
        CannotLiquidate(CannotLiquidate),
        CannotSettleBeforeMaturity(CannotSettleBeforeMaturity),
        DebugError(DebugError),
        ExpectedOppositeSigns(ExpectedOppositeSigns),
        ExpectedSqrtPriceZeroBeforeInit(ExpectedSqrtPriceZeroBeforeInit),
        IRSNotionalAmountSpecifiedMustBeNonZero(IRSNotionalAmountSpecifiedMustBeNonZero),
        InvalidMarginDelta(InvalidMarginDelta),
        LidoGetPooledEthBySharesReturnedZero(LidoGetPooledEthBySharesReturnedZero),
        LiquidityDeltaMustBePositiveInBurn(LiquidityDeltaMustBePositiveInBurn),
        LiquidityDeltaMustBePositiveInMint(LiquidityDeltaMustBePositiveInMint),
        MarginLessThanMinimum(MarginLessThanMinimum),
        MarginRequirementNotMet(MarginRequirementNotMet),
        MarginRequirementNotMetFCM(MarginRequirementNotMetFCM),
        NotEnoughFunds(NotEnoughFunds),
        OOO(OOO),
        OnlyFCM(OnlyFCM),
        OnlyMarginEngine(OnlyMarginEngine),
        OnlyOwnerCanUpdatePosition(OnlyOwnerCanUpdatePosition),
        OnlyVAMM(OnlyVAMM),
        PRBMathUD60x18__Exp2InputTooBig(PRBMathUD60x18__Exp2InputTooBig),
        PRBMathUD60x18__FromUintOverflow(PRBMathUD60x18__FromUintOverflow),
        PRBMathUD60x18__LogInputTooSmall(PRBMathUD60x18__LogInputTooSmall),
        PRBMath__MulDivFixedPointOverflow(PRBMath__MulDivFixedPointOverflow),
        PRBMath__MulDivOverflow(PRBMath__MulDivOverflow),
        PositionNetZero(PositionNetZero),
        PositionNotSettled(PositionNotSettled),
        RocketPoolGetEthValueReturnedZero(RocketPoolGetEthValueReturnedZero),
        WithdrawalExceedsCurrentMargin(WithdrawalExceedsCurrentMargin),
        closeToOrBeyondMaturity(closeToOrBeyondMaturity),
    }
    impl ethers::core::abi::AbiDecode for LidoRateOracleErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok (decoded) = < AavePoolGetReserveNormalizedIncomeReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (LidoRateOracleErrors :: AavePoolGetReserveNormalizedIncomeReturnedZero (decoded)) }
            if let Ok (decoded) = < AavePoolGetReserveNormalizedVariableDebtReturnedZero as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (LidoRateOracleErrors :: AavePoolGetReserveNormalizedVariableDebtReturnedZero (decoded)) }
            if let Ok(decoded) =
                <CTokenExchangeRateReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::CTokenExchangeRateReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <CanOnlyTradeIfUnlocked as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::CanOnlyTradeIfUnlocked(decoded));
            }
            if let Ok(decoded) =
                <CannotLiquidate as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::CannotLiquidate(decoded));
            }
            if let Ok(decoded) =
                <CannotSettleBeforeMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::CannotSettleBeforeMaturity(decoded));
            }
            if let Ok(decoded) = <DebugError as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::DebugError(decoded));
            }
            if let Ok(decoded) =
                <ExpectedOppositeSigns as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::ExpectedOppositeSigns(decoded));
            }
            if let Ok(decoded) =
                <ExpectedSqrtPriceZeroBeforeInit as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <IRSNotionalAmountSpecifiedMustBeNonZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(decoded));
            }
            if let Ok(decoded) =
                <InvalidMarginDelta as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::InvalidMarginDelta(decoded));
            }
            if let Ok(decoded) =
                <LidoGetPooledEthBySharesReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInBurn as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LiquidityDeltaMustBePositiveInMint as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::LiquidityDeltaMustBePositiveInMint(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <MarginLessThanMinimum as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::MarginLessThanMinimum(decoded));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMet as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::MarginRequirementNotMet(decoded));
            }
            if let Ok(decoded) =
                <MarginRequirementNotMetFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::MarginRequirementNotMetFCM(decoded));
            }
            if let Ok(decoded) =
                <NotEnoughFunds as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::NotEnoughFunds(decoded));
            }
            if let Ok(decoded) = <OOO as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(LidoRateOracleErrors::OOO(decoded));
            }
            if let Ok(decoded) = <OnlyFCM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(LidoRateOracleErrors::OnlyFCM(decoded));
            }
            if let Ok(decoded) =
                <OnlyMarginEngine as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::OnlyMarginEngine(decoded));
            }
            if let Ok(decoded) =
                <OnlyOwnerCanUpdatePosition as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::OnlyOwnerCanUpdatePosition(decoded));
            }
            if let Ok(decoded) = <OnlyVAMM as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(LidoRateOracleErrors::OnlyVAMM(decoded));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__Exp2InputTooBig as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__FromUintOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::PRBMathUD60x18__FromUintOverflow(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMathUD60x18__LogInputTooSmall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMath__MulDivFixedPointOverflow as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::PRBMath__MulDivFixedPointOverflow(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <PRBMath__MulDivOverflow as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::PRBMath__MulDivOverflow(decoded));
            }
            if let Ok(decoded) =
                <PositionNetZero as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::PositionNetZero(decoded));
            }
            if let Ok(decoded) =
                <PositionNotSettled as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::PositionNotSettled(decoded));
            }
            if let Ok(decoded) =
                <RocketPoolGetEthValueReturnedZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::RocketPoolGetEthValueReturnedZero(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <WithdrawalExceedsCurrentMargin as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleErrors::WithdrawalExceedsCurrentMargin(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <closeToOrBeyondMaturity as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleErrors::closeToOrBeyondMaturity(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for LidoRateOracleErrors {
        fn encode(self) -> Vec<u8> {
            match self {
                LidoRateOracleErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(element) => {
                    element.encode()
                }
                LidoRateOracleErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                    element,
                ) => element.encode(),
                LidoRateOracleErrors::CTokenExchangeRateReturnedZero(element) => element.encode(),
                LidoRateOracleErrors::CanOnlyTradeIfUnlocked(element) => element.encode(),
                LidoRateOracleErrors::CannotLiquidate(element) => element.encode(),
                LidoRateOracleErrors::CannotSettleBeforeMaturity(element) => element.encode(),
                LidoRateOracleErrors::DebugError(element) => element.encode(),
                LidoRateOracleErrors::ExpectedOppositeSigns(element) => element.encode(),
                LidoRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(element) => element.encode(),
                LidoRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(element) => {
                    element.encode()
                }
                LidoRateOracleErrors::InvalidMarginDelta(element) => element.encode(),
                LidoRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(element) => {
                    element.encode()
                }
                LidoRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(element) => {
                    element.encode()
                }
                LidoRateOracleErrors::LiquidityDeltaMustBePositiveInMint(element) => {
                    element.encode()
                }
                LidoRateOracleErrors::MarginLessThanMinimum(element) => element.encode(),
                LidoRateOracleErrors::MarginRequirementNotMet(element) => element.encode(),
                LidoRateOracleErrors::MarginRequirementNotMetFCM(element) => element.encode(),
                LidoRateOracleErrors::NotEnoughFunds(element) => element.encode(),
                LidoRateOracleErrors::OOO(element) => element.encode(),
                LidoRateOracleErrors::OnlyFCM(element) => element.encode(),
                LidoRateOracleErrors::OnlyMarginEngine(element) => element.encode(),
                LidoRateOracleErrors::OnlyOwnerCanUpdatePosition(element) => element.encode(),
                LidoRateOracleErrors::OnlyVAMM(element) => element.encode(),
                LidoRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(element) => element.encode(),
                LidoRateOracleErrors::PRBMathUD60x18__FromUintOverflow(element) => element.encode(),
                LidoRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(element) => element.encode(),
                LidoRateOracleErrors::PRBMath__MulDivFixedPointOverflow(element) => {
                    element.encode()
                }
                LidoRateOracleErrors::PRBMath__MulDivOverflow(element) => element.encode(),
                LidoRateOracleErrors::PositionNetZero(element) => element.encode(),
                LidoRateOracleErrors::PositionNotSettled(element) => element.encode(),
                LidoRateOracleErrors::RocketPoolGetEthValueReturnedZero(element) => {
                    element.encode()
                }
                LidoRateOracleErrors::WithdrawalExceedsCurrentMargin(element) => element.encode(),
                LidoRateOracleErrors::closeToOrBeyondMaturity(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for LidoRateOracleErrors {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LidoRateOracleErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(element) => {
                    element.fmt(f)
                }
                LidoRateOracleErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(
                    element,
                ) => element.fmt(f),
                LidoRateOracleErrors::CTokenExchangeRateReturnedZero(element) => element.fmt(f),
                LidoRateOracleErrors::CanOnlyTradeIfUnlocked(element) => element.fmt(f),
                LidoRateOracleErrors::CannotLiquidate(element) => element.fmt(f),
                LidoRateOracleErrors::CannotSettleBeforeMaturity(element) => element.fmt(f),
                LidoRateOracleErrors::DebugError(element) => element.fmt(f),
                LidoRateOracleErrors::ExpectedOppositeSigns(element) => element.fmt(f),
                LidoRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(element) => element.fmt(f),
                LidoRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(element) => {
                    element.fmt(f)
                }
                LidoRateOracleErrors::InvalidMarginDelta(element) => element.fmt(f),
                LidoRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(element) => {
                    element.fmt(f)
                }
                LidoRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(element) => element.fmt(f),
                LidoRateOracleErrors::LiquidityDeltaMustBePositiveInMint(element) => element.fmt(f),
                LidoRateOracleErrors::MarginLessThanMinimum(element) => element.fmt(f),
                LidoRateOracleErrors::MarginRequirementNotMet(element) => element.fmt(f),
                LidoRateOracleErrors::MarginRequirementNotMetFCM(element) => element.fmt(f),
                LidoRateOracleErrors::NotEnoughFunds(element) => element.fmt(f),
                LidoRateOracleErrors::OOO(element) => element.fmt(f),
                LidoRateOracleErrors::OnlyFCM(element) => element.fmt(f),
                LidoRateOracleErrors::OnlyMarginEngine(element) => element.fmt(f),
                LidoRateOracleErrors::OnlyOwnerCanUpdatePosition(element) => element.fmt(f),
                LidoRateOracleErrors::OnlyVAMM(element) => element.fmt(f),
                LidoRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(element) => element.fmt(f),
                LidoRateOracleErrors::PRBMathUD60x18__FromUintOverflow(element) => element.fmt(f),
                LidoRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(element) => element.fmt(f),
                LidoRateOracleErrors::PRBMath__MulDivFixedPointOverflow(element) => element.fmt(f),
                LidoRateOracleErrors::PRBMath__MulDivOverflow(element) => element.fmt(f),
                LidoRateOracleErrors::PositionNetZero(element) => element.fmt(f),
                LidoRateOracleErrors::PositionNotSettled(element) => element.fmt(f),
                LidoRateOracleErrors::RocketPoolGetEthValueReturnedZero(element) => element.fmt(f),
                LidoRateOracleErrors::WithdrawalExceedsCurrentMargin(element) => element.fmt(f),
                LidoRateOracleErrors::closeToOrBeyondMaturity(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedIncomeReturnedZero> for LidoRateOracleErrors {
        fn from(var: AavePoolGetReserveNormalizedIncomeReturnedZero) -> Self {
            LidoRateOracleErrors::AavePoolGetReserveNormalizedIncomeReturnedZero(var)
        }
    }
    impl ::std::convert::From<AavePoolGetReserveNormalizedVariableDebtReturnedZero>
        for LidoRateOracleErrors
    {
        fn from(var: AavePoolGetReserveNormalizedVariableDebtReturnedZero) -> Self {
            LidoRateOracleErrors::AavePoolGetReserveNormalizedVariableDebtReturnedZero(var)
        }
    }
    impl ::std::convert::From<CTokenExchangeRateReturnedZero> for LidoRateOracleErrors {
        fn from(var: CTokenExchangeRateReturnedZero) -> Self {
            LidoRateOracleErrors::CTokenExchangeRateReturnedZero(var)
        }
    }
    impl ::std::convert::From<CanOnlyTradeIfUnlocked> for LidoRateOracleErrors {
        fn from(var: CanOnlyTradeIfUnlocked) -> Self {
            LidoRateOracleErrors::CanOnlyTradeIfUnlocked(var)
        }
    }
    impl ::std::convert::From<CannotLiquidate> for LidoRateOracleErrors {
        fn from(var: CannotLiquidate) -> Self {
            LidoRateOracleErrors::CannotLiquidate(var)
        }
    }
    impl ::std::convert::From<CannotSettleBeforeMaturity> for LidoRateOracleErrors {
        fn from(var: CannotSettleBeforeMaturity) -> Self {
            LidoRateOracleErrors::CannotSettleBeforeMaturity(var)
        }
    }
    impl ::std::convert::From<DebugError> for LidoRateOracleErrors {
        fn from(var: DebugError) -> Self {
            LidoRateOracleErrors::DebugError(var)
        }
    }
    impl ::std::convert::From<ExpectedOppositeSigns> for LidoRateOracleErrors {
        fn from(var: ExpectedOppositeSigns) -> Self {
            LidoRateOracleErrors::ExpectedOppositeSigns(var)
        }
    }
    impl ::std::convert::From<ExpectedSqrtPriceZeroBeforeInit> for LidoRateOracleErrors {
        fn from(var: ExpectedSqrtPriceZeroBeforeInit) -> Self {
            LidoRateOracleErrors::ExpectedSqrtPriceZeroBeforeInit(var)
        }
    }
    impl ::std::convert::From<IRSNotionalAmountSpecifiedMustBeNonZero> for LidoRateOracleErrors {
        fn from(var: IRSNotionalAmountSpecifiedMustBeNonZero) -> Self {
            LidoRateOracleErrors::IRSNotionalAmountSpecifiedMustBeNonZero(var)
        }
    }
    impl ::std::convert::From<InvalidMarginDelta> for LidoRateOracleErrors {
        fn from(var: InvalidMarginDelta) -> Self {
            LidoRateOracleErrors::InvalidMarginDelta(var)
        }
    }
    impl ::std::convert::From<LidoGetPooledEthBySharesReturnedZero> for LidoRateOracleErrors {
        fn from(var: LidoGetPooledEthBySharesReturnedZero) -> Self {
            LidoRateOracleErrors::LidoGetPooledEthBySharesReturnedZero(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInBurn> for LidoRateOracleErrors {
        fn from(var: LiquidityDeltaMustBePositiveInBurn) -> Self {
            LidoRateOracleErrors::LiquidityDeltaMustBePositiveInBurn(var)
        }
    }
    impl ::std::convert::From<LiquidityDeltaMustBePositiveInMint> for LidoRateOracleErrors {
        fn from(var: LiquidityDeltaMustBePositiveInMint) -> Self {
            LidoRateOracleErrors::LiquidityDeltaMustBePositiveInMint(var)
        }
    }
    impl ::std::convert::From<MarginLessThanMinimum> for LidoRateOracleErrors {
        fn from(var: MarginLessThanMinimum) -> Self {
            LidoRateOracleErrors::MarginLessThanMinimum(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMet> for LidoRateOracleErrors {
        fn from(var: MarginRequirementNotMet) -> Self {
            LidoRateOracleErrors::MarginRequirementNotMet(var)
        }
    }
    impl ::std::convert::From<MarginRequirementNotMetFCM> for LidoRateOracleErrors {
        fn from(var: MarginRequirementNotMetFCM) -> Self {
            LidoRateOracleErrors::MarginRequirementNotMetFCM(var)
        }
    }
    impl ::std::convert::From<NotEnoughFunds> for LidoRateOracleErrors {
        fn from(var: NotEnoughFunds) -> Self {
            LidoRateOracleErrors::NotEnoughFunds(var)
        }
    }
    impl ::std::convert::From<OOO> for LidoRateOracleErrors {
        fn from(var: OOO) -> Self {
            LidoRateOracleErrors::OOO(var)
        }
    }
    impl ::std::convert::From<OnlyFCM> for LidoRateOracleErrors {
        fn from(var: OnlyFCM) -> Self {
            LidoRateOracleErrors::OnlyFCM(var)
        }
    }
    impl ::std::convert::From<OnlyMarginEngine> for LidoRateOracleErrors {
        fn from(var: OnlyMarginEngine) -> Self {
            LidoRateOracleErrors::OnlyMarginEngine(var)
        }
    }
    impl ::std::convert::From<OnlyOwnerCanUpdatePosition> for LidoRateOracleErrors {
        fn from(var: OnlyOwnerCanUpdatePosition) -> Self {
            LidoRateOracleErrors::OnlyOwnerCanUpdatePosition(var)
        }
    }
    impl ::std::convert::From<OnlyVAMM> for LidoRateOracleErrors {
        fn from(var: OnlyVAMM) -> Self {
            LidoRateOracleErrors::OnlyVAMM(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__Exp2InputTooBig> for LidoRateOracleErrors {
        fn from(var: PRBMathUD60x18__Exp2InputTooBig) -> Self {
            LidoRateOracleErrors::PRBMathUD60x18__Exp2InputTooBig(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__FromUintOverflow> for LidoRateOracleErrors {
        fn from(var: PRBMathUD60x18__FromUintOverflow) -> Self {
            LidoRateOracleErrors::PRBMathUD60x18__FromUintOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMathUD60x18__LogInputTooSmall> for LidoRateOracleErrors {
        fn from(var: PRBMathUD60x18__LogInputTooSmall) -> Self {
            LidoRateOracleErrors::PRBMathUD60x18__LogInputTooSmall(var)
        }
    }
    impl ::std::convert::From<PRBMath__MulDivFixedPointOverflow> for LidoRateOracleErrors {
        fn from(var: PRBMath__MulDivFixedPointOverflow) -> Self {
            LidoRateOracleErrors::PRBMath__MulDivFixedPointOverflow(var)
        }
    }
    impl ::std::convert::From<PRBMath__MulDivOverflow> for LidoRateOracleErrors {
        fn from(var: PRBMath__MulDivOverflow) -> Self {
            LidoRateOracleErrors::PRBMath__MulDivOverflow(var)
        }
    }
    impl ::std::convert::From<PositionNetZero> for LidoRateOracleErrors {
        fn from(var: PositionNetZero) -> Self {
            LidoRateOracleErrors::PositionNetZero(var)
        }
    }
    impl ::std::convert::From<PositionNotSettled> for LidoRateOracleErrors {
        fn from(var: PositionNotSettled) -> Self {
            LidoRateOracleErrors::PositionNotSettled(var)
        }
    }
    impl ::std::convert::From<RocketPoolGetEthValueReturnedZero> for LidoRateOracleErrors {
        fn from(var: RocketPoolGetEthValueReturnedZero) -> Self {
            LidoRateOracleErrors::RocketPoolGetEthValueReturnedZero(var)
        }
    }
    impl ::std::convert::From<WithdrawalExceedsCurrentMargin> for LidoRateOracleErrors {
        fn from(var: WithdrawalExceedsCurrentMargin) -> Self {
            LidoRateOracleErrors::WithdrawalExceedsCurrentMargin(var)
        }
    }
    impl ::std::convert::From<closeToOrBeyondMaturity> for LidoRateOracleErrors {
        fn from(var: closeToOrBeyondMaturity) -> Self {
            LidoRateOracleErrors::closeToOrBeyondMaturity(var)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "MinSecondsSinceLastUpdate",
        abi = "MinSecondsSinceLastUpdate(uint256)"
    )]
    pub struct MinSecondsSinceLastUpdateFilter {
        pub min_seconds_since_last_update: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OracleBufferUpdate",
        abi = "OracleBufferUpdate(uint256,address,uint16,uint32,uint256,uint16,uint16)"
    )]
    pub struct OracleBufferUpdateFilter {
        pub block_timestamp_scaled: ethers::core::types::U256,
        pub source: ethers::core::types::Address,
        pub index: u16,
        pub block_timestamp: u32,
        pub observed_value: ethers::core::types::U256,
        pub cardinality: u16,
        pub cardinality_next: u16,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "RateCardinalityNext", abi = "RateCardinalityNext(uint16)")]
    pub struct RateCardinalityNextFilter {
        pub observation_cardinality_next_new: u16,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum LidoRateOracleEvents {
        MinSecondsSinceLastUpdateFilter(MinSecondsSinceLastUpdateFilter),
        OracleBufferUpdateFilter(OracleBufferUpdateFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        RateCardinalityNextFilter(RateCardinalityNextFilter),
    }
    impl ethers::contract::EthLogDecode for LidoRateOracleEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MinSecondsSinceLastUpdateFilter::decode_log(log) {
                return Ok(LidoRateOracleEvents::MinSecondsSinceLastUpdateFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = OracleBufferUpdateFilter::decode_log(log) {
                return Ok(LidoRateOracleEvents::OracleBufferUpdateFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(LidoRateOracleEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = RateCardinalityNextFilter::decode_log(log) {
                return Ok(LidoRateOracleEvents::RateCardinalityNextFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for LidoRateOracleEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LidoRateOracleEvents::MinSecondsSinceLastUpdateFilter(element) => element.fmt(f),
                LidoRateOracleEvents::OracleBufferUpdateFilter(element) => element.fmt(f),
                LidoRateOracleEvents::OwnershipTransferredFilter(element) => element.fmt(f),
                LidoRateOracleEvents::RateCardinalityNextFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `ONE_IN_WAD` function with signature `ONE_IN_WAD()` and selector `[195, 48, 201, 141]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "ONE_IN_WAD", abi = "ONE_IN_WAD()")]
    pub struct OneInWadCall;
    #[doc = "Container type for all input parameters for the `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` function with signature `UNDERLYING_YIELD_BEARING_PROTOCOL_ID()` and selector `[34, 255, 101, 104]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "UNDERLYING_YIELD_BEARING_PROTOCOL_ID",
        abi = "UNDERLYING_YIELD_BEARING_PROTOCOL_ID()"
    )]
    pub struct UnderlyingYieldBearingProtocolIdCall;
    #[doc = "Container type for all input parameters for the `currentBlockSlope` function with signature `currentBlockSlope()` and selector `[36, 177, 139, 23]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "currentBlockSlope", abi = "currentBlockSlope()")]
    pub struct CurrentBlockSlopeCall;
    #[doc = "Container type for all input parameters for the `getApyFrom` function with signature `getApyFrom(uint256)` and selector `[23, 34, 30, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getApyFrom", abi = "getApyFrom(uint256)")]
    pub struct GetApyFromCall {
        pub from: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getApyFromTo` function with signature `getApyFromTo(uint256,uint256)` and selector `[147, 85, 109, 189]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getApyFromTo", abi = "getApyFromTo(uint256,uint256)")]
    pub struct GetApyFromToCall {
        pub from: ethers::core::types::U256,
        pub to: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getBlockSlope` function with signature `getBlockSlope()` and selector `[145, 170, 55, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getBlockSlope", abi = "getBlockSlope()")]
    pub struct GetBlockSlopeCall;
    #[doc = "Container type for all input parameters for the `getCurrentRateInRay` function with signature `getCurrentRateInRay()` and selector `[239, 223, 93, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getCurrentRateInRay", abi = "getCurrentRateInRay()")]
    pub struct GetCurrentRateInRayCall;
    #[doc = "Container type for all input parameters for the `getLastRateSlope` function with signature `getLastRateSlope()` and selector `[254, 17, 95, 190]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getLastRateSlope", abi = "getLastRateSlope()")]
    pub struct GetLastRateSlopeCall;
    #[doc = "Container type for all input parameters for the `getLastUpdatedRate` function with signature `getLastUpdatedRate()` and selector `[138, 107, 140, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getLastUpdatedRate", abi = "getLastUpdatedRate()")]
    pub struct GetLastUpdatedRateCall;
    #[doc = "Container type for all input parameters for the `getRateFrom` function with signature `getRateFrom(uint256)` and selector `[22, 62, 156, 79]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getRateFrom", abi = "getRateFrom(uint256)")]
    pub struct GetRateFromCall {
        pub from: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getRateFromTo` function with signature `getRateFromTo(uint256,uint256)` and selector `[247, 57, 103, 12]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "getRateFromTo", abi = "getRateFromTo(uint256,uint256)")]
    pub struct GetRateFromToCall {
        pub from: ethers::core::types::U256,
        pub to: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `increaseObservationCardinalityNext` function with signature `increaseObservationCardinalityNext(uint16)` and selector `[50, 20, 143, 103]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "increaseObservationCardinalityNext",
        abi = "increaseObservationCardinalityNext(uint16)"
    )]
    pub struct IncreaseObservationCardinalityNextCall {
        pub rate_cardinality_next: u16,
    }
    #[doc = "Container type for all input parameters for the `interpolateRateValue` function with signature `interpolateRateValue(uint256,uint256,uint256)` and selector `[84, 18, 76, 100]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "interpolateRateValue",
        abi = "interpolateRateValue(uint256,uint256,uint256)"
    )]
    pub struct InterpolateRateValueCall {
        pub before_or_at_rate_value_ray: ethers::core::types::U256,
        pub apy_from_before_or_at_to_at_or_after_wad: ethers::core::types::U256,
        pub time_delta_before_or_at_to_queried_time_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `lastUpdatedBlock` function with signature `lastUpdatedBlock()` and selector `[249, 12, 229, 186]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastUpdatedBlock", abi = "lastUpdatedBlock()")]
    pub struct LastUpdatedBlockCall;
    #[doc = "Container type for all input parameters for the `lidoOracle` function with signature `lidoOracle()` and selector `[53, 125, 123, 92]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "lidoOracle", abi = "lidoOracle()")]
    pub struct LidoOracleCall;
    #[doc = "Container type for all input parameters for the `minSecondsSinceLastUpdate` function with signature `minSecondsSinceLastUpdate()` and selector `[124, 242, 204, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "minSecondsSinceLastUpdate",
        abi = "minSecondsSinceLastUpdate()"
    )]
    pub struct MinSecondsSinceLastUpdateCall;
    #[doc = "Container type for all input parameters for the `observations` function with signature `observations(uint256)` and selector `[37, 44, 9, 215]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "observations", abi = "observations(uint256)")]
    pub struct ObservationsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `oracleVars` function with signature `oracleVars()` and selector `[199, 219, 53, 155]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "oracleVars", abi = "oracleVars()")]
    pub struct OracleVarsCall;
    #[doc = "Container type for all input parameters for the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    #[doc = "Container type for all input parameters for the `refreshBeaconSpec` function with signature `refreshBeaconSpec()` and selector `[221, 199, 165, 170]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "refreshBeaconSpec", abi = "refreshBeaconSpec()")]
    pub struct RefreshBeaconSpecCall;
    #[doc = "Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `[113, 80, 24, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    #[doc = "Container type for all input parameters for the `setMinSecondsSinceLastUpdate` function with signature `setMinSecondsSinceLastUpdate(uint256)` and selector `[189, 176, 80, 146]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "setMinSecondsSinceLastUpdate",
        abi = "setMinSecondsSinceLastUpdate(uint256)"
    )]
    pub struct SetMinSecondsSinceLastUpdateCall {
        pub min_seconds_since_last_update: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `settlementRateCache` function with signature `settlementRateCache(uint32,uint32)` and selector `[17, 149, 8, 46]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "settlementRateCache",
        abi = "settlementRateCache(uint32,uint32)"
    )]
    pub struct SettlementRateCacheCall(pub u32, pub u32);
    #[doc = "Container type for all input parameters for the `stEth` function with signature `stEth()` and selector `[153, 148, 14, 206]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "stEth", abi = "stEth()")]
    pub struct StEthCall;
    #[doc = "Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `[242, 253, 227, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `underlying` function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "underlying", abi = "underlying()")]
    pub struct UnderlyingCall;
    #[doc = "Container type for all input parameters for the `variableFactor` function with signature `variableFactor(uint256,uint256)` and selector `[37, 242, 88, 221]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "variableFactor", abi = "variableFactor(uint256,uint256)")]
    pub struct VariableFactorCall {
        pub term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
        pub term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `variableFactorNoCache` function with signature `variableFactorNoCache(uint256,uint256)` and selector `[65, 69, 53, 40]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "variableFactorNoCache",
        abi = "variableFactorNoCache(uint256,uint256)"
    )]
    pub struct VariableFactorNoCacheCall {
        pub term_start_timestamp_in_wei_seconds: ethers::core::types::U256,
        pub term_end_timestamp_in_wei_seconds: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `writeOracleEntry` function with signature `writeOracleEntry()` and selector `[122, 164, 219, 19]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "writeOracleEntry", abi = "writeOracleEntry()")]
    pub struct WriteOracleEntryCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum LidoRateOracleCalls {
        OneInWad(OneInWadCall),
        UnderlyingYieldBearingProtocolId(UnderlyingYieldBearingProtocolIdCall),
        CurrentBlockSlope(CurrentBlockSlopeCall),
        GetApyFrom(GetApyFromCall),
        GetApyFromTo(GetApyFromToCall),
        GetBlockSlope(GetBlockSlopeCall),
        GetCurrentRateInRay(GetCurrentRateInRayCall),
        GetLastRateSlope(GetLastRateSlopeCall),
        GetLastUpdatedRate(GetLastUpdatedRateCall),
        GetRateFrom(GetRateFromCall),
        GetRateFromTo(GetRateFromToCall),
        IncreaseObservationCardinalityNext(IncreaseObservationCardinalityNextCall),
        InterpolateRateValue(InterpolateRateValueCall),
        LastUpdatedBlock(LastUpdatedBlockCall),
        LidoOracle(LidoOracleCall),
        MinSecondsSinceLastUpdate(MinSecondsSinceLastUpdateCall),
        Observations(ObservationsCall),
        OracleVars(OracleVarsCall),
        Owner(OwnerCall),
        RefreshBeaconSpec(RefreshBeaconSpecCall),
        RenounceOwnership(RenounceOwnershipCall),
        SetMinSecondsSinceLastUpdate(SetMinSecondsSinceLastUpdateCall),
        SettlementRateCache(SettlementRateCacheCall),
        StEth(StEthCall),
        TransferOwnership(TransferOwnershipCall),
        Underlying(UnderlyingCall),
        VariableFactor(VariableFactorCall),
        VariableFactorNoCache(VariableFactorNoCacheCall),
        WriteOracleEntry(WriteOracleEntryCall),
    }
    impl ethers::core::abi::AbiDecode for LidoRateOracleCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <OneInWadCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::OneInWad(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingYieldBearingProtocolIdCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleCalls::UnderlyingYieldBearingProtocolId(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <CurrentBlockSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::CurrentBlockSlope(decoded));
            }
            if let Ok(decoded) =
                <GetApyFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::GetApyFrom(decoded));
            }
            if let Ok(decoded) =
                <GetApyFromToCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::GetApyFromTo(decoded));
            }
            if let Ok(decoded) =
                <GetBlockSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::GetBlockSlope(decoded));
            }
            if let Ok(decoded) =
                <GetCurrentRateInRayCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::GetCurrentRateInRay(decoded));
            }
            if let Ok(decoded) =
                <GetLastRateSlopeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::GetLastRateSlope(decoded));
            }
            if let Ok(decoded) =
                <GetLastUpdatedRateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::GetLastUpdatedRate(decoded));
            }
            if let Ok(decoded) =
                <GetRateFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::GetRateFrom(decoded));
            }
            if let Ok(decoded) =
                <GetRateFromToCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::GetRateFromTo(decoded));
            }
            if let Ok(decoded) =
                <IncreaseObservationCardinalityNextCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleCalls::IncreaseObservationCardinalityNext(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <InterpolateRateValueCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::InterpolateRateValue(decoded));
            }
            if let Ok(decoded) =
                <LastUpdatedBlockCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::LastUpdatedBlock(decoded));
            }
            if let Ok(decoded) =
                <LidoOracleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::LidoOracle(decoded));
            }
            if let Ok(decoded) =
                <MinSecondsSinceLastUpdateCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleCalls::MinSecondsSinceLastUpdate(decoded));
            }
            if let Ok(decoded) =
                <ObservationsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::Observations(decoded));
            }
            if let Ok(decoded) =
                <OracleVarsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::OracleVars(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::Owner(decoded));
            }
            if let Ok(decoded) =
                <RefreshBeaconSpecCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::RefreshBeaconSpec(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <SetMinSecondsSinceLastUpdateCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LidoRateOracleCalls::SetMinSecondsSinceLastUpdate(decoded));
            }
            if let Ok(decoded) =
                <SettlementRateCacheCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::SettlementRateCache(decoded));
            }
            if let Ok(decoded) = <StEthCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::StEth(decoded));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::Underlying(decoded));
            }
            if let Ok(decoded) =
                <VariableFactorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::VariableFactor(decoded));
            }
            if let Ok(decoded) =
                <VariableFactorNoCacheCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::VariableFactorNoCache(decoded));
            }
            if let Ok(decoded) =
                <WriteOracleEntryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LidoRateOracleCalls::WriteOracleEntry(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for LidoRateOracleCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                LidoRateOracleCalls::OneInWad(element) => element.encode(),
                LidoRateOracleCalls::UnderlyingYieldBearingProtocolId(element) => element.encode(),
                LidoRateOracleCalls::CurrentBlockSlope(element) => element.encode(),
                LidoRateOracleCalls::GetApyFrom(element) => element.encode(),
                LidoRateOracleCalls::GetApyFromTo(element) => element.encode(),
                LidoRateOracleCalls::GetBlockSlope(element) => element.encode(),
                LidoRateOracleCalls::GetCurrentRateInRay(element) => element.encode(),
                LidoRateOracleCalls::GetLastRateSlope(element) => element.encode(),
                LidoRateOracleCalls::GetLastUpdatedRate(element) => element.encode(),
                LidoRateOracleCalls::GetRateFrom(element) => element.encode(),
                LidoRateOracleCalls::GetRateFromTo(element) => element.encode(),
                LidoRateOracleCalls::IncreaseObservationCardinalityNext(element) => {
                    element.encode()
                }
                LidoRateOracleCalls::InterpolateRateValue(element) => element.encode(),
                LidoRateOracleCalls::LastUpdatedBlock(element) => element.encode(),
                LidoRateOracleCalls::LidoOracle(element) => element.encode(),
                LidoRateOracleCalls::MinSecondsSinceLastUpdate(element) => element.encode(),
                LidoRateOracleCalls::Observations(element) => element.encode(),
                LidoRateOracleCalls::OracleVars(element) => element.encode(),
                LidoRateOracleCalls::Owner(element) => element.encode(),
                LidoRateOracleCalls::RefreshBeaconSpec(element) => element.encode(),
                LidoRateOracleCalls::RenounceOwnership(element) => element.encode(),
                LidoRateOracleCalls::SetMinSecondsSinceLastUpdate(element) => element.encode(),
                LidoRateOracleCalls::SettlementRateCache(element) => element.encode(),
                LidoRateOracleCalls::StEth(element) => element.encode(),
                LidoRateOracleCalls::TransferOwnership(element) => element.encode(),
                LidoRateOracleCalls::Underlying(element) => element.encode(),
                LidoRateOracleCalls::VariableFactor(element) => element.encode(),
                LidoRateOracleCalls::VariableFactorNoCache(element) => element.encode(),
                LidoRateOracleCalls::WriteOracleEntry(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for LidoRateOracleCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LidoRateOracleCalls::OneInWad(element) => element.fmt(f),
                LidoRateOracleCalls::UnderlyingYieldBearingProtocolId(element) => element.fmt(f),
                LidoRateOracleCalls::CurrentBlockSlope(element) => element.fmt(f),
                LidoRateOracleCalls::GetApyFrom(element) => element.fmt(f),
                LidoRateOracleCalls::GetApyFromTo(element) => element.fmt(f),
                LidoRateOracleCalls::GetBlockSlope(element) => element.fmt(f),
                LidoRateOracleCalls::GetCurrentRateInRay(element) => element.fmt(f),
                LidoRateOracleCalls::GetLastRateSlope(element) => element.fmt(f),
                LidoRateOracleCalls::GetLastUpdatedRate(element) => element.fmt(f),
                LidoRateOracleCalls::GetRateFrom(element) => element.fmt(f),
                LidoRateOracleCalls::GetRateFromTo(element) => element.fmt(f),
                LidoRateOracleCalls::IncreaseObservationCardinalityNext(element) => element.fmt(f),
                LidoRateOracleCalls::InterpolateRateValue(element) => element.fmt(f),
                LidoRateOracleCalls::LastUpdatedBlock(element) => element.fmt(f),
                LidoRateOracleCalls::LidoOracle(element) => element.fmt(f),
                LidoRateOracleCalls::MinSecondsSinceLastUpdate(element) => element.fmt(f),
                LidoRateOracleCalls::Observations(element) => element.fmt(f),
                LidoRateOracleCalls::OracleVars(element) => element.fmt(f),
                LidoRateOracleCalls::Owner(element) => element.fmt(f),
                LidoRateOracleCalls::RefreshBeaconSpec(element) => element.fmt(f),
                LidoRateOracleCalls::RenounceOwnership(element) => element.fmt(f),
                LidoRateOracleCalls::SetMinSecondsSinceLastUpdate(element) => element.fmt(f),
                LidoRateOracleCalls::SettlementRateCache(element) => element.fmt(f),
                LidoRateOracleCalls::StEth(element) => element.fmt(f),
                LidoRateOracleCalls::TransferOwnership(element) => element.fmt(f),
                LidoRateOracleCalls::Underlying(element) => element.fmt(f),
                LidoRateOracleCalls::VariableFactor(element) => element.fmt(f),
                LidoRateOracleCalls::VariableFactorNoCache(element) => element.fmt(f),
                LidoRateOracleCalls::WriteOracleEntry(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<OneInWadCall> for LidoRateOracleCalls {
        fn from(var: OneInWadCall) -> Self {
            LidoRateOracleCalls::OneInWad(var)
        }
    }
    impl ::std::convert::From<UnderlyingYieldBearingProtocolIdCall> for LidoRateOracleCalls {
        fn from(var: UnderlyingYieldBearingProtocolIdCall) -> Self {
            LidoRateOracleCalls::UnderlyingYieldBearingProtocolId(var)
        }
    }
    impl ::std::convert::From<CurrentBlockSlopeCall> for LidoRateOracleCalls {
        fn from(var: CurrentBlockSlopeCall) -> Self {
            LidoRateOracleCalls::CurrentBlockSlope(var)
        }
    }
    impl ::std::convert::From<GetApyFromCall> for LidoRateOracleCalls {
        fn from(var: GetApyFromCall) -> Self {
            LidoRateOracleCalls::GetApyFrom(var)
        }
    }
    impl ::std::convert::From<GetApyFromToCall> for LidoRateOracleCalls {
        fn from(var: GetApyFromToCall) -> Self {
            LidoRateOracleCalls::GetApyFromTo(var)
        }
    }
    impl ::std::convert::From<GetBlockSlopeCall> for LidoRateOracleCalls {
        fn from(var: GetBlockSlopeCall) -> Self {
            LidoRateOracleCalls::GetBlockSlope(var)
        }
    }
    impl ::std::convert::From<GetCurrentRateInRayCall> for LidoRateOracleCalls {
        fn from(var: GetCurrentRateInRayCall) -> Self {
            LidoRateOracleCalls::GetCurrentRateInRay(var)
        }
    }
    impl ::std::convert::From<GetLastRateSlopeCall> for LidoRateOracleCalls {
        fn from(var: GetLastRateSlopeCall) -> Self {
            LidoRateOracleCalls::GetLastRateSlope(var)
        }
    }
    impl ::std::convert::From<GetLastUpdatedRateCall> for LidoRateOracleCalls {
        fn from(var: GetLastUpdatedRateCall) -> Self {
            LidoRateOracleCalls::GetLastUpdatedRate(var)
        }
    }
    impl ::std::convert::From<GetRateFromCall> for LidoRateOracleCalls {
        fn from(var: GetRateFromCall) -> Self {
            LidoRateOracleCalls::GetRateFrom(var)
        }
    }
    impl ::std::convert::From<GetRateFromToCall> for LidoRateOracleCalls {
        fn from(var: GetRateFromToCall) -> Self {
            LidoRateOracleCalls::GetRateFromTo(var)
        }
    }
    impl ::std::convert::From<IncreaseObservationCardinalityNextCall> for LidoRateOracleCalls {
        fn from(var: IncreaseObservationCardinalityNextCall) -> Self {
            LidoRateOracleCalls::IncreaseObservationCardinalityNext(var)
        }
    }
    impl ::std::convert::From<InterpolateRateValueCall> for LidoRateOracleCalls {
        fn from(var: InterpolateRateValueCall) -> Self {
            LidoRateOracleCalls::InterpolateRateValue(var)
        }
    }
    impl ::std::convert::From<LastUpdatedBlockCall> for LidoRateOracleCalls {
        fn from(var: LastUpdatedBlockCall) -> Self {
            LidoRateOracleCalls::LastUpdatedBlock(var)
        }
    }
    impl ::std::convert::From<LidoOracleCall> for LidoRateOracleCalls {
        fn from(var: LidoOracleCall) -> Self {
            LidoRateOracleCalls::LidoOracle(var)
        }
    }
    impl ::std::convert::From<MinSecondsSinceLastUpdateCall> for LidoRateOracleCalls {
        fn from(var: MinSecondsSinceLastUpdateCall) -> Self {
            LidoRateOracleCalls::MinSecondsSinceLastUpdate(var)
        }
    }
    impl ::std::convert::From<ObservationsCall> for LidoRateOracleCalls {
        fn from(var: ObservationsCall) -> Self {
            LidoRateOracleCalls::Observations(var)
        }
    }
    impl ::std::convert::From<OracleVarsCall> for LidoRateOracleCalls {
        fn from(var: OracleVarsCall) -> Self {
            LidoRateOracleCalls::OracleVars(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for LidoRateOracleCalls {
        fn from(var: OwnerCall) -> Self {
            LidoRateOracleCalls::Owner(var)
        }
    }
    impl ::std::convert::From<RefreshBeaconSpecCall> for LidoRateOracleCalls {
        fn from(var: RefreshBeaconSpecCall) -> Self {
            LidoRateOracleCalls::RefreshBeaconSpec(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for LidoRateOracleCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            LidoRateOracleCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<SetMinSecondsSinceLastUpdateCall> for LidoRateOracleCalls {
        fn from(var: SetMinSecondsSinceLastUpdateCall) -> Self {
            LidoRateOracleCalls::SetMinSecondsSinceLastUpdate(var)
        }
    }
    impl ::std::convert::From<SettlementRateCacheCall> for LidoRateOracleCalls {
        fn from(var: SettlementRateCacheCall) -> Self {
            LidoRateOracleCalls::SettlementRateCache(var)
        }
    }
    impl ::std::convert::From<StEthCall> for LidoRateOracleCalls {
        fn from(var: StEthCall) -> Self {
            LidoRateOracleCalls::StEth(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for LidoRateOracleCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            LidoRateOracleCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UnderlyingCall> for LidoRateOracleCalls {
        fn from(var: UnderlyingCall) -> Self {
            LidoRateOracleCalls::Underlying(var)
        }
    }
    impl ::std::convert::From<VariableFactorCall> for LidoRateOracleCalls {
        fn from(var: VariableFactorCall) -> Self {
            LidoRateOracleCalls::VariableFactor(var)
        }
    }
    impl ::std::convert::From<VariableFactorNoCacheCall> for LidoRateOracleCalls {
        fn from(var: VariableFactorNoCacheCall) -> Self {
            LidoRateOracleCalls::VariableFactorNoCache(var)
        }
    }
    impl ::std::convert::From<WriteOracleEntryCall> for LidoRateOracleCalls {
        fn from(var: WriteOracleEntryCall) -> Self {
            LidoRateOracleCalls::WriteOracleEntry(var)
        }
    }
    #[doc = "Container type for all return fields from the `ONE_IN_WAD` function with signature `ONE_IN_WAD()` and selector `[195, 48, 201, 141]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OneInWadReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` function with signature `UNDERLYING_YIELD_BEARING_PROTOCOL_ID()` and selector `[34, 255, 101, 104]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct UnderlyingYieldBearingProtocolIdReturn(pub u8);
    #[doc = "Container type for all return fields from the `currentBlockSlope` function with signature `currentBlockSlope()` and selector `[36, 177, 139, 23]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct CurrentBlockSlopeReturn {
        pub time_change: u32,
        pub block_change: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getApyFrom` function with signature `getApyFrom(uint256)` and selector `[23, 34, 30, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetApyFromReturn {
        pub apy_from_to_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getApyFromTo` function with signature `getApyFromTo(uint256,uint256)` and selector `[147, 85, 109, 189]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetApyFromToReturn {
        pub apy_from_to_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getBlockSlope` function with signature `getBlockSlope()` and selector `[145, 170, 55, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetBlockSlopeReturn {
        pub block_change: ethers::core::types::U256,
        pub time_change: u32,
    }
    #[doc = "Container type for all return fields from the `getCurrentRateInRay` function with signature `getCurrentRateInRay()` and selector `[239, 223, 93, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetCurrentRateInRayReturn {
        pub current_rate: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getLastRateSlope` function with signature `getLastRateSlope()` and selector `[254, 17, 95, 190]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetLastRateSlopeReturn {
        pub rate_change: ethers::core::types::U256,
        pub time_change: u32,
    }
    #[doc = "Container type for all return fields from the `getLastUpdatedRate` function with signature `getLastUpdatedRate()` and selector `[138, 107, 140, 93]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetLastUpdatedRateReturn {
        pub timestamp: u32,
        pub result_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getRateFrom` function with signature `getRateFrom(uint256)` and selector `[22, 62, 156, 79]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetRateFromReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `getRateFromTo` function with signature `getRateFromTo(uint256,uint256)` and selector `[247, 57, 103, 12]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetRateFromToReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `interpolateRateValue` function with signature `interpolateRateValue(uint256,uint256,uint256)` and selector `[84, 18, 76, 100]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct InterpolateRateValueReturn {
        pub rate_value_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `lastUpdatedBlock` function with signature `lastUpdatedBlock()` and selector `[249, 12, 229, 186]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct LastUpdatedBlockReturn {
        pub timestamp: u32,
        pub number: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `lidoOracle` function with signature `lidoOracle()` and selector `[53, 125, 123, 92]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct LidoOracleReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `minSecondsSinceLastUpdate` function with signature `minSecondsSinceLastUpdate()` and selector `[124, 242, 204, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct MinSecondsSinceLastUpdateReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `observations` function with signature `observations(uint256)` and selector `[37, 44, 9, 215]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct ObservationsReturn {
        pub block_timestamp: u32,
        pub observed_value: ethers::core::types::U256,
        pub initialized: bool,
    }
    #[doc = "Container type for all return fields from the `oracleVars` function with signature `oracleVars()` and selector `[199, 219, 53, 155]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OracleVarsReturn {
        pub rate_index: u16,
        pub rate_cardinality: u16,
        pub rate_cardinality_next: u16,
    }
    #[doc = "Container type for all return fields from the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `settlementRateCache` function with signature `settlementRateCache(uint32,uint32)` and selector `[17, 149, 8, 46]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct SettlementRateCacheReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `stEth` function with signature `stEth()` and selector `[153, 148, 14, 206]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct StEthReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `underlying` function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct UnderlyingReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `variableFactor` function with signature `variableFactor(uint256,uint256)` and selector `[37, 242, 88, 221]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VariableFactorReturn {
        pub result_wad: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `variableFactorNoCache` function with signature `variableFactorNoCache(uint256,uint256)` and selector `[65, 69, 53, 40]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VariableFactorNoCacheReturn {
        pub result_wad: ethers::core::types::U256,
    }
}
